/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.win32;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.io.Stream;
import system.componentmodel.CancelEventHandler;


/**
 * The base .NET class managing Microsoft.Win32.OpenFileDialog, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35. Extends {@link NetObject}.
 */
public class OpenFileDialog extends NetObject  {
    public static final String assemblyFullName = "PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
	public static final String assemblyShortName = "PresentationFramework";
    public static final String className = "Microsoft.Win32.OpenFileDialog";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OpenFileDialog(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static OpenFileDialog castFrom(IJCOBridgeReflected from) throws Throwable {
        return new OpenFileDialog(from.getJCOInstance());
    }

    // Constructors section
    
    
    public OpenFileDialog() throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public Stream OpenFile() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.runtime.serialization.SerializationException, system.io.IOException {
        try {
            JCObject objOpenFile = (JCObject)classInstance.Invoke("OpenFile");
            return new Stream(objOpenFile);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Stream[] OpenFiles() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.runtime.serialization.SerializationException, system.io.IOException {
        try {
            ArrayList<Stream> resultingArrayList = new ArrayList<Stream>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("OpenFiles");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new Stream(resultingObject));
            }
            Stream[] resultingArray = new Stream[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Reset() throws Throwable {
        try {
            classInstance.Invoke("Reset");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public boolean getMultiselect() throws Throwable {
        try {
            return (boolean)classInstance.Get("Multiselect");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMultiselect(boolean Multiselect) throws Throwable {
        try {
            classInstance.Set("Multiselect", Multiselect);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getReadOnlyChecked() throws Throwable {
        try {
            return (boolean)classInstance.Get("ReadOnlyChecked");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReadOnlyChecked(boolean ReadOnlyChecked) throws Throwable {
        try {
            classInstance.Set("ReadOnlyChecked", ReadOnlyChecked);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getShowReadOnly() throws Throwable {
        try {
            return (boolean)classInstance.Get("ShowReadOnly");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setShowReadOnly(boolean ShowReadOnly) throws Throwable {
        try {
            classInstance.Set("ShowReadOnly", ShowReadOnly);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAddExtension() throws Throwable {
        try {
            return (boolean)classInstance.Get("AddExtension");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAddExtension(boolean AddExtension) throws Throwable {
        try {
            classInstance.Set("AddExtension", AddExtension);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getCheckFileExists() throws Throwable {
        try {
            return (boolean)classInstance.Get("CheckFileExists");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCheckFileExists(boolean CheckFileExists) throws Throwable {
        try {
            classInstance.Set("CheckFileExists", CheckFileExists);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getCheckPathExists() throws Throwable {
        try {
            return (boolean)classInstance.Get("CheckPathExists");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCheckPathExists(boolean CheckPathExists) throws Throwable {
        try {
            classInstance.Set("CheckPathExists", CheckPathExists);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDefaultExt() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("DefaultExt");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDefaultExt(java.lang.String DefaultExt) throws Throwable {
        try {
            classInstance.Set("DefaultExt", (Object)DefaultExt);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getDereferenceLinks() throws Throwable {
        try {
            return (boolean)classInstance.Get("DereferenceLinks");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDereferenceLinks(boolean DereferenceLinks) throws Throwable {
        try {
            classInstance.Set("DereferenceLinks", DereferenceLinks);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSafeFileName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("SafeFileName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getSafeFileNames() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("SafeFileNames");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexSafeFileNames = 0; indexSafeFileNames < resultingArrayList.size(); indexSafeFileNames++ ) {
				resultingArray[indexSafeFileNames] = (java.lang.String)resultingArrayList.get(indexSafeFileNames);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getFileName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("FileName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFileName(java.lang.String FileName) throws Throwable {
        try {
            classInstance.Set("FileName", (Object)FileName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getFileNames() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("FileNames");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexFileNames = 0; indexFileNames < resultingArrayList.size(); indexFileNames++ ) {
				resultingArray[indexFileNames] = (java.lang.String)resultingArrayList.get(indexFileNames);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getFilter() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Filter");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFilter(java.lang.String Filter) throws Throwable {
        try {
            classInstance.Set("Filter", (Object)Filter);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getFilterIndex() throws Throwable {
        try {
            return (int)classInstance.Get("FilterIndex");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFilterIndex(int FilterIndex) throws Throwable {
        try {
            classInstance.Set("FilterIndex", FilterIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getInitialDirectory() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("InitialDirectory");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInitialDirectory(java.lang.String InitialDirectory) throws Throwable {
        try {
            classInstance.Set("InitialDirectory", (Object)InitialDirectory);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRestoreDirectory() throws Throwable {
        try {
            return (boolean)classInstance.Get("RestoreDirectory");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRestoreDirectory(boolean RestoreDirectory) throws Throwable {
        try {
            classInstance.Set("RestoreDirectory", RestoreDirectory);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTitle() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Title");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTitle(java.lang.String Title) throws Throwable {
        try {
            classInstance.Set("Title", (Object)Title);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getValidateNames() throws Throwable {
        try {
            return (boolean)classInstance.Get("ValidateNames");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setValidateNames(boolean ValidateNames) throws Throwable {
        try {
            classInstance.Set("ValidateNames", ValidateNames);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getTag() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Tag");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTag(NetObject Tag) throws Throwable {
        try {
            classInstance.Set("Tag", (Object)Tag.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
    public void addFileOk(CancelEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("FileOk", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeFileOk(CancelEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("FileOk", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


}