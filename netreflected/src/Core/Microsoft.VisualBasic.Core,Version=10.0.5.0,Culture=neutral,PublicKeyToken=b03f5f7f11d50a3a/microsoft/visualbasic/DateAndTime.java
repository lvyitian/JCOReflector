/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.visualbasic;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.DateTime;
import microsoft.visualbasic.DateInterval;
import microsoft.visualbasic.FirstDayOfWeek;
import microsoft.visualbasic.FirstWeekOfYear;


/**
 * The base .NET class managing Microsoft.VisualBasic.DateAndTime, Microsoft.VisualBasic.Core, Version=10.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class DateAndTime extends NetObject  {
    public static final String assemblyFullName = "Microsoft.VisualBasic.Core, Version=10.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "Microsoft.VisualBasic.Core";
    public static final String className = "Microsoft.VisualBasic.DateAndTime";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DateAndTime(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static DateAndTime castFrom(IJCOBridgeReflected from) throws Throwable {
        return new DateAndTime(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public static DateTime DateAdd(DateInterval Interval, double Number, DateTime DateValue) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.TypeInitializationException, system.OutOfMemoryException, system.FormatException, system.ArrayTypeMismatchException {
        try {
            JCObject objDateAdd = (JCObject)classType.Invoke("DateAdd", (Object)Interval.getJCOInstance(), Number, (Object)DateValue.getJCOInstance());
            return new DateTime(objDateAdd);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static long DateDiff(DateInterval Interval, DateTime Date1, DateTime Date2, FirstDayOfWeek DayOfWeek, FirstWeekOfYear WeekOfYear) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.TypeInitializationException, system.FormatException, system.OutOfMemoryException {
        try {
            return (long)classType.Invoke("DateDiff", (Object)Interval.getJCOInstance(), (Object)Date1.getJCOInstance(), (Object)Date2.getJCOInstance(), (Object)DayOfWeek.getJCOInstance(), (Object)WeekOfYear.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int DatePart(DateInterval Interval, DateTime DateValue, FirstDayOfWeek FirstDayOfWeekValue, FirstWeekOfYear FirstWeekOfYearValue) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.TypeInitializationException, system.FormatException, system.ArrayTypeMismatchException {
        try {
            return (int)classType.Invoke("DatePart", (Object)Interval.getJCOInstance(), (Object)DateValue.getJCOInstance(), (Object)FirstDayOfWeekValue.getJCOInstance(), (Object)FirstWeekOfYearValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DateTime DateAdd(java.lang.String Interval, double Number, NetObject DateValue) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.TypeInitializationException, system.InvalidCastException, system.OutOfMemoryException, system.NotSupportedException, system.FormatException, system.ArrayTypeMismatchException, system.InvalidOperationException {
        try {
            JCObject objDateAdd = (JCObject)classType.Invoke("DateAdd", (Object)Interval, Number, (Object)DateValue.getJCOInstance());
            return new DateTime(objDateAdd);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static long DateDiff(java.lang.String Interval, NetObject Date1, NetObject Date2, FirstDayOfWeek DayOfWeek, FirstWeekOfYear WeekOfYear) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.TypeInitializationException, system.InvalidCastException, system.OutOfMemoryException, system.NotSupportedException, system.FormatException, system.ArrayTypeMismatchException, system.InvalidOperationException {
        try {
            return (long)classType.Invoke("DateDiff", (Object)Interval, (Object)Date1.getJCOInstance(), (Object)Date2.getJCOInstance(), (Object)DayOfWeek.getJCOInstance(), (Object)WeekOfYear.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int DatePart(java.lang.String Interval, NetObject DateValue, FirstDayOfWeek DayOfWeek, FirstWeekOfYear WeekOfYear) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.TypeInitializationException, system.InvalidCastException, system.OutOfMemoryException, system.NotSupportedException, system.FormatException, system.ArrayTypeMismatchException, system.InvalidOperationException {
        try {
            return (int)classType.Invoke("DatePart", (Object)Interval, (Object)DateValue.getJCOInstance(), (Object)DayOfWeek.getJCOInstance(), (Object)WeekOfYear.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DateTime DateSerial(int Year, int Month, int Day) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.TypeInitializationException, system.InvalidTimeZoneException, system.OverflowException, system.OutOfMemoryException, system.FormatException, system.ArrayTypeMismatchException {
        try {
            JCObject objDateSerial = (JCObject)classType.Invoke("DateSerial", Year, Month, Day);
            return new DateTime(objDateSerial);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DateTime TimeSerial(int Hour, int Minute, int Second) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            JCObject objTimeSerial = (JCObject)classType.Invoke("TimeSerial", Hour, Minute, Second);
            return new DateTime(objTimeSerial);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DateTime DateValue(java.lang.String StringDate) throws Throwable, system.ArgumentNullException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OverflowException, system.TypeInitializationException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.ArrayTypeMismatchException, system.InvalidCastException {
        try {
            JCObject objDateValue = (JCObject)classType.Invoke("DateValue", (Object)StringDate);
            return new DateTime(objDateValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DateTime TimeValue(java.lang.String StringTime) throws Throwable, system.ArgumentNullException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OverflowException, system.TypeInitializationException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.ArrayTypeMismatchException, system.InvalidCastException {
        try {
            JCObject objTimeValue = (JCObject)classType.Invoke("TimeValue", (Object)StringTime);
            return new DateTime(objTimeValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int Year(DateTime DateValue) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.TypeInitializationException {
        try {
            return (int)classType.Invoke("Year", (Object)DateValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int Month(DateTime DateValue) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.TypeInitializationException {
        try {
            return (int)classType.Invoke("Month", (Object)DateValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int Day(DateTime DateValue) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.TypeInitializationException {
        try {
            return (int)classType.Invoke("Day", (Object)DateValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int Hour(DateTime TimeValue) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.TypeInitializationException {
        try {
            return (int)classType.Invoke("Hour", (Object)TimeValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int Minute(DateTime TimeValue) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.TypeInitializationException {
        try {
            return (int)classType.Invoke("Minute", (Object)TimeValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int Second(DateTime TimeValue) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.TypeInitializationException {
        try {
            return (int)classType.Invoke("Second", (Object)TimeValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int Weekday(DateTime DateValue, FirstDayOfWeek DayOfWeek) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.TypeInitializationException, system.InvalidOperationException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            return (int)classType.Invoke("Weekday", (Object)DateValue.getJCOInstance(), (Object)DayOfWeek.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String MonthName(int Month, boolean Abbreviate) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.globalization.CultureNotFoundException, system.InvalidOperationException, system.TypeInitializationException {
        try {
            return (java.lang.String)classType.Invoke("MonthName", Month, Abbreviate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String WeekdayName(int Weekday, boolean Abbreviate, FirstDayOfWeek FirstDayOfWeekValue) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.globalization.CultureNotFoundException, system.TypeInitializationException, system.InvalidOperationException {
        try {
            return (java.lang.String)classType.Invoke("WeekdayName", Weekday, Abbreviate, (Object)FirstDayOfWeekValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public static DateTime getToday() throws Throwable {
        try {
            JCObject val = (JCObject)classType.Get("Today");
            return new DateTime(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setToday(DateTime Today) throws Throwable {
        try {
            classType.Set("Today", (Object)Today.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DateTime getNow() throws Throwable {
        try {
            JCObject val = (JCObject)classType.Get("Now");
            return new DateTime(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DateTime getTimeOfDay() throws Throwable {
        try {
            JCObject val = (JCObject)classType.Get("TimeOfDay");
            return new DateTime(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setTimeOfDay(DateTime TimeOfDay) throws Throwable {
        try {
            classType.Set("TimeOfDay", (Object)TimeOfDay.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String getTimeString() throws Throwable {
        try {
            return (java.lang.String)classType.Get("TimeString");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setTimeString(java.lang.String TimeString) throws Throwable {
        try {
            classType.Set("TimeString", (Object)TimeString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String getDateString() throws Throwable {
        try {
            return (java.lang.String)classType.Get("DateString");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setDateString(java.lang.String DateString) throws Throwable {
        try {
            classType.Set("DateString", (Object)DateString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static double getTimer() throws Throwable {
        try {
            return (double)classType.Get("Timer");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}