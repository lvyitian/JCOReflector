/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.servicemodel.security;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.identitymodel.configuration.SecurityTokenServiceConfiguration;
import system.servicemodel.description.ContractDescription;
import system.servicemodel.description.ServiceEndpoint;
import system.servicemodel.channels.BindingParameterCollection;
import system.servicemodel.dispatcher.ClientRuntime;
import system.servicemodel.dispatcher.DispatchRuntime;
import system.servicemodel.description.WsdlExporter;
import system.servicemodel.description.WsdlContractConversionContext;
import system.servicemodel.channels.Message;
import system.servicemodel.description.WsdlEndpointConversionContext;


/**
 * The base .NET class managing System.ServiceModel.Security.WSTrustServiceContract, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class WSTrustServiceContract extends NetObject  {
    public static final String assemblyFullName = "System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "System.ServiceModel";
    public static final String className = "System.ServiceModel.Security.WSTrustServiceContract";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WSTrustServiceContract(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static WSTrustServiceContract castFrom(IJCOBridgeReflected from) throws Throwable {
        return new WSTrustServiceContract(from.getJCOInstance());
    }

    // Constructors section
    
    
    public WSTrustServiceContract(SecurityTokenServiceConfiguration securityTokenServiceConfiguration) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)securityTokenServiceConfiguration.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public void AddBindingParameters(ContractDescription contractDescription, ServiceEndpoint endpoint, BindingParameterCollection bindingParameters) throws Throwable {
        try {
            classInstance.Invoke("AddBindingParameters", (Object)contractDescription.getJCOInstance(), (Object)endpoint.getJCOInstance(), (Object)bindingParameters.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ApplyClientBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, ClientRuntime clientRuntime) throws Throwable {
        try {
            classInstance.Invoke("ApplyClientBehavior", (Object)contractDescription.getJCOInstance(), (Object)endpoint.getJCOInstance(), (Object)clientRuntime.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ApplyDispatchBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, DispatchRuntime dispatchRuntime) throws Throwable {
        try {
            classInstance.Invoke("ApplyDispatchBehavior", (Object)contractDescription.getJCOInstance(), (Object)endpoint.getJCOInstance(), (Object)dispatchRuntime.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Validate(ContractDescription contractDescription, ServiceEndpoint endpoint) throws Throwable {
        try {
            classInstance.Invoke("Validate", (Object)contractDescription.getJCOInstance(), (Object)endpoint.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ExportContract(WsdlExporter exporter, WsdlContractConversionContext context) throws Throwable {
        try {
            classInstance.Invoke("ExportContract", (Object)exporter.getJCOInstance(), (Object)context.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message ProcessTrust13Cancel(Message message) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.security.cryptography.CryptographicException {
        try {
            JCObject objProcessTrust13Cancel = (JCObject)classInstance.Invoke("ProcessTrust13Cancel", (Object)message.getJCOInstance());
            return new Message(objProcessTrust13Cancel);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message ProcessTrust13Issue(Message message) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.security.cryptography.CryptographicException {
        try {
            JCObject objProcessTrust13Issue = (JCObject)classInstance.Invoke("ProcessTrust13Issue", (Object)message.getJCOInstance());
            return new Message(objProcessTrust13Issue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message ProcessTrust13Renew(Message message) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.security.cryptography.CryptographicException {
        try {
            JCObject objProcessTrust13Renew = (JCObject)classInstance.Invoke("ProcessTrust13Renew", (Object)message.getJCOInstance());
            return new Message(objProcessTrust13Renew);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message ProcessTrust13Validate(Message message) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.security.cryptography.CryptographicException {
        try {
            JCObject objProcessTrust13Validate = (JCObject)classInstance.Invoke("ProcessTrust13Validate", (Object)message.getJCOInstance());
            return new Message(objProcessTrust13Validate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message ProcessTrust13CancelResponse(Message message) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.security.cryptography.CryptographicException {
        try {
            JCObject objProcessTrust13CancelResponse = (JCObject)classInstance.Invoke("ProcessTrust13CancelResponse", (Object)message.getJCOInstance());
            return new Message(objProcessTrust13CancelResponse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message ProcessTrust13IssueResponse(Message message) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.security.cryptography.CryptographicException {
        try {
            JCObject objProcessTrust13IssueResponse = (JCObject)classInstance.Invoke("ProcessTrust13IssueResponse", (Object)message.getJCOInstance());
            return new Message(objProcessTrust13IssueResponse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message ProcessTrust13RenewResponse(Message message) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.security.cryptography.CryptographicException {
        try {
            JCObject objProcessTrust13RenewResponse = (JCObject)classInstance.Invoke("ProcessTrust13RenewResponse", (Object)message.getJCOInstance());
            return new Message(objProcessTrust13RenewResponse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message ProcessTrust13ValidateResponse(Message message) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.security.cryptography.CryptographicException {
        try {
            JCObject objProcessTrust13ValidateResponse = (JCObject)classInstance.Invoke("ProcessTrust13ValidateResponse", (Object)message.getJCOInstance());
            return new Message(objProcessTrust13ValidateResponse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message ProcessTrustFeb2005Cancel(Message message) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.security.cryptography.CryptographicException {
        try {
            JCObject objProcessTrustFeb2005Cancel = (JCObject)classInstance.Invoke("ProcessTrustFeb2005Cancel", (Object)message.getJCOInstance());
            return new Message(objProcessTrustFeb2005Cancel);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message ProcessTrustFeb2005Issue(Message message) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.security.cryptography.CryptographicException {
        try {
            JCObject objProcessTrustFeb2005Issue = (JCObject)classInstance.Invoke("ProcessTrustFeb2005Issue", (Object)message.getJCOInstance());
            return new Message(objProcessTrustFeb2005Issue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message ProcessTrustFeb2005Renew(Message message) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.security.cryptography.CryptographicException {
        try {
            JCObject objProcessTrustFeb2005Renew = (JCObject)classInstance.Invoke("ProcessTrustFeb2005Renew", (Object)message.getJCOInstance());
            return new Message(objProcessTrustFeb2005Renew);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message ProcessTrustFeb2005Validate(Message message) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.security.cryptography.CryptographicException {
        try {
            JCObject objProcessTrustFeb2005Validate = (JCObject)classInstance.Invoke("ProcessTrustFeb2005Validate", (Object)message.getJCOInstance());
            return new Message(objProcessTrustFeb2005Validate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message ProcessTrustFeb2005CancelResponse(Message message) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.security.cryptography.CryptographicException {
        try {
            JCObject objProcessTrustFeb2005CancelResponse = (JCObject)classInstance.Invoke("ProcessTrustFeb2005CancelResponse", (Object)message.getJCOInstance());
            return new Message(objProcessTrustFeb2005CancelResponse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message ProcessTrustFeb2005IssueResponse(Message message) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.security.cryptography.CryptographicException {
        try {
            JCObject objProcessTrustFeb2005IssueResponse = (JCObject)classInstance.Invoke("ProcessTrustFeb2005IssueResponse", (Object)message.getJCOInstance());
            return new Message(objProcessTrustFeb2005IssueResponse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message ProcessTrustFeb2005RenewResponse(Message message) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.security.cryptography.CryptographicException {
        try {
            JCObject objProcessTrustFeb2005RenewResponse = (JCObject)classInstance.Invoke("ProcessTrustFeb2005RenewResponse", (Object)message.getJCOInstance());
            return new Message(objProcessTrustFeb2005RenewResponse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message ProcessTrustFeb2005ValidateResponse(Message message) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.security.cryptography.CryptographicException {
        try {
            JCObject objProcessTrustFeb2005ValidateResponse = (JCObject)classInstance.Invoke("ProcessTrustFeb2005ValidateResponse", (Object)message.getJCOInstance());
            return new Message(objProcessTrustFeb2005ValidateResponse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext context) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.UriFormatException, system.xml.schema.XmlSchemaException, system.NullReferenceException, system.RankException, system.xml.XmlException {
        try {
            classInstance.Invoke("ExportEndpoint", (Object)exporter.getJCOInstance(), (Object)context.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public SecurityTokenServiceConfiguration getSecurityTokenServiceConfiguration() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SecurityTokenServiceConfiguration");
            return new SecurityTokenServiceConfiguration(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    

}