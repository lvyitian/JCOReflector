/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.messaging;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.messaging.MessageQueue;
import system.configuration.install.ComponentInstaller;
import system.runtime.remoting.ObjRef;
import system.Guid;
import system.messaging.EncryptionRequired;
import system.messaging.AccessControlList;
import system.configuration.install.UninstallAction;
import system.configuration.install.InstallContext;
import system.configuration.install.InstallerCollection;
import system.configuration.install.Installer;
import system.configuration.install.InstallEventHandler;
import system.EventHandler;


/**
 * The base .NET class managing System.Messaging.MessageQueueInstaller, System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class MessageQueueInstaller extends NetObject  {
    public static final String assemblyFullName = "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Messaging";
    public static final String className = "System.Messaging.MessageQueueInstaller";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MessageQueueInstaller(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static MessageQueueInstaller castFrom(IJCOBridgeReflected from) throws Throwable {
        return new MessageQueueInstaller(from.getJCOInstance());
    }

    // Constructors section
    
    
    public MessageQueueInstaller() throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MessageQueueInstaller(MessageQueue componentToCopy) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)componentToCopy.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public boolean IsEquivalentInstaller(ComponentInstaller otherInstaller) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("IsEquivalentInstaller", (Object)otherInstaller.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.runtime.remoting.RemotingException, system.ObjectDisposedException, system.InvalidOperationException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            JCObject objGetLifetimeService = (JCObject)classInstance.Invoke("GetLifetimeService");
            return new NetObject(objGetLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject InitializeLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.runtime.remoting.RemotingException, system.ObjectDisposedException, system.InvalidOperationException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            JCObject objInitializeLifetimeService = (JCObject)classInstance.Invoke("InitializeLifetimeService");
            return new NetObject(objInitializeLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ObjRef CreateObjRef(NetType requestedType) throws Throwable, system.runtime.remoting.RemotingException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        try {
            JCObject objCreateObjRef = (JCObject)classInstance.Invoke("CreateObjRef", (Object)requestedType.getJCOInstance());
            return new ObjRef(objCreateObjRef);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public boolean getAuthenticate() throws Throwable {
        try {
            return (boolean)classInstance.Get("Authenticate");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAuthenticate(boolean Authenticate) throws Throwable {
        try {
            classInstance.Set("Authenticate", Authenticate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public short getBasePriority() throws Throwable {
        try {
            return (short)classInstance.Get("BasePriority");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBasePriority(short BasePriority) throws Throwable {
        try {
            classInstance.Set("BasePriority", BasePriority);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Guid getCategory() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Category");
            return new Guid(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCategory(Guid Category) throws Throwable {
        try {
            classInstance.Set("Category", (Object)Category.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EncryptionRequired getEncryptionRequired() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("EncryptionRequired");
            return new EncryptionRequired(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEncryptionRequired(EncryptionRequired EncryptionRequired) throws Throwable {
        try {
            classInstance.Set("EncryptionRequired", (Object)EncryptionRequired.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getLabel() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Label");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLabel(java.lang.String Label) throws Throwable {
        try {
            classInstance.Set("Label", (Object)Label);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getMaximumJournalSize() throws Throwable {
        try {
            return (long)classInstance.Get("MaximumJournalSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaximumJournalSize(long MaximumJournalSize) throws Throwable {
        try {
            classInstance.Set("MaximumJournalSize", MaximumJournalSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getMaximumQueueSize() throws Throwable {
        try {
            return (long)classInstance.Get("MaximumQueueSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaximumQueueSize(long MaximumQueueSize) throws Throwable {
        try {
            classInstance.Set("MaximumQueueSize", MaximumQueueSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getMulticastAddress() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("MulticastAddress");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMulticastAddress(java.lang.String MulticastAddress) throws Throwable {
        try {
            classInstance.Set("MulticastAddress", (Object)MulticastAddress);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getPath() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Path");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPath(java.lang.String Path) throws Throwable {
        try {
            classInstance.Set("Path", (Object)Path);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AccessControlList getPermissions() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Permissions");
            return new AccessControlList(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPermissions(AccessControlList Permissions) throws Throwable {
        try {
            classInstance.Set("Permissions", (Object)Permissions.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTransactional() throws Throwable {
        try {
            return (boolean)classInstance.Get("Transactional");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTransactional(boolean Transactional) throws Throwable {
        try {
            classInstance.Set("Transactional", Transactional);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UninstallAction getUninstallAction() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("UninstallAction");
            return new UninstallAction(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUninstallAction(UninstallAction UninstallAction) throws Throwable {
        try {
            classInstance.Set("UninstallAction", (Object)UninstallAction.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseJournalQueue() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseJournalQueue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseJournalQueue(boolean UseJournalQueue) throws Throwable {
        try {
            classInstance.Set("UseJournalQueue", UseJournalQueue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InstallContext getContext() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Context");
            return new InstallContext(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setContext(InstallContext Context) throws Throwable {
        try {
            classInstance.Set("Context", (Object)Context.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getHelpText() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("HelpText");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InstallerCollection getInstallers() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Installers");
            return new InstallerCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Installer getParent() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Parent");
            return new Installer(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setParent(Installer Parent) throws Throwable {
        try {
            classInstance.Set("Parent", (Object)Parent.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
    public void addCommitted(InstallEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Committed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCommitted(InstallEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Committed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addAfterInstall(InstallEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("AfterInstall", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeAfterInstall(InstallEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("AfterInstall", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addAfterRollback(InstallEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("AfterRollback", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeAfterRollback(InstallEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("AfterRollback", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addAfterUninstall(InstallEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("AfterUninstall", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeAfterUninstall(InstallEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("AfterUninstall", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCommitting(InstallEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Committing", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCommitting(InstallEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Committing", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addBeforeInstall(InstallEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("BeforeInstall", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeBeforeInstall(InstallEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("BeforeInstall", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addBeforeRollback(InstallEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("BeforeRollback", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeBeforeRollback(InstallEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("BeforeRollback", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addBeforeUninstall(InstallEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("BeforeUninstall", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeBeforeUninstall(InstallEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("BeforeUninstall", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


}