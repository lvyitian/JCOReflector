/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.globalization;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.globalization.DateTimeFormatInfo;
import system.DayOfWeek;
import system.globalization.Calendar;
import system.globalization.CalendarWeekRule;


/**
 * The base .NET class managing System.Globalization.DateTimeFormatInfo, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class DateTimeFormatInfo extends NetObject  {
    public static final String assemblyFullName = "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "mscorlib";
    public static final String className = "System.Globalization.DateTimeFormatInfo";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DateTimeFormatInfo(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static DateTimeFormatInfo castFrom(IJCOBridgeReflected from) throws Throwable {
        return new DateTimeFormatInfo(from.getJCOInstance());
    }

    // Constructors section
    
    
    public DateTimeFormatInfo() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.InvalidOperationException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public java.lang.String[] GetAllDateTimePatterns(char format) throws Throwable, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.ArgumentNullException, system.ArgumentException, system.IndexOutOfRangeException {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("GetAllDateTimePatterns", format);
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
            for(int indexGetAllDateTimePatterns = 0; indexGetAllDateTimePatterns < resultingArrayList.size(); indexGetAllDateTimePatterns++ ) {
				resultingArray[indexGetAllDateTimePatterns] = (java.lang.String)resultingArrayList.get(indexGetAllDateTimePatterns);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetFormat(NetType formatType) throws Throwable {
        try {
            JCObject objGetFormat = (JCObject)classInstance.Invoke("GetFormat", (Object)formatType.getJCOInstance());
            return new NetObject(objGetFormat);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject Clone() throws Throwable {
        try {
            JCObject objClone = (JCObject)classInstance.Invoke("Clone");
            return new NetObject(objClone);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int GetEra(java.lang.String eraName) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.ArgumentException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.InvalidOperationException {
        try {
            return (int)classInstance.Invoke("GetEra", (Object)eraName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetEraName(int era) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.ArgumentException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.InvalidOperationException {
        try {
            return (java.lang.String)classInstance.Invoke("GetEraName", era);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetAbbreviatedEraName(int era) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException {
        try {
            return (java.lang.String)classInstance.Invoke("GetAbbreviatedEraName", era);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetAbbreviatedDayName(DayOfWeek dayofweek) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        try {
            return (java.lang.String)classInstance.Invoke("GetAbbreviatedDayName", (Object)dayofweek.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetShortestDayName(DayOfWeek dayOfWeek) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        try {
            return (java.lang.String)classInstance.Invoke("GetShortestDayName", (Object)dayOfWeek.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] GetAllDateTimePatterns() throws Throwable, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentNullException, system.IndexOutOfRangeException {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("GetAllDateTimePatterns");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
            for(int indexGetAllDateTimePatterns = 0; indexGetAllDateTimePatterns < resultingArrayList.size(); indexGetAllDateTimePatterns++ ) {
				resultingArray[indexGetAllDateTimePatterns] = (java.lang.String)resultingArrayList.get(indexGetAllDateTimePatterns);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetDayName(DayOfWeek dayofweek) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        try {
            return (java.lang.String)classInstance.Invoke("GetDayName", (Object)dayofweek.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetAbbreviatedMonthName(int month) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        try {
            return (java.lang.String)classInstance.Invoke("GetAbbreviatedMonthName", month);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetMonthName(int month) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        try {
            return (java.lang.String)classInstance.Invoke("GetMonthName", month);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DateTimeFormatInfo ReadOnly(DateTimeFormatInfo dtfi) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objReadOnly = (JCObject)classType.Invoke("ReadOnly", (Object)dtfi.getJCOInstance());
            return new DateTimeFormatInfo(objReadOnly);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetAllDateTimePatterns(java.lang.String[] patterns, char format) throws Throwable, system.InvalidOperationException, system.ArgumentNullException, system.ArgumentException {
        try {
            classInstance.Invoke("SetAllDateTimePatterns", (Object)patterns, format);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public java.lang.String getAMDesignator() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("AMDesignator");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAMDesignator(java.lang.String AMDesignator) throws Throwable {
        try {
            classInstance.Set("AMDesignator", (Object)AMDesignator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Calendar getCalendar() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Calendar");
            return new Calendar(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCalendar(Calendar Calendar) throws Throwable {
        try {
            classInstance.Set("Calendar", (Object)Calendar.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDateSeparator() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("DateSeparator");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDateSeparator(java.lang.String DateSeparator) throws Throwable {
        try {
            classInstance.Set("DateSeparator", (Object)DateSeparator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DayOfWeek getFirstDayOfWeek() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("FirstDayOfWeek");
            return new DayOfWeek(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFirstDayOfWeek(DayOfWeek FirstDayOfWeek) throws Throwable {
        try {
            classInstance.Set("FirstDayOfWeek", (Object)FirstDayOfWeek.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CalendarWeekRule getCalendarWeekRule() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CalendarWeekRule");
            return new CalendarWeekRule(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCalendarWeekRule(CalendarWeekRule CalendarWeekRule) throws Throwable {
        try {
            classInstance.Set("CalendarWeekRule", (Object)CalendarWeekRule.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getFullDateTimePattern() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("FullDateTimePattern");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFullDateTimePattern(java.lang.String FullDateTimePattern) throws Throwable {
        try {
            classInstance.Set("FullDateTimePattern", (Object)FullDateTimePattern);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getLongDatePattern() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("LongDatePattern");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLongDatePattern(java.lang.String LongDatePattern) throws Throwable {
        try {
            classInstance.Set("LongDatePattern", (Object)LongDatePattern);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getLongTimePattern() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("LongTimePattern");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLongTimePattern(java.lang.String LongTimePattern) throws Throwable {
        try {
            classInstance.Set("LongTimePattern", (Object)LongTimePattern);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getMonthDayPattern() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("MonthDayPattern");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMonthDayPattern(java.lang.String MonthDayPattern) throws Throwable {
        try {
            classInstance.Set("MonthDayPattern", (Object)MonthDayPattern);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getPMDesignator() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("PMDesignator");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPMDesignator(java.lang.String PMDesignator) throws Throwable {
        try {
            classInstance.Set("PMDesignator", (Object)PMDesignator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getRFC1123Pattern() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("RFC1123Pattern");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getShortDatePattern() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ShortDatePattern");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setShortDatePattern(java.lang.String ShortDatePattern) throws Throwable {
        try {
            classInstance.Set("ShortDatePattern", (Object)ShortDatePattern);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getShortTimePattern() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ShortTimePattern");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setShortTimePattern(java.lang.String ShortTimePattern) throws Throwable {
        try {
            classInstance.Set("ShortTimePattern", (Object)ShortTimePattern);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSortableDateTimePattern() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("SortableDateTimePattern");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTimeSeparator() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TimeSeparator");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTimeSeparator(java.lang.String TimeSeparator) throws Throwable {
        try {
            classInstance.Set("TimeSeparator", (Object)TimeSeparator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getUniversalSortableDateTimePattern() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("UniversalSortableDateTimePattern");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getYearMonthPattern() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("YearMonthPattern");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setYearMonthPattern(java.lang.String YearMonthPattern) throws Throwable {
        try {
            classInstance.Set("YearMonthPattern", (Object)YearMonthPattern);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getAbbreviatedDayNames() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("AbbreviatedDayNames");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexAbbreviatedDayNames = 0; indexAbbreviatedDayNames < resultingArrayList.size(); indexAbbreviatedDayNames++ ) {
				resultingArray[indexAbbreviatedDayNames] = (java.lang.String)resultingArrayList.get(indexAbbreviatedDayNames);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAbbreviatedDayNames(java.lang.String[] AbbreviatedDayNames) throws Throwable {
        try {
            classInstance.Set("AbbreviatedDayNames", (Object)AbbreviatedDayNames);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getShortestDayNames() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("ShortestDayNames");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexShortestDayNames = 0; indexShortestDayNames < resultingArrayList.size(); indexShortestDayNames++ ) {
				resultingArray[indexShortestDayNames] = (java.lang.String)resultingArrayList.get(indexShortestDayNames);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setShortestDayNames(java.lang.String[] ShortestDayNames) throws Throwable {
        try {
            classInstance.Set("ShortestDayNames", (Object)ShortestDayNames);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getDayNames() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("DayNames");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexDayNames = 0; indexDayNames < resultingArrayList.size(); indexDayNames++ ) {
				resultingArray[indexDayNames] = (java.lang.String)resultingArrayList.get(indexDayNames);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDayNames(java.lang.String[] DayNames) throws Throwable {
        try {
            classInstance.Set("DayNames", (Object)DayNames);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getAbbreviatedMonthNames() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("AbbreviatedMonthNames");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexAbbreviatedMonthNames = 0; indexAbbreviatedMonthNames < resultingArrayList.size(); indexAbbreviatedMonthNames++ ) {
				resultingArray[indexAbbreviatedMonthNames] = (java.lang.String)resultingArrayList.get(indexAbbreviatedMonthNames);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAbbreviatedMonthNames(java.lang.String[] AbbreviatedMonthNames) throws Throwable {
        try {
            classInstance.Set("AbbreviatedMonthNames", (Object)AbbreviatedMonthNames);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getMonthNames() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("MonthNames");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexMonthNames = 0; indexMonthNames < resultingArrayList.size(); indexMonthNames++ ) {
				resultingArray[indexMonthNames] = (java.lang.String)resultingArrayList.get(indexMonthNames);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMonthNames(java.lang.String[] MonthNames) throws Throwable {
        try {
            classInstance.Set("MonthNames", (Object)MonthNames);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsReadOnly() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsReadOnly");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getNativeCalendarName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("NativeCalendarName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getAbbreviatedMonthGenitiveNames() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("AbbreviatedMonthGenitiveNames");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexAbbreviatedMonthGenitiveNames = 0; indexAbbreviatedMonthGenitiveNames < resultingArrayList.size(); indexAbbreviatedMonthGenitiveNames++ ) {
				resultingArray[indexAbbreviatedMonthGenitiveNames] = (java.lang.String)resultingArrayList.get(indexAbbreviatedMonthGenitiveNames);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAbbreviatedMonthGenitiveNames(java.lang.String[] AbbreviatedMonthGenitiveNames) throws Throwable {
        try {
            classInstance.Set("AbbreviatedMonthGenitiveNames", (Object)AbbreviatedMonthGenitiveNames);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getMonthGenitiveNames() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("MonthGenitiveNames");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexMonthGenitiveNames = 0; indexMonthGenitiveNames < resultingArrayList.size(); indexMonthGenitiveNames++ ) {
				resultingArray[indexMonthGenitiveNames] = (java.lang.String)resultingArrayList.get(indexMonthGenitiveNames);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMonthGenitiveNames(java.lang.String[] MonthGenitiveNames) throws Throwable {
        try {
            classInstance.Set("MonthGenitiveNames", (Object)MonthGenitiveNames);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DateTimeFormatInfo getInvariantInfo() throws Throwable {
        try {
            JCObject val = (JCObject)classType.Get("InvariantInfo");
            return new DateTimeFormatInfo(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DateTimeFormatInfo getCurrentInfo() throws Throwable {
        try {
            JCObject val = (JCObject)classType.Get("CurrentInfo");
            return new DateTimeFormatInfo(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}