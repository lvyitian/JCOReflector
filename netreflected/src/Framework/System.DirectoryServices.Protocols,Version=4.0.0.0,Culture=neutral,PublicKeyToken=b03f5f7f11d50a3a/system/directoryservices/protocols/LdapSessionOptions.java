/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.directoryservices.protocols;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.directoryservices.protocols.DirectoryControlCollection;
import system.directoryservices.protocols.ReferralChasingOptions;
import system.directoryservices.protocols.LocatorFlags;
import system.TimeSpan;
import system.directoryservices.protocols.SecurityPackageContextConnectionInformation;
import system.directoryservices.protocols.ReferralCallback;
import system.directoryservices.protocols.VerifyServerCertificateCallback;


/**
 * The base .NET class managing System.DirectoryServices.Protocols.LdapSessionOptions, System.DirectoryServices.Protocols, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class LdapSessionOptions extends NetObject  {
    public static final String assemblyFullName = "System.DirectoryServices.Protocols, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.DirectoryServices.Protocols";
    public static final String className = "System.DirectoryServices.Protocols.LdapSessionOptions";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LdapSessionOptions(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static LdapSessionOptions castFrom(IJCOBridgeReflected from) throws Throwable {
        return new LdapSessionOptions(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public void FastConcurrentBind() throws Throwable, system.ObjectDisposedException, system.ArgumentNullException, system.threading.AbandonedMutexException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.PlatformNotSupportedException, system.directoryservices.protocols.DirectoryOperationException, system.directoryservices.protocols.LdapException {
        try {
            classInstance.Invoke("FastConcurrentBind");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void StopTransportLayerSecurity() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.PlatformNotSupportedException, system.directoryservices.protocols.TlsOperationException {
        try {
            classInstance.Invoke("StopTransportLayerSecurity");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void StartTransportLayerSecurity(DirectoryControlCollection controls) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.PlatformNotSupportedException, system.OutOfMemoryException, system.AccessViolationException, system.FormatException, system.security.SecurityException, system.MemberAccessException, system.IndexOutOfRangeException, system.NullReferenceException, system.configuration.ConfigurationException, system.UriFormatException, system.directoryservices.protocols.TlsOperationException, system.directoryservices.protocols.LdapException {
        try {
            classInstance.Invoke("StartTransportLayerSecurity", (Object)controls.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public ReferralChasingOptions getReferralChasing() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ReferralChasing");
            return new ReferralChasingOptions(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReferralChasing(ReferralChasingOptions ReferralChasing) throws Throwable {
        try {
            classInstance.Set("ReferralChasing", (Object)ReferralChasing.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSecureSocketLayer() throws Throwable {
        try {
            return (boolean)classInstance.Get("SecureSocketLayer");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSecureSocketLayer(boolean SecureSocketLayer) throws Throwable {
        try {
            classInstance.Set("SecureSocketLayer", SecureSocketLayer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getReferralHopLimit() throws Throwable {
        try {
            return (int)classInstance.Get("ReferralHopLimit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReferralHopLimit(int ReferralHopLimit) throws Throwable {
        try {
            classInstance.Set("ReferralHopLimit", ReferralHopLimit);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getProtocolVersion() throws Throwable {
        try {
            return (int)classInstance.Get("ProtocolVersion");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setProtocolVersion(int ProtocolVersion) throws Throwable {
        try {
            classInstance.Set("ProtocolVersion", ProtocolVersion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getHostName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("HostName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHostName(java.lang.String HostName) throws Throwable {
        try {
            classInstance.Set("HostName", (Object)HostName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDomainName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("DomainName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDomainName(java.lang.String DomainName) throws Throwable {
        try {
            classInstance.Set("DomainName", (Object)DomainName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LocatorFlags getLocatorFlag() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LocatorFlag");
            return new LocatorFlags(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLocatorFlag(LocatorFlags LocatorFlag) throws Throwable {
        try {
            classInstance.Set("LocatorFlag", (Object)LocatorFlag.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getHostReachable() throws Throwable {
        try {
            return (boolean)classInstance.Get("HostReachable");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getPingKeepAliveTimeout() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PingKeepAliveTimeout");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPingKeepAliveTimeout(TimeSpan PingKeepAliveTimeout) throws Throwable {
        try {
            classInstance.Set("PingKeepAliveTimeout", (Object)PingKeepAliveTimeout.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getPingLimit() throws Throwable {
        try {
            return (int)classInstance.Get("PingLimit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPingLimit(int PingLimit) throws Throwable {
        try {
            classInstance.Set("PingLimit", PingLimit);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getPingWaitTimeout() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PingWaitTimeout");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPingWaitTimeout(TimeSpan PingWaitTimeout) throws Throwable {
        try {
            classInstance.Set("PingWaitTimeout", (Object)PingWaitTimeout.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAutoReconnect() throws Throwable {
        try {
            return (boolean)classInstance.Get("AutoReconnect");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutoReconnect(boolean AutoReconnect) throws Throwable {
        try {
            classInstance.Set("AutoReconnect", AutoReconnect);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getSspiFlag() throws Throwable {
        try {
            return (int)classInstance.Get("SspiFlag");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSspiFlag(int SspiFlag) throws Throwable {
        try {
            classInstance.Set("SspiFlag", SspiFlag);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SecurityPackageContextConnectionInformation getSslInformation() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SslInformation");
            return new SecurityPackageContextConnectionInformation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getSecurityContext() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SecurityContext");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSigning() throws Throwable {
        try {
            return (boolean)classInstance.Get("Signing");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSigning(boolean Signing) throws Throwable {
        try {
            classInstance.Set("Signing", Signing);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSealing() throws Throwable {
        try {
            return (boolean)classInstance.Get("Sealing");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSealing(boolean Sealing) throws Throwable {
        try {
            classInstance.Set("Sealing", Sealing);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSaslMethod() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("SaslMethod");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSaslMethod(java.lang.String SaslMethod) throws Throwable {
        try {
            classInstance.Set("SaslMethod", (Object)SaslMethod);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRootDseCache() throws Throwable {
        try {
            return (boolean)classInstance.Get("RootDseCache");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRootDseCache(boolean RootDseCache) throws Throwable {
        try {
            classInstance.Set("RootDseCache", RootDseCache);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTcpKeepAlive() throws Throwable {
        try {
            return (boolean)classInstance.Get("TcpKeepAlive");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTcpKeepAlive(boolean TcpKeepAlive) throws Throwable {
        try {
            classInstance.Set("TcpKeepAlive", TcpKeepAlive);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getSendTimeout() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SendTimeout");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSendTimeout(TimeSpan SendTimeout) throws Throwable {
        try {
            classInstance.Set("SendTimeout", (Object)SendTimeout.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ReferralCallback getReferralCallback() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ReferralCallback");
            return new ReferralCallback(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReferralCallback(ReferralCallback ReferralCallback) throws Throwable {
        try {
            classInstance.Set("ReferralCallback", (Object)ReferralCallback.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public VerifyServerCertificateCallback getVerifyServerCertificate() throws Throwable {
        try {
            return (VerifyServerCertificateCallback)classInstance.Get("VerifyServerCertificate");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setVerifyServerCertificate(VerifyServerCertificateCallback VerifyServerCertificate) throws Throwable {
        try {
            classInstance.Set("VerifyServerCertificate", VerifyServerCertificate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}