/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.web.configuration;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.TimeSpan;
import system.web.configuration.ProcessModelLogLevel;
import system.web.configuration.ProcessModelComAuthenticationLevel;
import system.web.configuration.ProcessModelComImpersonationLevel;
import system.configuration.SectionInformation;
import system.configuration.ConfigurationLockCollection;
import system.configuration.ElementInformation;
import system.configuration.Configuration;


/**
 * The base .NET class managing System.Web.Configuration.ProcessModelSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class ProcessModelSection extends NetObject  {
    public static final String assemblyFullName = "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Web";
    public static final String className = "System.Web.Configuration.ProcessModelSection";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ProcessModelSection(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static ProcessModelSection castFrom(IJCOBridgeReflected from) throws Throwable {
        return new ProcessModelSection(from.getJCOInstance());
    }

    // Constructors section
    
    
    public ProcessModelSection() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.collections.generic.KeyNotFoundException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public boolean IsReadOnly() throws Throwable {
        try {
            return (boolean)classInstance.Invoke("IsReadOnly");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public boolean getEnable() throws Throwable {
        try {
            return (boolean)classInstance.Get("Enable");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnable(boolean Enable) throws Throwable {
        try {
            classInstance.Set("Enable", Enable);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getTimeout() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Timeout");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTimeout(TimeSpan Timeout) throws Throwable {
        try {
            classInstance.Set("Timeout", (Object)Timeout.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getIdleTimeout() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("IdleTimeout");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIdleTimeout(TimeSpan IdleTimeout) throws Throwable {
        try {
            classInstance.Set("IdleTimeout", (Object)IdleTimeout.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getShutdownTimeout() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ShutdownTimeout");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setShutdownTimeout(TimeSpan ShutdownTimeout) throws Throwable {
        try {
            classInstance.Set("ShutdownTimeout", (Object)ShutdownTimeout.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getRequestLimit() throws Throwable {
        try {
            return (int)classInstance.Get("RequestLimit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRequestLimit(int RequestLimit) throws Throwable {
        try {
            classInstance.Set("RequestLimit", RequestLimit);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getRequestQueueLimit() throws Throwable {
        try {
            return (int)classInstance.Get("RequestQueueLimit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRequestQueueLimit(int RequestQueueLimit) throws Throwable {
        try {
            classInstance.Set("RequestQueueLimit", RequestQueueLimit);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getRestartQueueLimit() throws Throwable {
        try {
            return (int)classInstance.Get("RestartQueueLimit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRestartQueueLimit(int RestartQueueLimit) throws Throwable {
        try {
            classInstance.Set("RestartQueueLimit", RestartQueueLimit);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMemoryLimit() throws Throwable {
        try {
            return (int)classInstance.Get("MemoryLimit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMemoryLimit(int MemoryLimit) throws Throwable {
        try {
            classInstance.Set("MemoryLimit", MemoryLimit);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getWebGarden() throws Throwable {
        try {
            return (boolean)classInstance.Get("WebGarden");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setWebGarden(boolean WebGarden) throws Throwable {
        try {
            classInstance.Set("WebGarden", WebGarden);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getCpuMask() throws Throwable {
        try {
            return (int)classInstance.Get("CpuMask");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCpuMask(int CpuMask) throws Throwable {
        try {
            classInstance.Set("CpuMask", CpuMask);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getUserName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("UserName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUserName(java.lang.String UserName) throws Throwable {
        try {
            classInstance.Set("UserName", (Object)UserName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getPassword() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Password");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPassword(java.lang.String Password) throws Throwable {
        try {
            classInstance.Set("Password", (Object)Password);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ProcessModelLogLevel getLogLevel() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LogLevel");
            return new ProcessModelLogLevel(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLogLevel(ProcessModelLogLevel LogLevel) throws Throwable {
        try {
            classInstance.Set("LogLevel", (Object)LogLevel.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getClientConnectedCheck() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ClientConnectedCheck");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setClientConnectedCheck(TimeSpan ClientConnectedCheck) throws Throwable {
        try {
            classInstance.Set("ClientConnectedCheck", (Object)ClientConnectedCheck.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ProcessModelComAuthenticationLevel getComAuthenticationLevel() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ComAuthenticationLevel");
            return new ProcessModelComAuthenticationLevel(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setComAuthenticationLevel(ProcessModelComAuthenticationLevel ComAuthenticationLevel) throws Throwable {
        try {
            classInstance.Set("ComAuthenticationLevel", (Object)ComAuthenticationLevel.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ProcessModelComImpersonationLevel getComImpersonationLevel() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ComImpersonationLevel");
            return new ProcessModelComImpersonationLevel(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setComImpersonationLevel(ProcessModelComImpersonationLevel ComImpersonationLevel) throws Throwable {
        try {
            classInstance.Set("ComImpersonationLevel", (Object)ComImpersonationLevel.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getResponseDeadlockInterval() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ResponseDeadlockInterval");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setResponseDeadlockInterval(TimeSpan ResponseDeadlockInterval) throws Throwable {
        try {
            classInstance.Set("ResponseDeadlockInterval", (Object)ResponseDeadlockInterval.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getResponseRestartDeadlockInterval() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ResponseRestartDeadlockInterval");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setResponseRestartDeadlockInterval(TimeSpan ResponseRestartDeadlockInterval) throws Throwable {
        try {
            classInstance.Set("ResponseRestartDeadlockInterval", (Object)ResponseRestartDeadlockInterval.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAutoConfig() throws Throwable {
        try {
            return (boolean)classInstance.Get("AutoConfig");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutoConfig(boolean AutoConfig) throws Throwable {
        try {
            classInstance.Set("AutoConfig", AutoConfig);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMaxWorkerThreads() throws Throwable {
        try {
            return (int)classInstance.Get("MaxWorkerThreads");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaxWorkerThreads(int MaxWorkerThreads) throws Throwable {
        try {
            classInstance.Set("MaxWorkerThreads", MaxWorkerThreads);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMaxIOThreads() throws Throwable {
        try {
            return (int)classInstance.Get("MaxIOThreads");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaxIOThreads(int MaxIOThreads) throws Throwable {
        try {
            classInstance.Set("MaxIOThreads", MaxIOThreads);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMinWorkerThreads() throws Throwable {
        try {
            return (int)classInstance.Get("MinWorkerThreads");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMinWorkerThreads(int MinWorkerThreads) throws Throwable {
        try {
            classInstance.Set("MinWorkerThreads", MinWorkerThreads);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMinIOThreads() throws Throwable {
        try {
            return (int)classInstance.Get("MinIOThreads");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMinIOThreads(int MinIOThreads) throws Throwable {
        try {
            classInstance.Set("MinIOThreads", MinIOThreads);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getServerErrorMessageFile() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ServerErrorMessageFile");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setServerErrorMessageFile(java.lang.String ServerErrorMessageFile) throws Throwable {
        try {
            classInstance.Set("ServerErrorMessageFile", (Object)ServerErrorMessageFile);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getPingFrequency() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PingFrequency");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPingFrequency(TimeSpan PingFrequency) throws Throwable {
        try {
            classInstance.Set("PingFrequency", (Object)PingFrequency.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getPingTimeout() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PingTimeout");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPingTimeout(TimeSpan PingTimeout) throws Throwable {
        try {
            classInstance.Set("PingTimeout", (Object)PingTimeout.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMaxAppDomains() throws Throwable {
        try {
            return (int)classInstance.Get("MaxAppDomains");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaxAppDomains(int MaxAppDomains) throws Throwable {
        try {
            classInstance.Set("MaxAppDomains", MaxAppDomains);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SectionInformation getSectionInformation() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SectionInformation");
            return new SectionInformation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConfigurationLockCollection getLockAttributes() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LockAttributes");
            return new ConfigurationLockCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConfigurationLockCollection getLockAllAttributesExcept() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LockAllAttributesExcept");
            return new ConfigurationLockCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConfigurationLockCollection getLockElements() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LockElements");
            return new ConfigurationLockCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConfigurationLockCollection getLockAllElementsExcept() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LockAllElementsExcept");
            return new ConfigurationLockCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getLockItem() throws Throwable {
        try {
            return (boolean)classInstance.Get("LockItem");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLockItem(boolean LockItem) throws Throwable {
        try {
            classInstance.Set("LockItem", LockItem);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ElementInformation getElementInformation() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ElementInformation");
            return new ElementInformation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Configuration getCurrentConfiguration() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CurrentConfiguration");
            return new Configuration(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}