/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.servicemodel;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.servicemodel.dispatcher.EndpointDispatcher;
import system.servicemodel.ServiceHostBase;
import system.servicemodel.channels.MessageHeaders;
import system.servicemodel.channels.MessageProperties;
import system.servicemodel.channels.MessageVersion;
import system.servicemodel.InstanceContext;
import system.servicemodel.channels.RequestContext;
import system.servicemodel.ServiceSecurityContext;
import system.security.claims.ClaimsPrincipal;
import system.servicemodel.OperationContext;
import system.EventHandler;


/**
 * The base .NET class managing System.ServiceModel.OperationContext, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class OperationContext extends NetObject  {
    public static final String assemblyFullName = "System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "System.ServiceModel";
    public static final String className = "System.ServiceModel.OperationContext";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OperationContext(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static OperationContext castFrom(IJCOBridgeReflected from) throws Throwable {
        return new OperationContext(from.getJCOInstance());
    }

    // Constructors section
    
    

    
    // Methods section
    
    
    public void SetTransactionComplete() throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.OverflowException, system.OutOfMemoryException, system.configuration.ConfigurationErrorsException, system.transactions.TransactionException {
        try {
            classInstance.Invoke("SetTransactionComplete");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public EndpointDispatcher getEndpointDispatcher() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("EndpointDispatcher");
            return new EndpointDispatcher(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEndpointDispatcher(EndpointDispatcher EndpointDispatcher) throws Throwable {
        try {
            classInstance.Set("EndpointDispatcher", (Object)EndpointDispatcher.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsUserContext() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsUserContext");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getHasSupportingTokens() throws Throwable {
        try {
            return (boolean)classInstance.Get("HasSupportingTokens");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ServiceHostBase getHost() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Host");
            return new ServiceHostBase(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MessageHeaders getOutgoingMessageHeaders() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("OutgoingMessageHeaders");
            return new MessageHeaders(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MessageProperties getOutgoingMessageProperties() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("OutgoingMessageProperties");
            return new MessageProperties(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MessageHeaders getIncomingMessageHeaders() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("IncomingMessageHeaders");
            return new MessageHeaders(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MessageProperties getIncomingMessageProperties() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("IncomingMessageProperties");
            return new MessageProperties(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MessageVersion getIncomingMessageVersion() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("IncomingMessageVersion");
            return new MessageVersion(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InstanceContext getInstanceContext() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("InstanceContext");
            return new InstanceContext(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RequestContext getRequestContext() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RequestContext");
            return new RequestContext(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRequestContext(RequestContext RequestContext) throws Throwable {
        try {
            classInstance.Set("RequestContext", (Object)RequestContext.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ServiceSecurityContext getServiceSecurityContext() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ServiceSecurityContext");
            return new ServiceSecurityContext(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSessionId() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("SessionId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ClaimsPrincipal getClaimsPrincipal() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ClaimsPrincipal");
            return new ClaimsPrincipal(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setClaimsPrincipal(ClaimsPrincipal ClaimsPrincipal) throws Throwable {
        try {
            classInstance.Set("ClaimsPrincipal", (Object)ClaimsPrincipal.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static OperationContext getCurrent() throws Throwable {
        try {
            JCObject val = (JCObject)classType.Get("Current");
            return new OperationContext(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setCurrent(OperationContext Current) throws Throwable {
        try {
            classType.Set("Current", (Object)Current.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
    public void addOperationCompleted(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("OperationCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeOperationCompleted(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("OperationCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


}