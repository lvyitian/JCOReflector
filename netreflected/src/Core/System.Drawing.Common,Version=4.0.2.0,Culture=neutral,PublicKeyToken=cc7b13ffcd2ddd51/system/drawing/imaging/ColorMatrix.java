/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.drawing.imaging;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.Single;


/**
 * The base .NET class managing System.Drawing.Imaging.ColorMatrix, System.Drawing.Common, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51. Extends {@link NetObject}.
 */
public class ColorMatrix extends NetObject  {
    public static final String assemblyFullName = "System.Drawing.Common, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51";
	public static final String assemblyShortName = "System.Drawing.Common";
    public static final String className = "System.Drawing.Imaging.ColorMatrix";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ColorMatrix(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static ColorMatrix castFrom(IJCOBridgeReflected from) throws Throwable {
        return new ColorMatrix(from.getJCOInstance());
    }

    // Constructors section
    
    
    public ColorMatrix() throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    

    
    // Properties section
    
    
    public Single getMatrix00() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix00");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix00(Single Matrix00) throws Throwable {
        try {
            classInstance.Set("Matrix00", (Object)Matrix00.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix01() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix01");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix01(Single Matrix01) throws Throwable {
        try {
            classInstance.Set("Matrix01", (Object)Matrix01.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix02() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix02");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix02(Single Matrix02) throws Throwable {
        try {
            classInstance.Set("Matrix02", (Object)Matrix02.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix03() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix03");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix03(Single Matrix03) throws Throwable {
        try {
            classInstance.Set("Matrix03", (Object)Matrix03.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix04() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix04");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix04(Single Matrix04) throws Throwable {
        try {
            classInstance.Set("Matrix04", (Object)Matrix04.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix10() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix10");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix10(Single Matrix10) throws Throwable {
        try {
            classInstance.Set("Matrix10", (Object)Matrix10.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix11() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix11");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix11(Single Matrix11) throws Throwable {
        try {
            classInstance.Set("Matrix11", (Object)Matrix11.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix12() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix12");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix12(Single Matrix12) throws Throwable {
        try {
            classInstance.Set("Matrix12", (Object)Matrix12.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix13() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix13");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix13(Single Matrix13) throws Throwable {
        try {
            classInstance.Set("Matrix13", (Object)Matrix13.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix14() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix14");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix14(Single Matrix14) throws Throwable {
        try {
            classInstance.Set("Matrix14", (Object)Matrix14.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix20() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix20");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix20(Single Matrix20) throws Throwable {
        try {
            classInstance.Set("Matrix20", (Object)Matrix20.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix21() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix21");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix21(Single Matrix21) throws Throwable {
        try {
            classInstance.Set("Matrix21", (Object)Matrix21.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix22() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix22");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix22(Single Matrix22) throws Throwable {
        try {
            classInstance.Set("Matrix22", (Object)Matrix22.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix23() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix23");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix23(Single Matrix23) throws Throwable {
        try {
            classInstance.Set("Matrix23", (Object)Matrix23.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix24() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix24");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix24(Single Matrix24) throws Throwable {
        try {
            classInstance.Set("Matrix24", (Object)Matrix24.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix30() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix30");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix30(Single Matrix30) throws Throwable {
        try {
            classInstance.Set("Matrix30", (Object)Matrix30.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix31() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix31");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix31(Single Matrix31) throws Throwable {
        try {
            classInstance.Set("Matrix31", (Object)Matrix31.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix32() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix32");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix32(Single Matrix32) throws Throwable {
        try {
            classInstance.Set("Matrix32", (Object)Matrix32.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix33() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix33");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix33(Single Matrix33) throws Throwable {
        try {
            classInstance.Set("Matrix33", (Object)Matrix33.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix34() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix34");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix34(Single Matrix34) throws Throwable {
        try {
            classInstance.Set("Matrix34", (Object)Matrix34.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix40() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix40");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix40(Single Matrix40) throws Throwable {
        try {
            classInstance.Set("Matrix40", (Object)Matrix40.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix41() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix41");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix41(Single Matrix41) throws Throwable {
        try {
            classInstance.Set("Matrix41", (Object)Matrix41.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix42() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix42");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix42(Single Matrix42) throws Throwable {
        try {
            classInstance.Set("Matrix42", (Object)Matrix42.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix43() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix43");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix43(Single Matrix43) throws Throwable {
        try {
            classInstance.Set("Matrix43", (Object)Matrix43.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getMatrix44() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Matrix44");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatrix44(Single Matrix44) throws Throwable {
        try {
            classInstance.Set("Matrix44", (Object)Matrix44.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}