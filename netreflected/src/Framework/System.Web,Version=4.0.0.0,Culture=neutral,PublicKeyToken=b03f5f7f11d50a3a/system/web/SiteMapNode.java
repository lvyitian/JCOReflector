/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.web;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.web.SiteMapProvider;
import system.web.SiteMapNode;
import system.web.SiteMapNodeCollection;
import system.web.ui.webcontrols.SiteMapDataSourceView;
import system.web.ui.webcontrols.SiteMapDataSource;
import system.web.ui.webcontrols.SiteMapHierarchicalDataSourceView;
import system.web.HttpContext;


/**
 * The base .NET class managing System.Web.SiteMapNode, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class SiteMapNode extends NetObject  {
    public static final String assemblyFullName = "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Web";
    public static final String className = "System.Web.SiteMapNode";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SiteMapNode(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static SiteMapNode castFrom(IJCOBridgeReflected from) throws Throwable {
        return new SiteMapNode(from.getJCOInstance());
    }

    // Constructors section
    
    
    public SiteMapNode(SiteMapProvider provider, java.lang.String key) throws Throwable, system.web.HttpException, system.ArgumentNullException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.ArgumentException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)provider.getJCOInstance(), (Object)key);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SiteMapNode(SiteMapProvider provider, java.lang.String key, java.lang.String url) throws Throwable, system.web.HttpException, system.ArgumentNullException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.ArgumentException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)provider.getJCOInstance(), (Object)key, (Object)url);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SiteMapNode(SiteMapProvider provider, java.lang.String key, java.lang.String url, java.lang.String title) throws Throwable, system.web.HttpException, system.ArgumentNullException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.ArgumentException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)provider.getJCOInstance(), (Object)key, (Object)url, (Object)title);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SiteMapNode(SiteMapProvider provider, java.lang.String key, java.lang.String url, java.lang.String title, java.lang.String description) throws Throwable, system.web.HttpException, system.ArgumentNullException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.ArgumentException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)provider.getJCOInstance(), (Object)key, (Object)url, (Object)title, (Object)description);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public SiteMapNode Clone(boolean cloneParentNodes) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.NotSupportedException, system.IndexOutOfRangeException, system.web.HttpException, system.configuration.provider.ProviderException, system.configuration.ConfigurationErrorsException {
        try {
            JCObject objClone = (JCObject)classInstance.Invoke("Clone", cloneParentNodes);
            return new SiteMapNode(objClone);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SiteMapNodeCollection GetAllNodes() throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentOutOfRangeException, system.ArgumentException {
        try {
            JCObject objGetAllNodes = (JCObject)classInstance.Invoke("GetAllNodes");
            return new SiteMapNodeCollection(objGetAllNodes);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SiteMapDataSourceView GetDataSourceView(SiteMapDataSource owner, java.lang.String viewName) throws Throwable, system.ArgumentNullException, system.MulticastNotSupportedException, system.FormatException, system.ArgumentOutOfRangeException {
        try {
            JCObject objGetDataSourceView = (JCObject)classInstance.Invoke("GetDataSourceView", (Object)owner.getJCOInstance(), (Object)viewName);
            return new SiteMapDataSourceView(objGetDataSourceView);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SiteMapHierarchicalDataSourceView GetHierarchicalDataSourceView() throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentOutOfRangeException {
        try {
            JCObject objGetHierarchicalDataSourceView = (JCObject)classInstance.Invoke("GetHierarchicalDataSourceView");
            return new SiteMapHierarchicalDataSourceView(objGetHierarchicalDataSourceView);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsDescendantOf(SiteMapNode node) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("IsDescendantOf", (Object)node.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SiteMapNode Clone() throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.NotSupportedException, system.web.HttpException, system.configuration.provider.ProviderException, system.configuration.ConfigurationErrorsException, system.OutOfMemoryException {
        try {
            JCObject objClone = (JCObject)classInstance.Invoke("Clone");
            return new SiteMapNode(objClone);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsAccessibleToUser(HttpContext context) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.web.HttpException, system.globalization.CultureNotFoundException, system.configuration.provider.ProviderException, system.configuration.ConfigurationErrorsException, system.NullReferenceException, system.security.SecurityException {
        try {
            return (boolean)classInstance.Invoke("IsAccessibleToUser", (Object)context.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public SiteMapNodeCollection getChildNodes() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ChildNodes");
            return new SiteMapNodeCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setChildNodes(SiteMapNodeCollection ChildNodes) throws Throwable {
        try {
            classInstance.Set("ChildNodes", (Object)ChildNodes.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDescription() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Description");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDescription(java.lang.String Description) throws Throwable {
        try {
            classInstance.Set("Description", (Object)Description);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getKey() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Key");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getHasChildNodes() throws Throwable {
        try {
            return (boolean)classInstance.Get("HasChildNodes");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SiteMapNode getNextSibling() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("NextSibling");
            return new SiteMapNode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SiteMapNode getParentNode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ParentNode");
            return new SiteMapNode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setParentNode(SiteMapNode ParentNode) throws Throwable {
        try {
            classInstance.Set("ParentNode", (Object)ParentNode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SiteMapNode getPreviousSibling() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PreviousSibling");
            return new SiteMapNode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SiteMapProvider getProvider() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Provider");
            return new SiteMapProvider(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getReadOnly() throws Throwable {
        try {
            return (boolean)classInstance.Get("ReadOnly");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReadOnly(boolean ReadOnly) throws Throwable {
        try {
            classInstance.Set("ReadOnly", ReadOnly);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getResourceKey() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ResourceKey");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setResourceKey(java.lang.String ResourceKey) throws Throwable {
        try {
            classInstance.Set("ResourceKey", (Object)ResourceKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SiteMapNode getRootNode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RootNode");
            return new SiteMapNode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTitle() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Title");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTitle(java.lang.String Title) throws Throwable {
        try {
            classInstance.Set("Title", (Object)Title);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getUrl() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Url");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUrl(java.lang.String Url) throws Throwable {
        try {
            classInstance.Set("Url", (Object)Url);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}