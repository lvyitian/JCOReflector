/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.data.sqlclient;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.data.common.DbConnectionStringBuilder;
import system.data.sqlclient.ApplicationIntent;
import system.data.sqlclient.PoolBlockingPeriod;
import system.data.sqlclient.SqlConnectionColumnEncryptionSetting;
import system.data.sqlclient.SqlAuthenticationMethod;


/**
 * The base .NET class managing System.Data.SqlClient.SqlConnectionStringBuilder, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class SqlConnectionStringBuilder extends NetObject  {
    public static final String assemblyFullName = "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "System.Data";
    public static final String className = "System.Data.SqlClient.SqlConnectionStringBuilder";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlConnectionStringBuilder(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static SqlConnectionStringBuilder castFrom(IJCOBridgeReflected from) throws Throwable {
        return new SqlConnectionStringBuilder(from.getJCOInstance());
    }

    // Constructors section
    
    
    public SqlConnectionStringBuilder() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.globalization.CultureNotFoundException, system.NotSupportedException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlConnectionStringBuilder(java.lang.String connectionString) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.NotSupportedException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)connectionString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public void Clear() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        try {
            classInstance.Invoke("Clear");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean ContainsKey(java.lang.String keyword) throws Throwable, system.ArgumentNullException {
        try {
            return (boolean)classInstance.Invoke("ContainsKey", (Object)keyword);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Remove(java.lang.String keyword) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        try {
            return (boolean)classInstance.Invoke("Remove", (Object)keyword);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean ShouldSerialize(java.lang.String keyword) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException {
        try {
            return (boolean)classInstance.Invoke("ShouldSerialize", (Object)keyword);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Add(java.lang.String keyword, NetObject value) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.text.regularexpressions.RegexMatchTimeoutException {
        try {
            classInstance.Invoke("Add", (Object)keyword, (Object)value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean EquivalentTo(DbConnectionStringBuilder connectionStringBuilder) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException {
        try {
            return (boolean)classInstance.Invoke("EquivalentTo", (Object)connectionStringBuilder.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public ApplicationIntent getApplicationIntent() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ApplicationIntent");
            return new ApplicationIntent(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setApplicationIntent(ApplicationIntent ApplicationIntent) throws Throwable {
        try {
            classInstance.Set("ApplicationIntent", (Object)ApplicationIntent.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getApplicationName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ApplicationName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setApplicationName(java.lang.String ApplicationName) throws Throwable {
        try {
            classInstance.Set("ApplicationName", (Object)ApplicationName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAsynchronousProcessing() throws Throwable {
        try {
            return (boolean)classInstance.Get("AsynchronousProcessing");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAsynchronousProcessing(boolean AsynchronousProcessing) throws Throwable {
        try {
            classInstance.Set("AsynchronousProcessing", AsynchronousProcessing);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getAttachDBFilename() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("AttachDBFilename");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAttachDBFilename(java.lang.String AttachDBFilename) throws Throwable {
        try {
            classInstance.Set("AttachDBFilename", (Object)AttachDBFilename);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PoolBlockingPeriod getPoolBlockingPeriod() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PoolBlockingPeriod");
            return new PoolBlockingPeriod(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPoolBlockingPeriod(PoolBlockingPeriod PoolBlockingPeriod) throws Throwable {
        try {
            classInstance.Set("PoolBlockingPeriod", (Object)PoolBlockingPeriod.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getConnectionReset() throws Throwable {
        try {
            return (boolean)classInstance.Get("ConnectionReset");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConnectionReset(boolean ConnectionReset) throws Throwable {
        try {
            classInstance.Set("ConnectionReset", ConnectionReset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getContextConnection() throws Throwable {
        try {
            return (boolean)classInstance.Get("ContextConnection");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setContextConnection(boolean ContextConnection) throws Throwable {
        try {
            classInstance.Set("ContextConnection", ContextConnection);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getConnectTimeout() throws Throwable {
        try {
            return (int)classInstance.Get("ConnectTimeout");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConnectTimeout(int ConnectTimeout) throws Throwable {
        try {
            classInstance.Set("ConnectTimeout", ConnectTimeout);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getCurrentLanguage() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("CurrentLanguage");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCurrentLanguage(java.lang.String CurrentLanguage) throws Throwable {
        try {
            classInstance.Set("CurrentLanguage", (Object)CurrentLanguage);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDataSource() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("DataSource");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDataSource(java.lang.String DataSource) throws Throwable {
        try {
            classInstance.Set("DataSource", (Object)DataSource);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEncrypt() throws Throwable {
        try {
            return (boolean)classInstance.Get("Encrypt");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEncrypt(boolean Encrypt) throws Throwable {
        try {
            classInstance.Set("Encrypt", Encrypt);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlConnectionColumnEncryptionSetting getColumnEncryptionSetting() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ColumnEncryptionSetting");
            return new SqlConnectionColumnEncryptionSetting(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setColumnEncryptionSetting(SqlConnectionColumnEncryptionSetting ColumnEncryptionSetting) throws Throwable {
        try {
            classInstance.Set("ColumnEncryptionSetting", (Object)ColumnEncryptionSetting.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getEnclaveAttestationUrl() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("EnclaveAttestationUrl");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnclaveAttestationUrl(java.lang.String EnclaveAttestationUrl) throws Throwable {
        try {
            classInstance.Set("EnclaveAttestationUrl", (Object)EnclaveAttestationUrl);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTrustServerCertificate() throws Throwable {
        try {
            return (boolean)classInstance.Get("TrustServerCertificate");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTrustServerCertificate(boolean TrustServerCertificate) throws Throwable {
        try {
            classInstance.Set("TrustServerCertificate", TrustServerCertificate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnlist() throws Throwable {
        try {
            return (boolean)classInstance.Get("Enlist");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnlist(boolean Enlist) throws Throwable {
        try {
            classInstance.Set("Enlist", Enlist);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getFailoverPartner() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("FailoverPartner");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFailoverPartner(java.lang.String FailoverPartner) throws Throwable {
        try {
            classInstance.Set("FailoverPartner", (Object)FailoverPartner);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getInitialCatalog() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("InitialCatalog");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInitialCatalog(java.lang.String InitialCatalog) throws Throwable {
        try {
            classInstance.Set("InitialCatalog", (Object)InitialCatalog);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIntegratedSecurity() throws Throwable {
        try {
            return (boolean)classInstance.Get("IntegratedSecurity");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIntegratedSecurity(boolean IntegratedSecurity) throws Throwable {
        try {
            classInstance.Set("IntegratedSecurity", IntegratedSecurity);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlAuthenticationMethod getAuthentication() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Authentication");
            return new SqlAuthenticationMethod(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAuthentication(SqlAuthenticationMethod Authentication) throws Throwable {
        try {
            classInstance.Set("Authentication", (Object)Authentication.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getLoadBalanceTimeout() throws Throwable {
        try {
            return (int)classInstance.Get("LoadBalanceTimeout");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLoadBalanceTimeout(int LoadBalanceTimeout) throws Throwable {
        try {
            classInstance.Set("LoadBalanceTimeout", LoadBalanceTimeout);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMaxPoolSize() throws Throwable {
        try {
            return (int)classInstance.Get("MaxPoolSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaxPoolSize(int MaxPoolSize) throws Throwable {
        try {
            classInstance.Set("MaxPoolSize", MaxPoolSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getConnectRetryCount() throws Throwable {
        try {
            return (int)classInstance.Get("ConnectRetryCount");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConnectRetryCount(int ConnectRetryCount) throws Throwable {
        try {
            classInstance.Set("ConnectRetryCount", ConnectRetryCount);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getConnectRetryInterval() throws Throwable {
        try {
            return (int)classInstance.Get("ConnectRetryInterval");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConnectRetryInterval(int ConnectRetryInterval) throws Throwable {
        try {
            classInstance.Set("ConnectRetryInterval", ConnectRetryInterval);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMinPoolSize() throws Throwable {
        try {
            return (int)classInstance.Get("MinPoolSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMinPoolSize(int MinPoolSize) throws Throwable {
        try {
            classInstance.Set("MinPoolSize", MinPoolSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getMultipleActiveResultSets() throws Throwable {
        try {
            return (boolean)classInstance.Get("MultipleActiveResultSets");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMultipleActiveResultSets(boolean MultipleActiveResultSets) throws Throwable {
        try {
            classInstance.Set("MultipleActiveResultSets", MultipleActiveResultSets);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getMultiSubnetFailover() throws Throwable {
        try {
            return (boolean)classInstance.Get("MultiSubnetFailover");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMultiSubnetFailover(boolean MultiSubnetFailover) throws Throwable {
        try {
            classInstance.Set("MultiSubnetFailover", MultiSubnetFailover);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTransparentNetworkIPResolution() throws Throwable {
        try {
            return (boolean)classInstance.Get("TransparentNetworkIPResolution");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTransparentNetworkIPResolution(boolean TransparentNetworkIPResolution) throws Throwable {
        try {
            classInstance.Set("TransparentNetworkIPResolution", TransparentNetworkIPResolution);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getNetworkLibrary() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("NetworkLibrary");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setNetworkLibrary(java.lang.String NetworkLibrary) throws Throwable {
        try {
            classInstance.Set("NetworkLibrary", (Object)NetworkLibrary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getPacketSize() throws Throwable {
        try {
            return (int)classInstance.Get("PacketSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPacketSize(int PacketSize) throws Throwable {
        try {
            classInstance.Set("PacketSize", PacketSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getPassword() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Password");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPassword(java.lang.String Password) throws Throwable {
        try {
            classInstance.Set("Password", (Object)Password);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getPersistSecurityInfo() throws Throwable {
        try {
            return (boolean)classInstance.Get("PersistSecurityInfo");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPersistSecurityInfo(boolean PersistSecurityInfo) throws Throwable {
        try {
            classInstance.Set("PersistSecurityInfo", PersistSecurityInfo);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getPooling() throws Throwable {
        try {
            return (boolean)classInstance.Get("Pooling");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPooling(boolean Pooling) throws Throwable {
        try {
            classInstance.Set("Pooling", Pooling);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getReplication() throws Throwable {
        try {
            return (boolean)classInstance.Get("Replication");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReplication(boolean Replication) throws Throwable {
        try {
            classInstance.Set("Replication", Replication);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTransactionBinding() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TransactionBinding");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTransactionBinding(java.lang.String TransactionBinding) throws Throwable {
        try {
            classInstance.Set("TransactionBinding", (Object)TransactionBinding);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTypeSystemVersion() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TypeSystemVersion");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTypeSystemVersion(java.lang.String TypeSystemVersion) throws Throwable {
        try {
            classInstance.Set("TypeSystemVersion", (Object)TypeSystemVersion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getUserID() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("UserID");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUserID(java.lang.String UserID) throws Throwable {
        try {
            classInstance.Set("UserID", (Object)UserID);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUserInstance() throws Throwable {
        try {
            return (boolean)classInstance.Get("UserInstance");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUserInstance(boolean UserInstance) throws Throwable {
        try {
            classInstance.Set("UserInstance", UserInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getWorkstationID() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("WorkstationID");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setWorkstationID(java.lang.String WorkstationID) throws Throwable {
        try {
            classInstance.Set("WorkstationID", (Object)WorkstationID);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsFixedSize() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsFixedSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getBrowsableConnectionString() throws Throwable {
        try {
            return (boolean)classInstance.Get("BrowsableConnectionString");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBrowsableConnectionString(boolean BrowsableConnectionString) throws Throwable {
        try {
            classInstance.Set("BrowsableConnectionString", BrowsableConnectionString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getConnectionString() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ConnectionString");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConnectionString(java.lang.String ConnectionString) throws Throwable {
        try {
            classInstance.Set("ConnectionString", (Object)ConnectionString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getCount() throws Throwable {
        try {
            return (int)classInstance.Get("Count");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsReadOnly() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsReadOnly");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}