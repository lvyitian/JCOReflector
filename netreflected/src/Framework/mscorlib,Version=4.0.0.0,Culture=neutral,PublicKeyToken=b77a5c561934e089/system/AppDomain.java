/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.reflection.emit.AssemblyBuilder;
import system.reflection.AssemblyName;
import system.reflection.emit.AssemblyBuilderAccess;
import system.security.policy.Evidence;
import system.security.PermissionSet;
import system.runtime.remoting.ObjectHandle;
import system.reflection.BindingFlags;
import system.reflection.Binder;
import system.globalization.CultureInfo;
import system.reflection.Assembly;
import system.AppDomain;
import system.security.policy.PolicyLevel;
import system.security.principal.PrincipalPolicy;
import system.CrossAppDomainDelegate;
import system.AppDomainSetup;
import system.security.policy.StrongName;
import system.configuration.assemblies.AssemblyHashAlgorithm;
import system.AppDomainInitializer;
import system.runtime.remoting.ObjRef;
import system.AppDomainManager;
import system.ActivationContext;
import system.ApplicationIdentity;
import system.security.policy.ApplicationTrust;
import system.TimeSpan;
import system.AssemblyLoadEventHandler;
import system.ResolveEventHandler;
import system.EventHandler;
import system.UnhandledExceptionEventHandler;


/**
 * The base .NET class managing System.AppDomain, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class AppDomain extends NetObject  {
    public static final String assemblyFullName = "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "mscorlib";
    public static final String className = "System.AppDomain";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AppDomain(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static AppDomain castFrom(IJCOBridgeReflected from) throws Throwable {
        return new AppDomain(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.FormatException, system.NotImplementedException, system.globalization.CultureNotFoundException {
        try {
            JCObject objDefineDynamicAssembly = (JCObject)classInstance.Invoke("DefineDynamicAssembly", (Object)name.getJCOInstance(), (Object)access.getJCOInstance());
            return new AssemblyBuilder(objDefineDynamicAssembly);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, java.lang.String dir) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.FormatException, system.NotImplementedException, system.globalization.CultureNotFoundException {
        try {
            JCObject objDefineDynamicAssembly = (JCObject)classInstance.Invoke("DefineDynamicAssembly", (Object)name.getJCOInstance(), (Object)access.getJCOInstance(), (Object)dir);
            return new AssemblyBuilder(objDefineDynamicAssembly);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, Evidence evidence) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.FormatException, system.NotImplementedException, system.globalization.CultureNotFoundException {
        try {
            JCObject objDefineDynamicAssembly = (JCObject)classInstance.Invoke("DefineDynamicAssembly", (Object)name.getJCOInstance(), (Object)access.getJCOInstance(), (Object)evidence.getJCOInstance());
            return new AssemblyBuilder(objDefineDynamicAssembly);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.FormatException, system.NotImplementedException, system.globalization.CultureNotFoundException {
        try {
            JCObject objDefineDynamicAssembly = (JCObject)classInstance.Invoke("DefineDynamicAssembly", (Object)name.getJCOInstance(), (Object)access.getJCOInstance(), (Object)requiredPermissions.getJCOInstance(), (Object)optionalPermissions.getJCOInstance(), (Object)refusedPermissions.getJCOInstance());
            return new AssemblyBuilder(objDefineDynamicAssembly);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, java.lang.String dir, Evidence evidence) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.FormatException, system.NotImplementedException, system.globalization.CultureNotFoundException {
        try {
            JCObject objDefineDynamicAssembly = (JCObject)classInstance.Invoke("DefineDynamicAssembly", (Object)name.getJCOInstance(), (Object)access.getJCOInstance(), (Object)dir, (Object)evidence.getJCOInstance());
            return new AssemblyBuilder(objDefineDynamicAssembly);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, java.lang.String dir, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.FormatException, system.NotImplementedException, system.globalization.CultureNotFoundException {
        try {
            JCObject objDefineDynamicAssembly = (JCObject)classInstance.Invoke("DefineDynamicAssembly", (Object)name.getJCOInstance(), (Object)access.getJCOInstance(), (Object)dir, (Object)requiredPermissions.getJCOInstance(), (Object)optionalPermissions.getJCOInstance(), (Object)refusedPermissions.getJCOInstance());
            return new AssemblyBuilder(objDefineDynamicAssembly);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.FormatException, system.NotImplementedException, system.globalization.CultureNotFoundException {
        try {
            JCObject objDefineDynamicAssembly = (JCObject)classInstance.Invoke("DefineDynamicAssembly", (Object)name.getJCOInstance(), (Object)access.getJCOInstance(), (Object)evidence.getJCOInstance(), (Object)requiredPermissions.getJCOInstance(), (Object)optionalPermissions.getJCOInstance(), (Object)refusedPermissions.getJCOInstance());
            return new AssemblyBuilder(objDefineDynamicAssembly);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, java.lang.String dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.FormatException, system.NotImplementedException, system.globalization.CultureNotFoundException {
        try {
            JCObject objDefineDynamicAssembly = (JCObject)classInstance.Invoke("DefineDynamicAssembly", (Object)name.getJCOInstance(), (Object)access.getJCOInstance(), (Object)dir, (Object)evidence.getJCOInstance(), (Object)requiredPermissions.getJCOInstance(), (Object)optionalPermissions.getJCOInstance(), (Object)refusedPermissions.getJCOInstance());
            return new AssemblyBuilder(objDefineDynamicAssembly);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, java.lang.String dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions, boolean isSynchronized) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.FormatException, system.NotImplementedException, system.globalization.CultureNotFoundException {
        try {
            JCObject objDefineDynamicAssembly = (JCObject)classInstance.Invoke("DefineDynamicAssembly", (Object)name.getJCOInstance(), (Object)access.getJCOInstance(), (Object)dir, (Object)evidence.getJCOInstance(), (Object)requiredPermissions.getJCOInstance(), (Object)optionalPermissions.getJCOInstance(), (Object)refusedPermissions.getJCOInstance(), isSynchronized);
            return new AssemblyBuilder(objDefineDynamicAssembly);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ObjectHandle CreateInstance(java.lang.String assemblyName, java.lang.String typeName) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.FormatException, system.IndexOutOfRangeException, system.TypeLoadException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.MissingMethodException, system.reflection.TargetInvocationException {
        try {
            JCObject objCreateInstance = (JCObject)classInstance.Invoke("CreateInstance", (Object)assemblyName, (Object)typeName);
            return new ObjectHandle(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ObjectHandle CreateInstanceFrom(java.lang.String assemblyFile, java.lang.String typeName) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.ArgumentOutOfRangeException, system.NotImplementedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.FormatException {
        try {
            JCObject objCreateInstanceFrom = (JCObject)classInstance.Invoke("CreateInstanceFrom", (Object)assemblyFile, (Object)typeName);
            return new ObjectHandle(objCreateInstanceFrom);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ObjectHandle CreateInstance(java.lang.String assemblyName, java.lang.String typeName, NetObject[] activationAttributes) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.FormatException, system.IndexOutOfRangeException, system.TypeLoadException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.MissingMethodException, system.reflection.TargetInvocationException {
        try {
            JCObject objCreateInstance = (JCObject)classInstance.Invoke("CreateInstance", (Object)assemblyName, (Object)typeName, (Object)toObjectFromArray(activationAttributes));
            return new ObjectHandle(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ObjectHandle CreateInstanceFrom(java.lang.String assemblyFile, java.lang.String typeName, NetObject[] activationAttributes) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.ArgumentOutOfRangeException {
        try {
            JCObject objCreateInstanceFrom = (JCObject)classInstance.Invoke("CreateInstanceFrom", (Object)assemblyFile, (Object)typeName, (Object)toObjectFromArray(activationAttributes));
            return new ObjectHandle(objCreateInstanceFrom);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ObjectHandle CreateInstance(java.lang.String assemblyName, java.lang.String typeName, boolean ignoreCase, BindingFlags bindingAttr, Binder binder, NetObject[] args, CultureInfo culture, NetObject[] activationAttributes, Evidence securityAttributes) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.FormatException, system.IndexOutOfRangeException, system.TypeLoadException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.MissingMethodException, system.reflection.TargetInvocationException {
        try {
            JCObject objCreateInstance = (JCObject)classInstance.Invoke("CreateInstance", (Object)assemblyName, (Object)typeName, ignoreCase, (Object)bindingAttr.getJCOInstance(), (Object)binder.getJCOInstance(), (Object)toObjectFromArray(args), (Object)culture.getJCOInstance(), (Object)toObjectFromArray(activationAttributes), (Object)securityAttributes.getJCOInstance());
            return new ObjectHandle(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ObjectHandle CreateInstanceFrom(java.lang.String assemblyFile, java.lang.String typeName, boolean ignoreCase, BindingFlags bindingAttr, Binder binder, NetObject[] args, CultureInfo culture, NetObject[] activationAttributes, Evidence securityAttributes) throws Throwable, system.NullReferenceException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.FormatException {
        try {
            JCObject objCreateInstanceFrom = (JCObject)classInstance.Invoke("CreateInstanceFrom", (Object)assemblyFile, (Object)typeName, ignoreCase, (Object)bindingAttr.getJCOInstance(), (Object)binder.getJCOInstance(), (Object)toObjectFromArray(args), (Object)culture.getJCOInstance(), (Object)toObjectFromArray(activationAttributes), (Object)securityAttributes.getJCOInstance());
            return new ObjectHandle(objCreateInstanceFrom);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Assembly Load(AssemblyName assemblyRef) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.NotSupportedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.io.PathTooLongException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.DriveNotFoundException, system.OperationCanceledException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.OverflowException {
        try {
            JCObject objLoad = (JCObject)classInstance.Invoke("Load", (Object)assemblyRef.getJCOInstance());
            return new Assembly(objLoad);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Assembly Load(java.lang.String assemblyString) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.FormatException, system.NotSupportedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.io.PathTooLongException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.reflection.TargetInvocationException {
        try {
            JCObject objLoad = (JCObject)classInstance.Invoke("Load", (Object)assemblyString);
            return new Assembly(objLoad);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Assembly Load(byte[] rawAssembly) throws Throwable {
        try {
            JCObject objLoad = (JCObject)classInstance.Invoke("Load", rawAssembly);
            return new Assembly(objLoad);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore) throws Throwable {
        try {
            JCObject objLoad = (JCObject)classInstance.Invoke("Load", rawAssembly, rawSymbolStore);
            return new Assembly(objLoad);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore, Evidence securityEvidence) throws Throwable, system.InvalidOperationException, system.NotSupportedException {
        try {
            JCObject objLoad = (JCObject)classInstance.Invoke("Load", rawAssembly, rawSymbolStore, (Object)securityEvidence.getJCOInstance());
            return new Assembly(objLoad);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Assembly Load(AssemblyName assemblyRef, Evidence assemblySecurity) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.NotSupportedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.io.PathTooLongException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.DriveNotFoundException, system.OperationCanceledException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.OverflowException {
        try {
            JCObject objLoad = (JCObject)classInstance.Invoke("Load", (Object)assemblyRef.getJCOInstance(), (Object)assemblySecurity.getJCOInstance());
            return new Assembly(objLoad);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Assembly Load(java.lang.String assemblyString, Evidence assemblySecurity) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.FormatException, system.NotSupportedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.io.PathTooLongException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.reflection.TargetInvocationException {
        try {
            JCObject objLoad = (JCObject)classInstance.Invoke("Load", (Object)assemblyString, (Object)assemblySecurity.getJCOInstance());
            return new Assembly(objLoad);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ExecuteAssembly(java.lang.String assemblyFile) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.FormatException {
        try {
            return (int)classInstance.Invoke("ExecuteAssembly", (Object)assemblyFile);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ExecuteAssembly(java.lang.String assemblyFile, Evidence assemblySecurity) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.FormatException {
        try {
            return (int)classInstance.Invoke("ExecuteAssembly", (Object)assemblyFile, (Object)assemblySecurity.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ExecuteAssembly(java.lang.String assemblyFile, Evidence assemblySecurity, java.lang.String[] args) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.reflection.TargetInvocationException {
        try {
            return (int)classInstance.Invoke("ExecuteAssembly", (Object)assemblyFile, (Object)assemblySecurity.getJCOInstance(), (Object)args);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Assembly[] GetAssemblies() throws Throwable {
        try {
            ArrayList<Assembly> resultingArrayList = new ArrayList<Assembly>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("GetAssemblies");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new Assembly(resultingObject));
            }
            Assembly[] resultingArray = new Assembly[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AppendPrivatePath(java.lang.String path) throws Throwable, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException, system.ArgumentNullException, system.FormatException {
        try {
            classInstance.Invoke("AppendPrivatePath", (Object)path);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ClearPrivatePath() throws Throwable {
        try {
            classInstance.Invoke("ClearPrivatePath");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ClearShadowCopyPath() throws Throwable {
        try {
            classInstance.Invoke("ClearShadowCopyPath");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetCachePath(java.lang.String path) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.globalization.CultureNotFoundException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.io.PathTooLongException, system.MemberAccessException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            classInstance.Invoke("SetCachePath", (Object)path);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetData(java.lang.String name, NetObject data) throws Throwable, system.ArgumentNullException, system.NullReferenceException, system.ArgumentException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.MemberAccessException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.io.PathTooLongException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            classInstance.Invoke("SetData", (Object)name, (Object)data.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetData(java.lang.String name) throws Throwable, system.ArgumentNullException, system.NullReferenceException, system.ArgumentOutOfRangeException, system.ArgumentException, system.globalization.CultureNotFoundException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.io.PathTooLongException, system.MemberAccessException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.DriveNotFoundException, system.OperationCanceledException, system.InvalidOperationException {
        try {
            JCObject objGetData = (JCObject)classInstance.Invoke("GetData", (Object)name);
            return new NetObject(objGetData);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Unload(AppDomain domain) throws Throwable, system.ArgumentNullException, system.NullReferenceException, system.CannotUnloadAppDomainException {
        try {
            classType.Invoke("Unload", (Object)domain.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetAppDomainPolicy(PolicyLevel domainPolicy) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.security.policy.PolicyException, system.IndexOutOfRangeException, system.NotImplementedException, system.ArgumentOutOfRangeException {
        try {
            classInstance.Invoke("SetAppDomainPolicy", (Object)domainPolicy.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetPrincipalPolicy(PrincipalPolicy policy) throws Throwable {
        try {
            classInstance.Invoke("SetPrincipalPolicy", (Object)policy.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject InitializeLifetimeService() throws Throwable {
        try {
            JCObject objInitializeLifetimeService = (JCObject)classInstance.Invoke("InitializeLifetimeService");
            return new NetObject(objInitializeLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DoCallBack(CrossAppDomainDelegate callBackDelegate) throws Throwable, system.ArgumentNullException {
        try {
            classInstance.Invoke("DoCallBack", callBackDelegate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AppDomain CreateDomain(java.lang.String friendlyName, Evidence securityInfo) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.NotSupportedException, system.InvalidOperationException, system.NotImplementedException {
        try {
            JCObject objCreateDomain = (JCObject)classType.Invoke("CreateDomain", (Object)friendlyName, (Object)securityInfo.getJCOInstance());
            return new AppDomain(objCreateDomain);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AppDomain CreateDomain(java.lang.String friendlyName) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.NotSupportedException, system.InvalidOperationException, system.NotImplementedException {
        try {
            JCObject objCreateDomain = (JCObject)classType.Invoke("CreateDomain", (Object)friendlyName);
            return new AppDomain(objCreateDomain);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AppDomain CreateDomain(java.lang.String friendlyName, Evidence securityInfo, AppDomainSetup info) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentOutOfRangeException, system.FormatException, system.NotSupportedException, system.IndexOutOfRangeException, system.NotImplementedException {
        try {
            JCObject objCreateDomain = (JCObject)classType.Invoke("CreateDomain", (Object)friendlyName, (Object)securityInfo.getJCOInstance(), (Object)info.getJCOInstance());
            return new AppDomain(objCreateDomain);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AppDomain CreateDomain(java.lang.String friendlyName, Evidence securityInfo, AppDomainSetup info, PermissionSet grantSet, StrongName... fullTrustAssemblies) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.globalization.CultureNotFoundException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.io.PathTooLongException, system.MemberAccessException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.DriveNotFoundException, system.OperationCanceledException, system.InvalidOperationException, system.FormatException, system.security.SecurityException, system.MissingMethodException, system.reflection.TargetInvocationException, system.runtime.serialization.SerializationException, system.NotImplementedException {
        try {
            JCObject objCreateDomain = (JCObject)classType.Invoke("CreateDomain", (Object)friendlyName, (Object)securityInfo.getJCOInstance(), (Object)info.getJCOInstance(), (Object)grantSet.getJCOInstance(), (Object[])toObjectFromArray(fullTrustAssemblies));
            return new AppDomain(objCreateDomain);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetShadowCopyPath(java.lang.String path) throws Throwable {
        try {
            classInstance.Invoke("SetShadowCopyPath", (Object)path);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String ApplyPolicy(java.lang.String assemblyName) throws Throwable, system.ArgumentNullException, system.ArgumentException {
        try {
            return (java.lang.String)classInstance.Invoke("ApplyPolicy", (Object)assemblyName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ObjectHandle CreateComInstanceFrom(java.lang.String assemblyName, java.lang.String typeName) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.FormatException, system.TypeLoadException {
        try {
            JCObject objCreateComInstanceFrom = (JCObject)classInstance.Invoke("CreateComInstanceFrom", (Object)assemblyName, (Object)typeName);
            return new ObjectHandle(objCreateComInstanceFrom);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ObjectHandle CreateComInstanceFrom(java.lang.String assemblyFile, java.lang.String typeName, byte[] hashValue, AssemblyHashAlgorithm hashAlgorithm) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.MissingMethodException, system.FormatException, system.TypeLoadException {
        try {
            JCObject objCreateComInstanceFrom = (JCObject)classInstance.Invoke("CreateComInstanceFrom", (Object)assemblyFile, (Object)typeName, hashValue, (Object)hashAlgorithm.getJCOInstance());
            return new ObjectHandle(objCreateComInstanceFrom);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ObjectHandle CreateInstance(java.lang.String assemblyName, java.lang.String typeName, boolean ignoreCase, BindingFlags bindingAttr, Binder binder, NetObject[] args, CultureInfo culture, NetObject[] activationAttributes) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.FormatException, system.IndexOutOfRangeException, system.TypeLoadException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.MissingMethodException, system.reflection.TargetInvocationException {
        try {
            JCObject objCreateInstance = (JCObject)classInstance.Invoke("CreateInstance", (Object)assemblyName, (Object)typeName, ignoreCase, (Object)bindingAttr.getJCOInstance(), (Object)binder.getJCOInstance(), (Object)toObjectFromArray(args), (Object)culture.getJCOInstance(), (Object)toObjectFromArray(activationAttributes));
            return new ObjectHandle(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ObjectHandle CreateInstanceFrom(java.lang.String assemblyFile, java.lang.String typeName, boolean ignoreCase, BindingFlags bindingAttr, Binder binder, NetObject[] args, CultureInfo culture, NetObject[] activationAttributes) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.FormatException {
        try {
            JCObject objCreateInstanceFrom = (JCObject)classInstance.Invoke("CreateInstanceFrom", (Object)assemblyFile, (Object)typeName, ignoreCase, (Object)bindingAttr.getJCOInstance(), (Object)binder.getJCOInstance(), (Object)toObjectFromArray(args), (Object)culture.getJCOInstance(), (Object)toObjectFromArray(activationAttributes));
            return new ObjectHandle(objCreateInstanceFrom);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ExecuteAssembly(java.lang.String assemblyFile, java.lang.String[] args) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.FormatException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.reflection.TargetInvocationException {
        try {
            return (int)classInstance.Invoke("ExecuteAssembly", (Object)assemblyFile, (Object)args);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ExecuteAssembly(java.lang.String assemblyFile, Evidence assemblySecurity, java.lang.String[] args, byte[] hashValue, AssemblyHashAlgorithm hashAlgorithm) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.reflection.TargetInvocationException {
        try {
            return (int)classInstance.Invoke("ExecuteAssembly", (Object)assemblyFile, (Object)assemblySecurity.getJCOInstance(), (Object)args, hashValue, (Object)hashAlgorithm.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ExecuteAssembly(java.lang.String assemblyFile, java.lang.String[] args, byte[] hashValue, AssemblyHashAlgorithm hashAlgorithm) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.FormatException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.reflection.TargetInvocationException {
        try {
            return (int)classInstance.Invoke("ExecuteAssembly", (Object)assemblyFile, (Object)args, hashValue, (Object)hashAlgorithm.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ExecuteAssemblyByName(java.lang.String assemblyName) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.FormatException {
        try {
            return (int)classInstance.Invoke("ExecuteAssemblyByName", (Object)assemblyName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ExecuteAssemblyByName(java.lang.String assemblyName, Evidence assemblySecurity) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.FormatException {
        try {
            return (int)classInstance.Invoke("ExecuteAssemblyByName", (Object)assemblyName, (Object)assemblySecurity.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ExecuteAssemblyByName(java.lang.String assemblyName, Evidence assemblySecurity, java.lang.String... args) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.FormatException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.reflection.TargetInvocationException {
        try {
            return (int)classInstance.Invoke("ExecuteAssemblyByName", (Object)assemblyName, (Object)assemblySecurity.getJCOInstance(), (Object)args);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ExecuteAssemblyByName(java.lang.String assemblyName, java.lang.String... args) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.FormatException, system.NotSupportedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.reflection.TargetInvocationException {
        try {
            return (int)classInstance.Invoke("ExecuteAssemblyByName", (Object)assemblyName, (Object)args);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ExecuteAssemblyByName(AssemblyName assemblyName, Evidence assemblySecurity, java.lang.String... args) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.IndexOutOfRangeException, system.io.PathTooLongException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.reflection.TargetInvocationException {
        try {
            return (int)classInstance.Invoke("ExecuteAssemblyByName", (Object)assemblyName.getJCOInstance(), (Object)assemblySecurity.getJCOInstance(), (Object)args);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int ExecuteAssemblyByName(AssemblyName assemblyName, java.lang.String... args) throws Throwable, system.ArgumentNullException, system.FormatException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentException, system.IndexOutOfRangeException, system.io.PathTooLongException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.reflection.TargetInvocationException {
        try {
            return (int)classInstance.Invoke("ExecuteAssemblyByName", (Object)assemblyName.getJCOInstance(), (Object)args);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Assembly[] ReflectionOnlyGetAssemblies() throws Throwable {
        try {
            ArrayList<Assembly> resultingArrayList = new ArrayList<Assembly>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("ReflectionOnlyGetAssemblies");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new Assembly(resultingObject));
            }
            Assembly[] resultingArray = new Assembly[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsFinalizingForUnload() throws Throwable {
        try {
            return (boolean)classInstance.Invoke("IsFinalizingForUnload");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int GetCurrentThreadId() throws Throwable {
        try {
            return (int)classType.Invoke("GetCurrentThreadId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AppDomain CreateDomain(java.lang.String friendlyName, Evidence securityInfo, java.lang.String appBasePath, java.lang.String appRelativeSearchPath, boolean shadowCopyFiles) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.globalization.CultureNotFoundException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.io.PathTooLongException, system.MemberAccessException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.DriveNotFoundException, system.OperationCanceledException, system.InvalidOperationException, system.NotImplementedException {
        try {
            JCObject objCreateDomain = (JCObject)classType.Invoke("CreateDomain", (Object)friendlyName, (Object)securityInfo.getJCOInstance(), (Object)appBasePath, (Object)appRelativeSearchPath, shadowCopyFiles);
            return new AppDomain(objCreateDomain);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AppDomain CreateDomain(java.lang.String friendlyName, Evidence securityInfo, java.lang.String appBasePath, java.lang.String appRelativeSearchPath, boolean shadowCopyFiles, AppDomainInitializer adInit, java.lang.String[] adInitArgs) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.globalization.CultureNotFoundException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.io.PathTooLongException, system.MemberAccessException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.DriveNotFoundException, system.OperationCanceledException, system.InvalidOperationException, system.NotImplementedException {
        try {
            JCObject objCreateDomain = (JCObject)classType.Invoke("CreateDomain", (Object)friendlyName, (Object)securityInfo.getJCOInstance(), (Object)appBasePath, (Object)appRelativeSearchPath, shadowCopyFiles, adInit, (Object)adInitArgs);
            return new AppDomain(objCreateDomain);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetShadowCopyFiles() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException {
        try {
            classInstance.Invoke("SetShadowCopyFiles");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetDynamicBase(java.lang.String path) throws Throwable, system.MemberAccessException, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.globalization.CultureNotFoundException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.io.PathTooLongException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            classInstance.Invoke("SetDynamicBase", (Object)path);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject CreateInstanceAndUnwrap(java.lang.String assemblyName, java.lang.String typeName) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.FormatException, system.IndexOutOfRangeException, system.TypeLoadException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.MissingMethodException {
        try {
            JCObject objCreateInstanceAndUnwrap = (JCObject)classInstance.Invoke("CreateInstanceAndUnwrap", (Object)assemblyName, (Object)typeName);
            return new NetObject(objCreateInstanceAndUnwrap);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject CreateInstanceAndUnwrap(java.lang.String assemblyName, java.lang.String typeName, NetObject[] activationAttributes) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.FormatException, system.IndexOutOfRangeException, system.TypeLoadException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.MissingMethodException {
        try {
            JCObject objCreateInstanceAndUnwrap = (JCObject)classInstance.Invoke("CreateInstanceAndUnwrap", (Object)assemblyName, (Object)typeName, (Object)toObjectFromArray(activationAttributes));
            return new NetObject(objCreateInstanceAndUnwrap);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject CreateInstanceAndUnwrap(java.lang.String assemblyName, java.lang.String typeName, boolean ignoreCase, BindingFlags bindingAttr, Binder binder, NetObject[] args, CultureInfo culture, NetObject[] activationAttributes, Evidence securityAttributes) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.FormatException, system.IndexOutOfRangeException, system.TypeLoadException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.MissingMethodException {
        try {
            JCObject objCreateInstanceAndUnwrap = (JCObject)classInstance.Invoke("CreateInstanceAndUnwrap", (Object)assemblyName, (Object)typeName, ignoreCase, (Object)bindingAttr.getJCOInstance(), (Object)binder.getJCOInstance(), (Object)toObjectFromArray(args), (Object)culture.getJCOInstance(), (Object)toObjectFromArray(activationAttributes), (Object)securityAttributes.getJCOInstance());
            return new NetObject(objCreateInstanceAndUnwrap);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject CreateInstanceAndUnwrap(java.lang.String assemblyName, java.lang.String typeName, boolean ignoreCase, BindingFlags bindingAttr, Binder binder, NetObject[] args, CultureInfo culture, NetObject[] activationAttributes) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.FormatException, system.IndexOutOfRangeException, system.TypeLoadException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.MissingMethodException {
        try {
            JCObject objCreateInstanceAndUnwrap = (JCObject)classInstance.Invoke("CreateInstanceAndUnwrap", (Object)assemblyName, (Object)typeName, ignoreCase, (Object)bindingAttr.getJCOInstance(), (Object)binder.getJCOInstance(), (Object)toObjectFromArray(args), (Object)culture.getJCOInstance(), (Object)toObjectFromArray(activationAttributes));
            return new NetObject(objCreateInstanceAndUnwrap);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject CreateInstanceFromAndUnwrap(java.lang.String assemblyName, java.lang.String typeName) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.NotImplementedException, system.ArgumentException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentOutOfRangeException {
        try {
            JCObject objCreateInstanceFromAndUnwrap = (JCObject)classInstance.Invoke("CreateInstanceFromAndUnwrap", (Object)assemblyName, (Object)typeName);
            return new NetObject(objCreateInstanceFromAndUnwrap);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject CreateInstanceFromAndUnwrap(java.lang.String assemblyName, java.lang.String typeName, NetObject[] activationAttributes) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.ArgumentOutOfRangeException, system.NotImplementedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.FormatException {
        try {
            JCObject objCreateInstanceFromAndUnwrap = (JCObject)classInstance.Invoke("CreateInstanceFromAndUnwrap", (Object)assemblyName, (Object)typeName, (Object)toObjectFromArray(activationAttributes));
            return new NetObject(objCreateInstanceFromAndUnwrap);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject CreateInstanceFromAndUnwrap(java.lang.String assemblyName, java.lang.String typeName, boolean ignoreCase, BindingFlags bindingAttr, Binder binder, NetObject[] args, CultureInfo culture, NetObject[] activationAttributes, Evidence securityAttributes) throws Throwable, system.NullReferenceException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException {
        try {
            JCObject objCreateInstanceFromAndUnwrap = (JCObject)classInstance.Invoke("CreateInstanceFromAndUnwrap", (Object)assemblyName, (Object)typeName, ignoreCase, (Object)bindingAttr.getJCOInstance(), (Object)binder.getJCOInstance(), (Object)toObjectFromArray(args), (Object)culture.getJCOInstance(), (Object)toObjectFromArray(activationAttributes), (Object)securityAttributes.getJCOInstance());
            return new NetObject(objCreateInstanceFromAndUnwrap);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject CreateInstanceFromAndUnwrap(java.lang.String assemblyFile, java.lang.String typeName, boolean ignoreCase, BindingFlags bindingAttr, Binder binder, NetObject[] args, CultureInfo culture, NetObject[] activationAttributes) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.ArgumentOutOfRangeException {
        try {
            JCObject objCreateInstanceFromAndUnwrap = (JCObject)classInstance.Invoke("CreateInstanceFromAndUnwrap", (Object)assemblyFile, (Object)typeName, ignoreCase, (Object)bindingAttr.getJCOInstance(), (Object)binder.getJCOInstance(), (Object)toObjectFromArray(args), (Object)culture.getJCOInstance(), (Object)toObjectFromArray(activationAttributes));
            return new NetObject(objCreateInstanceFromAndUnwrap);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsDefaultAppDomain() throws Throwable {
        try {
            return (boolean)classInstance.Invoke("IsDefaultAppDomain");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.runtime.remoting.RemotingException, system.ObjectDisposedException, system.InvalidOperationException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            JCObject objGetLifetimeService = (JCObject)classInstance.Invoke("GetLifetimeService");
            return new NetObject(objGetLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ObjRef CreateObjRef(NetType requestedType) throws Throwable, system.runtime.remoting.RemotingException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        try {
            JCObject objCreateObjRef = (JCObject)classInstance.Invoke("CreateObjRef", (Object)requestedType.getJCOInstance());
            return new ObjRef(objCreateObjRef);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public AppDomainManager getDomainManager() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DomainManager");
            return new AppDomainManager(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Evidence getEvidence() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Evidence");
            return new Evidence(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getFriendlyName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("FriendlyName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getBaseDirectory() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("BaseDirectory");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getRelativeSearchPath() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("RelativeSearchPath");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getShadowCopyFiles() throws Throwable {
        try {
            return (boolean)classInstance.Get("ShadowCopyFiles");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ActivationContext getActivationContext() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ActivationContext");
            return new ActivationContext(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ApplicationIdentity getApplicationIdentity() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ApplicationIdentity");
            return new ApplicationIdentity(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ApplicationTrust getApplicationTrust() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ApplicationTrust");
            return new ApplicationTrust(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDynamicDirectory() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("DynamicDirectory");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AppDomainSetup getSetupInformation() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SetupInformation");
            return new AppDomainSetup(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PermissionSet getPermissionSet() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PermissionSet");
            return new PermissionSet(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsFullyTrusted() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsFullyTrusted");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsHomogenous() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsHomogenous");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getId() throws Throwable {
        try {
            return (int)classInstance.Get("Id");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getMonitoringTotalProcessorTime() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("MonitoringTotalProcessorTime");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getMonitoringTotalAllocatedMemorySize() throws Throwable {
        try {
            return (long)classInstance.Get("MonitoringTotalAllocatedMemorySize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getMonitoringSurvivedMemorySize() throws Throwable {
        try {
            return (long)classInstance.Get("MonitoringSurvivedMemorySize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AppDomain getCurrentDomain() throws Throwable {
        try {
            JCObject val = (JCObject)classType.Get("CurrentDomain");
            return new AppDomain(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getMonitoringIsEnabled() throws Throwable {
        try {
            return (boolean)classType.Get("MonitoringIsEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setMonitoringIsEnabled(boolean MonitoringIsEnabled) throws Throwable {
        try {
            classType.Set("MonitoringIsEnabled", MonitoringIsEnabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static long getMonitoringSurvivedProcessMemorySize() throws Throwable {
        try {
            return (long)classType.Get("MonitoringSurvivedProcessMemorySize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
    public void addAssemblyLoad(AssemblyLoadEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("AssemblyLoad", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeAssemblyLoad(AssemblyLoadEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("AssemblyLoad", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addTypeResolve(ResolveEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("TypeResolve", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeTypeResolve(ResolveEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("TypeResolve", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addResourceResolve(ResolveEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ResourceResolve", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeResourceResolve(ResolveEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ResourceResolve", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addAssemblyResolve(ResolveEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("AssemblyResolve", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeAssemblyResolve(ResolveEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("AssemblyResolve", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addReflectionOnlyAssemblyResolve(ResolveEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ReflectionOnlyAssemblyResolve", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeReflectionOnlyAssemblyResolve(ResolveEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ReflectionOnlyAssemblyResolve", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addProcessExit(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ProcessExit", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeProcessExit(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ProcessExit", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDomainUnload(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DomainUnload", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDomainUnload(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DomainUnload", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addUnhandledException(UnhandledExceptionEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("UnhandledException", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeUnhandledException(UnhandledExceptionEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("UnhandledException", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


}