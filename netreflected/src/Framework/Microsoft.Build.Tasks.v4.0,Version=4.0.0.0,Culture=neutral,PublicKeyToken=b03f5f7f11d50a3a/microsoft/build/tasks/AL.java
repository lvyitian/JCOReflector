/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.build.tasks;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.build.utilities.TaskLoggingHelper;


/**
 * The base .NET class managing Microsoft.Build.Tasks.AL, Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class AL extends NetObject  {
    public static final String assemblyFullName = "Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "Microsoft.Build.Tasks.v4.0";
    public static final String className = "Microsoft.Build.Tasks.AL";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AL(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static AL castFrom(IJCOBridgeReflected from) throws Throwable {
        return new AL(from.getJCOInstance());
    }

    // Constructors section
    
    
    public AL() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.FormatException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public boolean Execute() throws Throwable, system.ArgumentNullException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.ArgumentOutOfRangeException, system.ArgumentException, system.FormatException, system.InvalidOperationException, system.InvalidCastException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.NullReferenceException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.threading.WaitHandleCannotBeOpenedException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.componentmodel.Win32Exception, system.MulticastNotSupportedException, system.RankException, system.security.cryptography.CryptographicException, system.collections.generic.KeyNotFoundException, system.IndexOutOfRangeException, system.threading.SemaphoreFullException {
        try {
            return (boolean)classInstance.Invoke("Execute");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Cancel() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.OperationCanceledException {
        try {
            classInstance.Invoke("Cancel");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public java.lang.String getAlgorithmId() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("AlgorithmId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAlgorithmId(java.lang.String AlgorithmId) throws Throwable {
        try {
            classInstance.Set("AlgorithmId", (Object)AlgorithmId);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getBaseAddress() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("BaseAddress");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBaseAddress(java.lang.String BaseAddress) throws Throwable {
        try {
            classInstance.Set("BaseAddress", (Object)BaseAddress);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getCompanyName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("CompanyName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCompanyName(java.lang.String CompanyName) throws Throwable {
        try {
            classInstance.Set("CompanyName", (Object)CompanyName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getConfiguration() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Configuration");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConfiguration(java.lang.String Configuration) throws Throwable {
        try {
            classInstance.Set("Configuration", (Object)Configuration);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getCopyright() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Copyright");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCopyright(java.lang.String Copyright) throws Throwable {
        try {
            classInstance.Set("Copyright", (Object)Copyright);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getCulture() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Culture");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCulture(java.lang.String Culture) throws Throwable {
        try {
            classInstance.Set("Culture", (Object)Culture);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getDelaySign() throws Throwable {
        try {
            return (boolean)classInstance.Get("DelaySign");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDelaySign(boolean DelaySign) throws Throwable {
        try {
            classInstance.Set("DelaySign", DelaySign);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDescription() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Description");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDescription(java.lang.String Description) throws Throwable {
        try {
            classInstance.Set("Description", (Object)Description);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getEvidenceFile() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("EvidenceFile");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEvidenceFile(java.lang.String EvidenceFile) throws Throwable {
        try {
            classInstance.Set("EvidenceFile", (Object)EvidenceFile);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getFileVersion() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("FileVersion");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFileVersion(java.lang.String FileVersion) throws Throwable {
        try {
            classInstance.Set("FileVersion", (Object)FileVersion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getFlags() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Flags");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFlags(java.lang.String Flags) throws Throwable {
        try {
            classInstance.Set("Flags", (Object)Flags);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getGenerateFullPaths() throws Throwable {
        try {
            return (boolean)classInstance.Get("GenerateFullPaths");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setGenerateFullPaths(boolean GenerateFullPaths) throws Throwable {
        try {
            classInstance.Set("GenerateFullPaths", GenerateFullPaths);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getKeyFile() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("KeyFile");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setKeyFile(java.lang.String KeyFile) throws Throwable {
        try {
            classInstance.Set("KeyFile", (Object)KeyFile);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getKeyContainer() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("KeyContainer");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setKeyContainer(java.lang.String KeyContainer) throws Throwable {
        try {
            classInstance.Set("KeyContainer", (Object)KeyContainer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getMainEntryPoint() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("MainEntryPoint");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMainEntryPoint(java.lang.String MainEntryPoint) throws Throwable {
        try {
            classInstance.Set("MainEntryPoint", (Object)MainEntryPoint);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getPlatform() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Platform");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPlatform(java.lang.String Platform) throws Throwable {
        try {
            classInstance.Set("Platform", (Object)Platform);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getPrefer32Bit() throws Throwable {
        try {
            return (boolean)classInstance.Get("Prefer32Bit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPrefer32Bit(boolean Prefer32Bit) throws Throwable {
        try {
            classInstance.Set("Prefer32Bit", Prefer32Bit);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getProductName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ProductName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setProductName(java.lang.String ProductName) throws Throwable {
        try {
            classInstance.Set("ProductName", (Object)ProductName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getProductVersion() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ProductVersion");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setProductVersion(java.lang.String ProductVersion) throws Throwable {
        try {
            classInstance.Set("ProductVersion", (Object)ProductVersion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getResponseFiles() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("ResponseFiles");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexResponseFiles = 0; indexResponseFiles < resultingArrayList.size(); indexResponseFiles++ ) {
				resultingArray[indexResponseFiles] = (java.lang.String)resultingArrayList.get(indexResponseFiles);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setResponseFiles(java.lang.String[] ResponseFiles) throws Throwable {
        try {
            classInstance.Set("ResponseFiles", (Object)ResponseFiles);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTargetType() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TargetType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTargetType(java.lang.String TargetType) throws Throwable {
        try {
            classInstance.Set("TargetType", (Object)TargetType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTemplateFile() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TemplateFile");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTemplateFile(java.lang.String TemplateFile) throws Throwable {
        try {
            classInstance.Set("TemplateFile", (Object)TemplateFile);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTitle() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Title");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTitle(java.lang.String Title) throws Throwable {
        try {
            classInstance.Set("Title", (Object)Title);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTrademark() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Trademark");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTrademark(java.lang.String Trademark) throws Throwable {
        try {
            classInstance.Set("Trademark", (Object)Trademark);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getVersion() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Version");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setVersion(java.lang.String Version) throws Throwable {
        try {
            classInstance.Set("Version", (Object)Version);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getWin32Icon() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Win32Icon");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setWin32Icon(java.lang.String Win32Icon) throws Throwable {
        try {
            classInstance.Set("Win32Icon", (Object)Win32Icon);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getWin32Resource() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Win32Resource");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setWin32Resource(java.lang.String Win32Resource) throws Throwable {
        try {
            classInstance.Set("Win32Resource", (Object)Win32Resource);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSdkToolsPath() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("SdkToolsPath");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSdkToolsPath(java.lang.String SdkToolsPath) throws Throwable {
        try {
            classInstance.Set("SdkToolsPath", (Object)SdkToolsPath);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TaskLoggingHelper getLog() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Log");
            return new TaskLoggingHelper(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getExitCode() throws Throwable {
        try {
            return (int)classInstance.Get("ExitCode");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getYieldDuringToolExecution() throws Throwable {
        try {
            return (boolean)classInstance.Get("YieldDuringToolExecution");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setYieldDuringToolExecution(boolean YieldDuringToolExecution) throws Throwable {
        try {
            classInstance.Set("YieldDuringToolExecution", YieldDuringToolExecution);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseCommandProcessor() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseCommandProcessor");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseCommandProcessor(boolean UseCommandProcessor) throws Throwable {
        try {
            classInstance.Set("UseCommandProcessor", UseCommandProcessor);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEchoOff() throws Throwable {
        try {
            return (boolean)classInstance.Get("EchoOff");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEchoOff(boolean EchoOff) throws Throwable {
        try {
            classInstance.Set("EchoOff", EchoOff);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getToolExe() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ToolExe");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setToolExe(java.lang.String ToolExe) throws Throwable {
        try {
            classInstance.Set("ToolExe", (Object)ToolExe);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getToolPath() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ToolPath");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setToolPath(java.lang.String ToolPath) throws Throwable {
        try {
            classInstance.Set("ToolPath", (Object)ToolPath);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getEnvironmentVariables() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("EnvironmentVariables");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexEnvironmentVariables = 0; indexEnvironmentVariables < resultingArrayList.size(); indexEnvironmentVariables++ ) {
				resultingArray[indexEnvironmentVariables] = (java.lang.String)resultingArrayList.get(indexEnvironmentVariables);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnvironmentVariables(java.lang.String[] EnvironmentVariables) throws Throwable {
        try {
            classInstance.Set("EnvironmentVariables", (Object)EnvironmentVariables);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getTimeout() throws Throwable {
        try {
            return (int)classInstance.Get("Timeout");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTimeout(int Timeout) throws Throwable {
        try {
            classInstance.Set("Timeout", Timeout);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getStandardOutputImportance() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("StandardOutputImportance");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStandardOutputImportance(java.lang.String StandardOutputImportance) throws Throwable {
        try {
            classInstance.Set("StandardOutputImportance", (Object)StandardOutputImportance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getStandardErrorImportance() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("StandardErrorImportance");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStandardErrorImportance(java.lang.String StandardErrorImportance) throws Throwable {
        try {
            classInstance.Set("StandardErrorImportance", (Object)StandardErrorImportance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getLogStandardErrorAsError() throws Throwable {
        try {
            return (boolean)classInstance.Get("LogStandardErrorAsError");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLogStandardErrorAsError(boolean LogStandardErrorAsError) throws Throwable {
        try {
            classInstance.Set("LogStandardErrorAsError", LogStandardErrorAsError);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}