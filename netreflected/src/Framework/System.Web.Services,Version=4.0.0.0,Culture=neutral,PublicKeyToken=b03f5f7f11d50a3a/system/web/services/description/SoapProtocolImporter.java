/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.web.services.description;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.codedom.CodeCommentStatementCollection;
import system.web.services.description.ServiceDescriptionFormatExtensionCollection;
import system.web.services.description.SoapBinding;
import system.xml.serialization.SoapSchemaImporter;
import system.xml.serialization.XmlSchemaImporter;
import system.xml.serialization.XmlCodeExporter;
import system.xml.serialization.SoapCodeExporter;
import system.web.services.description.ServiceDescriptionCollection;
import system.xml.serialization.XmlSchemas;
import system.codedom.CodeNamespace;
import system.codedom.CodeTypeDeclaration;
import system.web.services.description.ServiceDescriptionImportStyle;
import system.web.services.description.ServiceDescriptionImportWarnings;
import system.xml.serialization.CodeIdentifiers;
import system.web.services.description.Port;
import system.web.services.description.PortType;
import system.web.services.description.Service;
import system.web.services.description.Operation;
import system.web.services.description.OperationBinding;
import system.web.services.description.Message;


/**
 * The base .NET class managing System.Web.Services.Description.SoapProtocolImporter, System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class SoapProtocolImporter extends NetObject  {
    public static final String assemblyFullName = "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Web.Services";
    public static final String className = "System.Web.Services.Description.SoapProtocolImporter";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SoapProtocolImporter(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static SoapProtocolImporter castFrom(IJCOBridgeReflected from) throws Throwable {
        return new SoapProtocolImporter(from.getJCOInstance());
    }

    // Constructors section
    
    
    public SoapProtocolImporter() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.FormatException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public void AddExtensionWarningComments(CodeCommentStatementCollection comments, ServiceDescriptionFormatExtensionCollection extensions) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.FormatException {
        try {
            classInstance.Invoke("AddExtensionWarningComments", (Object)comments.getJCOInstance(), (Object)extensions.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UnsupportedBindingWarning(java.lang.String text) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException {
        try {
            classInstance.Invoke("UnsupportedBindingWarning", (Object)text);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UnsupportedOperationWarning(java.lang.String text) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException {
        try {
            classInstance.Invoke("UnsupportedOperationWarning", (Object)text);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UnsupportedOperationBindingWarning(java.lang.String text) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException {
        try {
            classInstance.Invoke("UnsupportedOperationBindingWarning", (Object)text);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetException OperationSyntaxException(java.lang.String text) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException {
        try {
            JCObject objOperationSyntaxException = (JCObject)classInstance.Invoke("OperationSyntaxException", (Object)text);
            return new NetException(objOperationSyntaxException);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetException OperationBindingSyntaxException(java.lang.String text) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException {
        try {
            JCObject objOperationBindingSyntaxException = (JCObject)classInstance.Invoke("OperationBindingSyntaxException", (Object)text);
            return new NetException(objOperationBindingSyntaxException);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public java.lang.String getProtocolName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ProtocolName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SoapBinding getSoapBinding() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SoapBinding");
            return new SoapBinding(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SoapSchemaImporter getSoapImporter() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SoapImporter");
            return new SoapSchemaImporter(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlSchemaImporter getXmlImporter() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("XmlImporter");
            return new XmlSchemaImporter(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlCodeExporter getXmlExporter() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("XmlExporter");
            return new XmlCodeExporter(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SoapCodeExporter getSoapExporter() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SoapExporter");
            return new SoapCodeExporter(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ServiceDescriptionCollection getServiceDescriptions() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ServiceDescriptions");
            return new ServiceDescriptionCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlSchemas getSchemas() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Schemas");
            return new XmlSchemas(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlSchemas getAbstractSchemas() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AbstractSchemas");
            return new XmlSchemas(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlSchemas getConcreteSchemas() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ConcreteSchemas");
            return new XmlSchemas(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeNamespace getCodeNamespace() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CodeNamespace");
            return new CodeNamespace(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeTypeDeclaration getCodeTypeDeclaration() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CodeTypeDeclaration");
            return new CodeTypeDeclaration(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ServiceDescriptionImportStyle getStyle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Style");
            return new ServiceDescriptionImportStyle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ServiceDescriptionImportWarnings getWarnings() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Warnings");
            return new ServiceDescriptionImportWarnings(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setWarnings(ServiceDescriptionImportWarnings Warnings) throws Throwable {
        try {
            classInstance.Set("Warnings", (Object)Warnings.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeIdentifiers getClassNames() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ClassNames");
            return new CodeIdentifiers(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getMethodName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("MethodName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getClassName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ClassName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Port getPort() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Port");
            return new Port(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PortType getPortType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PortType");
            return new PortType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public system.web.services.description.Binding getBinding() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Binding");
            return new system.web.services.description.Binding(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Service getService() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Service");
            return new Service(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Operation getOperation() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Operation");
            return new Operation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OperationBinding getOperationBinding() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("OperationBinding");
            return new OperationBinding(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message getInputMessage() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("InputMessage");
            return new Message(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message getOutputMessage() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("OutputMessage");
            return new Message(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}