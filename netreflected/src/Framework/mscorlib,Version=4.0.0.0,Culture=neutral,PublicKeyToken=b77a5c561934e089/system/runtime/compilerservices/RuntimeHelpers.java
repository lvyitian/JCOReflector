/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.runtime.compilerservices;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.RuntimeTypeHandle;
import system.ModuleHandle;
import system.RuntimeMethodHandle;
import system.Array;
import system.RuntimeFieldHandle;


/**
 * The base .NET class managing System.Runtime.CompilerServices.RuntimeHelpers, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class RuntimeHelpers extends NetObject  {
    public static final String assemblyFullName = "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "mscorlib";
    public static final String className = "System.Runtime.CompilerServices.RuntimeHelpers";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RuntimeHelpers(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static RuntimeHelpers castFrom(IJCOBridgeReflected from) throws Throwable {
        return new RuntimeHelpers(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public static void RunClassConstructor(RuntimeTypeHandle type) throws Throwable {
        try {
            classType.Invoke("RunClassConstructor", (Object)type.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void RunModuleConstructor(ModuleHandle module) throws Throwable {
        try {
            classType.Invoke("RunModuleConstructor", (Object)module.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void PrepareMethod(RuntimeMethodHandle method) throws Throwable {
        try {
            classType.Invoke("PrepareMethod", (Object)method.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void PrepareMethod(RuntimeMethodHandle method, RuntimeTypeHandle[] instantiation) throws Throwable {
        try {
            classType.Invoke("PrepareMethod", (Object)method.getJCOInstance(), (Object)toObjectFromArray(instantiation));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void PrepareConstrainedRegions() throws Throwable {
        try {
            classType.Invoke("PrepareConstrainedRegions");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void PrepareConstrainedRegionsNoOP() throws Throwable {
        try {
            classType.Invoke("PrepareConstrainedRegionsNoOP");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void InitializeArray(Array array, RuntimeFieldHandle fldHandle) throws Throwable {
        try {
            classType.Invoke("InitializeArray", (Object)array.getJCOInstance(), (Object)fldHandle.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject GetObjectValue(NetObject obj) throws Throwable {
        try {
            JCObject objGetObjectValue = (JCObject)classType.Invoke("GetObjectValue", (Object)obj.getJCOInstance());
            return new NetObject(objGetObjectValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int GetHashCode(NetObject o) throws Throwable {
        try {
            return (int)classType.Invoke("GetHashCode", (Object)o.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean Equals(NetObject o1, NetObject o2) throws Throwable {
        try {
            return (boolean)classType.Invoke("Equals", (Object)o1.getJCOInstance(), (Object)o2.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void EnsureSufficientExecutionStack() throws Throwable {
        try {
            classType.Invoke("EnsureSufficientExecutionStack");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void ProbeForSufficientStack() throws Throwable {
        try {
            classType.Invoke("ProbeForSufficientStack");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public static int getOffsetToStringData() throws Throwable {
        try {
            return (int)classType.Get("OffsetToStringData");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}