/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.data.spatial;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.data.spatial.DbGeometry;
import system.data.spatial.DbGeometryWellKnownValue;


/**
 * The base .NET class managing System.Data.Spatial.DbGeometry, System.Data.Entity, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class DbGeometry extends NetObject  {
    public static final String assemblyFullName = "System.Data.Entity, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "System.Data.Entity";
    public static final String className = "System.Data.Spatial.DbGeometry";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static DbGeometry castFrom(IJCOBridgeReflected from) throws Throwable {
        return new DbGeometry(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public static DbGeometry FromBinary(byte[] wellKnownBinary) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objFromBinary = (JCObject)classType.Invoke("FromBinary", wellKnownBinary);
            return new DbGeometry(objFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbGeometry FromBinary(byte[] wellKnownBinary, int coordinateSystemId) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objFromBinary = (JCObject)classType.Invoke("FromBinary", wellKnownBinary, coordinateSystemId);
            return new DbGeometry(objFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbGeometry LineFromBinary(byte[] lineWellKnownBinary, int coordinateSystemId) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objLineFromBinary = (JCObject)classType.Invoke("LineFromBinary", lineWellKnownBinary, coordinateSystemId);
            return new DbGeometry(objLineFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbGeometry PointFromBinary(byte[] pointWellKnownBinary, int coordinateSystemId) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objPointFromBinary = (JCObject)classType.Invoke("PointFromBinary", pointWellKnownBinary, coordinateSystemId);
            return new DbGeometry(objPointFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbGeometry PolygonFromBinary(byte[] polygonWellKnownBinary, int coordinateSystemId) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objPolygonFromBinary = (JCObject)classType.Invoke("PolygonFromBinary", polygonWellKnownBinary, coordinateSystemId);
            return new DbGeometry(objPolygonFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbGeometry MultiLineFromBinary(byte[] multiLineWellKnownBinary, int coordinateSystemId) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objMultiLineFromBinary = (JCObject)classType.Invoke("MultiLineFromBinary", multiLineWellKnownBinary, coordinateSystemId);
            return new DbGeometry(objMultiLineFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbGeometry MultiPointFromBinary(byte[] multiPointWellKnownBinary, int coordinateSystemId) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objMultiPointFromBinary = (JCObject)classType.Invoke("MultiPointFromBinary", multiPointWellKnownBinary, coordinateSystemId);
            return new DbGeometry(objMultiPointFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbGeometry MultiPolygonFromBinary(byte[] multiPolygonWellKnownBinary, int coordinateSystemId) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objMultiPolygonFromBinary = (JCObject)classType.Invoke("MultiPolygonFromBinary", multiPolygonWellKnownBinary, coordinateSystemId);
            return new DbGeometry(objMultiPolygonFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbGeometry GeometryCollectionFromBinary(byte[] geometryCollectionWellKnownBinary, int coordinateSystemId) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objGeometryCollectionFromBinary = (JCObject)classType.Invoke("GeometryCollectionFromBinary", geometryCollectionWellKnownBinary, coordinateSystemId);
            return new DbGeometry(objGeometryCollectionFromBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbGeometry FromGml(java.lang.String geometryMarkup) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objFromGml = (JCObject)classType.Invoke("FromGml", (Object)geometryMarkup);
            return new DbGeometry(objFromGml);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbGeometry FromGml(java.lang.String geometryMarkup, int coordinateSystemId) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objFromGml = (JCObject)classType.Invoke("FromGml", (Object)geometryMarkup, coordinateSystemId);
            return new DbGeometry(objFromGml);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbGeometry FromText(java.lang.String wellKnownText) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objFromText = (JCObject)classType.Invoke("FromText", (Object)wellKnownText);
            return new DbGeometry(objFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbGeometry FromText(java.lang.String wellKnownText, int coordinateSystemId) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objFromText = (JCObject)classType.Invoke("FromText", (Object)wellKnownText, coordinateSystemId);
            return new DbGeometry(objFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbGeometry LineFromText(java.lang.String lineWellKnownText, int coordinateSystemId) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objLineFromText = (JCObject)classType.Invoke("LineFromText", (Object)lineWellKnownText, coordinateSystemId);
            return new DbGeometry(objLineFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbGeometry PointFromText(java.lang.String pointWellKnownText, int coordinateSystemId) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objPointFromText = (JCObject)classType.Invoke("PointFromText", (Object)pointWellKnownText, coordinateSystemId);
            return new DbGeometry(objPointFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbGeometry PolygonFromText(java.lang.String polygonWellKnownText, int coordinateSystemId) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objPolygonFromText = (JCObject)classType.Invoke("PolygonFromText", (Object)polygonWellKnownText, coordinateSystemId);
            return new DbGeometry(objPolygonFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbGeometry MultiLineFromText(java.lang.String multiLineWellKnownText, int coordinateSystemId) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objMultiLineFromText = (JCObject)classType.Invoke("MultiLineFromText", (Object)multiLineWellKnownText, coordinateSystemId);
            return new DbGeometry(objMultiLineFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbGeometry MultiPointFromText(java.lang.String multiPointWellKnownText, int coordinateSystemId) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objMultiPointFromText = (JCObject)classType.Invoke("MultiPointFromText", (Object)multiPointWellKnownText, coordinateSystemId);
            return new DbGeometry(objMultiPointFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbGeometry MultiPolygonFromText(java.lang.String multiPolygonWellKnownText, int coordinateSystemId) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objMultiPolygonFromText = (JCObject)classType.Invoke("MultiPolygonFromText", (Object)multiPolygonWellKnownText, coordinateSystemId);
            return new DbGeometry(objMultiPolygonFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbGeometry GeometryCollectionFromText(java.lang.String geometryCollectionWellKnownText, int coordinateSystemId) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objGeometryCollectionFromText = (JCObject)classType.Invoke("GeometryCollectionFromText", (Object)geometryCollectionWellKnownText, coordinateSystemId);
            return new DbGeometry(objGeometryCollectionFromText);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String AsText() throws Throwable {
        try {
            return (java.lang.String)classInstance.Invoke("AsText");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] AsBinary() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("AsBinary");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexAsBinary = 0; indexAsBinary < resultingArrayList.size(); indexAsBinary++ ) {
				resultingArray[indexAsBinary] = (byte)resultingArrayList.get(indexAsBinary);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String AsGml() throws Throwable {
        try {
            return (java.lang.String)classInstance.Invoke("AsGml");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean SpatialEquals(DbGeometry other) throws Throwable, system.ArgumentNullException {
        try {
            return (boolean)classInstance.Invoke("SpatialEquals", (Object)other.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Disjoint(DbGeometry other) throws Throwable, system.ArgumentNullException {
        try {
            return (boolean)classInstance.Invoke("Disjoint", (Object)other.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Intersects(DbGeometry other) throws Throwable, system.ArgumentNullException {
        try {
            return (boolean)classInstance.Invoke("Intersects", (Object)other.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Touches(DbGeometry other) throws Throwable, system.ArgumentNullException {
        try {
            return (boolean)classInstance.Invoke("Touches", (Object)other.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Crosses(DbGeometry other) throws Throwable, system.ArgumentNullException {
        try {
            return (boolean)classInstance.Invoke("Crosses", (Object)other.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Within(DbGeometry other) throws Throwable, system.ArgumentNullException {
        try {
            return (boolean)classInstance.Invoke("Within", (Object)other.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Contains(DbGeometry other) throws Throwable, system.ArgumentNullException {
        try {
            return (boolean)classInstance.Invoke("Contains", (Object)other.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Overlaps(DbGeometry other) throws Throwable, system.ArgumentNullException {
        try {
            return (boolean)classInstance.Invoke("Overlaps", (Object)other.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Relate(DbGeometry other, java.lang.String matrix) throws Throwable, system.ArgumentNullException {
        try {
            return (boolean)classInstance.Invoke("Relate", (Object)other.getJCOInstance(), (Object)matrix);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry Intersection(DbGeometry other) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objIntersection = (JCObject)classInstance.Invoke("Intersection", (Object)other.getJCOInstance());
            return new DbGeometry(objIntersection);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry Union(DbGeometry other) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objUnion = (JCObject)classInstance.Invoke("Union", (Object)other.getJCOInstance());
            return new DbGeometry(objUnion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry Difference(DbGeometry other) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objDifference = (JCObject)classInstance.Invoke("Difference", (Object)other.getJCOInstance());
            return new DbGeometry(objDifference);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry SymmetricDifference(DbGeometry other) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objSymmetricDifference = (JCObject)classInstance.Invoke("SymmetricDifference", (Object)other.getJCOInstance());
            return new DbGeometry(objSymmetricDifference);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry ElementAt(int index) throws Throwable {
        try {
            JCObject objElementAt = (JCObject)classInstance.Invoke("ElementAt", index);
            return new DbGeometry(objElementAt);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry PointAt(int index) throws Throwable {
        try {
            JCObject objPointAt = (JCObject)classInstance.Invoke("PointAt", index);
            return new DbGeometry(objPointAt);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry InteriorRingAt(int index) throws Throwable {
        try {
            JCObject objInteriorRingAt = (JCObject)classInstance.Invoke("InteriorRingAt", index);
            return new DbGeometry(objInteriorRingAt);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public NetObject getProviderValue() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ProviderValue");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometryWellKnownValue getWellKnownValue() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("WellKnownValue");
            return new DbGeometryWellKnownValue(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setWellKnownValue(DbGeometryWellKnownValue WellKnownValue) throws Throwable {
        try {
            classInstance.Set("WellKnownValue", (Object)WellKnownValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getCoordinateSystemId() throws Throwable {
        try {
            return (int)classInstance.Get("CoordinateSystemId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry getBoundary() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Boundary");
            return new DbGeometry(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getDimension() throws Throwable {
        try {
            return (int)classInstance.Get("Dimension");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry getEnvelope() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Envelope");
            return new DbGeometry(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSpatialTypeName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("SpatialTypeName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsEmpty() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsEmpty");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsSimple() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsSimple");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsValid() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsValid");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry getConvexHull() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ConvexHull");
            return new DbGeometry(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry getStartPoint() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("StartPoint");
            return new DbGeometry(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry getEndPoint() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("EndPoint");
            return new DbGeometry(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry getCentroid() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Centroid");
            return new DbGeometry(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry getPointOnSurface() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PointOnSurface");
            return new DbGeometry(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbGeometry getExteriorRing() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ExteriorRing");
            return new DbGeometry(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int getDefaultCoordinateSystemId() throws Throwable {
        try {
            return (int)classType.Get("DefaultCoordinateSystemId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}