/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.configuration;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.configuration.ConfigurationSection;
import system.configuration.ConfigurationAllowDefinition;
import system.configuration.ConfigurationAllowExeDefinition;
import system.configuration.OverrideMode;
import system.configuration.ProtectedConfigurationProvider;


/**
 * The base .NET class managing System.Configuration.SectionInformation, System.Configuration.ConfigurationManager, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51. Extends {@link NetObject}.
 */
public class SectionInformation extends NetObject  {
    public static final String assemblyFullName = "System.Configuration.ConfigurationManager, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51";
	public static final String assemblyShortName = "System.Configuration.ConfigurationManager";
    public static final String className = "System.Configuration.SectionInformation";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SectionInformation(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static SectionInformation castFrom(IJCOBridgeReflected from) throws Throwable {
        return new SectionInformation(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public void ForceDeclaration() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.PlatformNotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.ArrayTypeMismatchException, system.configuration.ConfigurationErrorsException {
        try {
            classInstance.Invoke("ForceDeclaration");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ForceDeclaration(boolean force) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.PlatformNotSupportedException, system.configuration.ConfigurationErrorsException {
        try {
            classInstance.Invoke("ForceDeclaration", force);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ProtectSection(java.lang.String protectionProvider) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.ApplicationException, system.OutOfMemoryException, system.NotSupportedException, system.configuration.ConfigurationException {
        try {
            classInstance.Invoke("ProtectSection", (Object)protectionProvider);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UnprotectSection() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        try {
            classInstance.Invoke("UnprotectSection");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConfigurationSection GetParentSection() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ObjectDisposedException, system.configuration.ConfigurationErrorsException, system.PlatformNotSupportedException {
        try {
            JCObject objGetParentSection = (JCObject)classInstance.Invoke("GetParentSection");
            return new ConfigurationSection(objGetParentSection);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetRawXml() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ObjectDisposedException, system.configuration.ConfigurationErrorsException, system.PlatformNotSupportedException, system.xml.XmlException, system.OutOfMemoryException, system.NotSupportedException, system.IndexOutOfRangeException, system.configuration.ConfigurationException {
        try {
            return (java.lang.String)classInstance.Invoke("GetRawXml");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetRawXml(java.lang.String rawXml) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.IndexOutOfRangeException, system.reflection.AmbiguousMatchException, system.collections.generic.KeyNotFoundException, system.configuration.ConfigurationException, system.xml.XmlException, system.FormatException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("SetRawXml", (Object)rawXml);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RevertToParent() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.reflection.AmbiguousMatchException, system.collections.generic.KeyNotFoundException, system.configuration.ConfigurationException {
        try {
            classInstance.Invoke("RevertToParent");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public java.lang.String getSectionName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("SectionName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Name");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setName(java.lang.String Name) throws Throwable {
        try {
            classInstance.Set("Name", (Object)Name);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConfigurationAllowDefinition getAllowDefinition() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AllowDefinition");
            return new ConfigurationAllowDefinition(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowDefinition(ConfigurationAllowDefinition AllowDefinition) throws Throwable {
        try {
            classInstance.Set("AllowDefinition", (Object)AllowDefinition.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConfigurationAllowExeDefinition getAllowExeDefinition() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AllowExeDefinition");
            return new ConfigurationAllowExeDefinition(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowExeDefinition(ConfigurationAllowExeDefinition AllowExeDefinition) throws Throwable {
        try {
            classInstance.Set("AllowExeDefinition", (Object)AllowExeDefinition.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OverrideMode getOverrideModeDefault() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("OverrideModeDefault");
            return new OverrideMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setOverrideModeDefault(OverrideMode OverrideModeDefault) throws Throwable {
        try {
            classInstance.Set("OverrideModeDefault", (Object)OverrideModeDefault.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowLocation() throws Throwable {
        try {
            return (boolean)classInstance.Get("AllowLocation");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowLocation(boolean AllowLocation) throws Throwable {
        try {
            classInstance.Set("AllowLocation", AllowLocation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowOverride() throws Throwable {
        try {
            return (boolean)classInstance.Get("AllowOverride");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowOverride(boolean AllowOverride) throws Throwable {
        try {
            classInstance.Set("AllowOverride", AllowOverride);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OverrideMode getOverrideMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("OverrideMode");
            return new OverrideMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setOverrideMode(OverrideMode OverrideMode) throws Throwable {
        try {
            classInstance.Set("OverrideMode", (Object)OverrideMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OverrideMode getOverrideModeEffective() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("OverrideModeEffective");
            return new OverrideMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getConfigSource() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ConfigSource");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConfigSource(java.lang.String ConfigSource) throws Throwable {
        try {
            classInstance.Set("ConfigSource", (Object)ConfigSource);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getInheritInChildApplications() throws Throwable {
        try {
            return (boolean)classInstance.Get("InheritInChildApplications");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInheritInChildApplications(boolean InheritInChildApplications) throws Throwable {
        try {
            classInstance.Set("InheritInChildApplications", InheritInChildApplications);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsDeclared() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsDeclared");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsDeclarationRequired() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsDeclarationRequired");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsLocked() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsLocked");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsProtected() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsProtected");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ProtectedConfigurationProvider getProtectionProvider() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ProtectionProvider");
            return new ProtectedConfigurationProvider(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRestartOnExternalChanges() throws Throwable {
        try {
            return (boolean)classInstance.Get("RestartOnExternalChanges");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRestartOnExternalChanges(boolean RestartOnExternalChanges) throws Throwable {
        try {
            classInstance.Set("RestartOnExternalChanges", RestartOnExternalChanges);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRequirePermission() throws Throwable {
        try {
            return (boolean)classInstance.Get("RequirePermission");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRequirePermission(boolean RequirePermission) throws Throwable {
        try {
            classInstance.Set("RequirePermission", RequirePermission);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getType() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Type");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setType(java.lang.String Type) throws Throwable {
        try {
            classInstance.Set("Type", (Object)Type);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getForceSave() throws Throwable {
        try {
            return (boolean)classInstance.Get("ForceSave");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setForceSave(boolean ForceSave) throws Throwable {
        try {
            classInstance.Set("ForceSave", ForceSave);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}