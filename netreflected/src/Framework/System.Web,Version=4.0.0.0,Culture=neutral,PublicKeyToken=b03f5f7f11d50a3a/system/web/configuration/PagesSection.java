/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.web.configuration;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.web.configuration.PagesEnableSessionState;
import system.web.configuration.NamespaceCollection;
import system.web.configuration.TagPrefixCollection;
import system.web.configuration.TagMapCollection;
import system.web.ui.CompilationMode;
import system.web.ui.ViewStateEncryptionMode;
import system.TimeSpan;
import system.web.ui.ClientIDMode;
import system.Version;
import system.web.configuration.IgnoreDeviceFilterElementCollection;
import system.configuration.SectionInformation;
import system.configuration.ConfigurationLockCollection;
import system.configuration.ElementInformation;
import system.configuration.Configuration;


/**
 * The base .NET class managing System.Web.Configuration.PagesSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class PagesSection extends NetObject  {
    public static final String assemblyFullName = "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Web";
    public static final String className = "System.Web.Configuration.PagesSection";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PagesSection(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static PagesSection castFrom(IJCOBridgeReflected from) throws Throwable {
        return new PagesSection(from.getJCOInstance());
    }

    // Constructors section
    
    
    public PagesSection() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.collections.generic.KeyNotFoundException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public boolean IsReadOnly() throws Throwable {
        try {
            return (boolean)classInstance.Invoke("IsReadOnly");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public boolean getBuffer() throws Throwable {
        try {
            return (boolean)classInstance.Get("Buffer");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBuffer(boolean Buffer) throws Throwable {
        try {
            classInstance.Set("Buffer", Buffer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PagesEnableSessionState getEnableSessionState() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("EnableSessionState");
            return new PagesEnableSessionState(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnableSessionState(PagesEnableSessionState EnableSessionState) throws Throwable {
        try {
            classInstance.Set("EnableSessionState", (Object)EnableSessionState.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnableViewState() throws Throwable {
        try {
            return (boolean)classInstance.Get("EnableViewState");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnableViewState(boolean EnableViewState) throws Throwable {
        try {
            classInstance.Set("EnableViewState", EnableViewState);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnableViewStateMac() throws Throwable {
        try {
            return (boolean)classInstance.Get("EnableViewStateMac");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnableViewStateMac(boolean EnableViewStateMac) throws Throwable {
        try {
            classInstance.Set("EnableViewStateMac", EnableViewStateMac);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnableEventValidation() throws Throwable {
        try {
            return (boolean)classInstance.Get("EnableEventValidation");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnableEventValidation(boolean EnableEventValidation) throws Throwable {
        try {
            classInstance.Set("EnableEventValidation", EnableEventValidation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSmartNavigation() throws Throwable {
        try {
            return (boolean)classInstance.Get("SmartNavigation");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSmartNavigation(boolean SmartNavigation) throws Throwable {
        try {
            classInstance.Set("SmartNavigation", SmartNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAutoEventWireup() throws Throwable {
        try {
            return (boolean)classInstance.Get("AutoEventWireup");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutoEventWireup(boolean AutoEventWireup) throws Throwable {
        try {
            classInstance.Set("AutoEventWireup", AutoEventWireup);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getMaintainScrollPositionOnPostBack() throws Throwable {
        try {
            return (boolean)classInstance.Get("MaintainScrollPositionOnPostBack");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaintainScrollPositionOnPostBack(boolean MaintainScrollPositionOnPostBack) throws Throwable {
        try {
            classInstance.Set("MaintainScrollPositionOnPostBack", MaintainScrollPositionOnPostBack);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getPageBaseType() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("PageBaseType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPageBaseType(java.lang.String PageBaseType) throws Throwable {
        try {
            classInstance.Set("PageBaseType", (Object)PageBaseType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getUserControlBaseType() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("UserControlBaseType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUserControlBaseType(java.lang.String UserControlBaseType) throws Throwable {
        try {
            classInstance.Set("UserControlBaseType", (Object)UserControlBaseType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getPageParserFilterType() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("PageParserFilterType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPageParserFilterType(java.lang.String PageParserFilterType) throws Throwable {
        try {
            classInstance.Set("PageParserFilterType", (Object)PageParserFilterType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getValidateRequest() throws Throwable {
        try {
            return (boolean)classInstance.Get("ValidateRequest");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setValidateRequest(boolean ValidateRequest) throws Throwable {
        try {
            classInstance.Set("ValidateRequest", ValidateRequest);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getMasterPageFile() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("MasterPageFile");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMasterPageFile(java.lang.String MasterPageFile) throws Throwable {
        try {
            classInstance.Set("MasterPageFile", (Object)MasterPageFile);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTheme() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Theme");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTheme(java.lang.String Theme) throws Throwable {
        try {
            classInstance.Set("Theme", (Object)Theme);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getStyleSheetTheme() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("StyleSheetTheme");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStyleSheetTheme(java.lang.String StyleSheetTheme) throws Throwable {
        try {
            classInstance.Set("StyleSheetTheme", (Object)StyleSheetTheme);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NamespaceCollection getNamespaces() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Namespaces");
            return new NamespaceCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TagPrefixCollection getControls() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Controls");
            return new TagPrefixCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMaxPageStateFieldLength() throws Throwable {
        try {
            return (int)classInstance.Get("MaxPageStateFieldLength");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaxPageStateFieldLength(int MaxPageStateFieldLength) throws Throwable {
        try {
            classInstance.Set("MaxPageStateFieldLength", MaxPageStateFieldLength);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TagMapCollection getTagMapping() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("TagMapping");
            return new TagMapCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CompilationMode getCompilationMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CompilationMode");
            return new CompilationMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCompilationMode(CompilationMode CompilationMode) throws Throwable {
        try {
            classInstance.Set("CompilationMode", (Object)CompilationMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ViewStateEncryptionMode getViewStateEncryptionMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ViewStateEncryptionMode");
            return new ViewStateEncryptionMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setViewStateEncryptionMode(ViewStateEncryptionMode ViewStateEncryptionMode) throws Throwable {
        try {
            classInstance.Set("ViewStateEncryptionMode", (Object)ViewStateEncryptionMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getAsyncTimeout() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AsyncTimeout");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAsyncTimeout(TimeSpan AsyncTimeout) throws Throwable {
        try {
            classInstance.Set("AsyncTimeout", (Object)AsyncTimeout.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRenderAllHiddenFieldsAtTopOfForm() throws Throwable {
        try {
            return (boolean)classInstance.Get("RenderAllHiddenFieldsAtTopOfForm");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRenderAllHiddenFieldsAtTopOfForm(boolean RenderAllHiddenFieldsAtTopOfForm) throws Throwable {
        try {
            classInstance.Set("RenderAllHiddenFieldsAtTopOfForm", RenderAllHiddenFieldsAtTopOfForm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ClientIDMode getClientIDMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ClientIDMode");
            return new ClientIDMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setClientIDMode(ClientIDMode ClientIDMode) throws Throwable {
        try {
            classInstance.Set("ClientIDMode", (Object)ClientIDMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Version getControlRenderingCompatibilityVersion() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ControlRenderingCompatibilityVersion");
            return new Version(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setControlRenderingCompatibilityVersion(Version ControlRenderingCompatibilityVersion) throws Throwable {
        try {
            classInstance.Set("ControlRenderingCompatibilityVersion", (Object)ControlRenderingCompatibilityVersion.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IgnoreDeviceFilterElementCollection getIgnoreDeviceFilters() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("IgnoreDeviceFilters");
            return new IgnoreDeviceFilterElementCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SectionInformation getSectionInformation() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SectionInformation");
            return new SectionInformation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConfigurationLockCollection getLockAttributes() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LockAttributes");
            return new ConfigurationLockCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConfigurationLockCollection getLockAllAttributesExcept() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LockAllAttributesExcept");
            return new ConfigurationLockCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConfigurationLockCollection getLockElements() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LockElements");
            return new ConfigurationLockCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConfigurationLockCollection getLockAllElementsExcept() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LockAllElementsExcept");
            return new ConfigurationLockCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getLockItem() throws Throwable {
        try {
            return (boolean)classInstance.Get("LockItem");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLockItem(boolean LockItem) throws Throwable {
        try {
            classInstance.Set("LockItem", LockItem);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ElementInformation getElementInformation() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ElementInformation");
            return new ElementInformation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Configuration getCurrentConfiguration() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CurrentConfiguration");
            return new Configuration(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}