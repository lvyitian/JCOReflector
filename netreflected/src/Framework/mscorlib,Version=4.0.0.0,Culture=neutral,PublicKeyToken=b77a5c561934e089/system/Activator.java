/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.reflection.BindingFlags;
import system.reflection.Binder;
import system.globalization.CultureInfo;
import system.runtime.remoting.ObjectHandle;
import system.security.policy.Evidence;
import system.AppDomain;
import system.ActivationContext;
import system.configuration.assemblies.AssemblyHashAlgorithm;


/**
 * The base .NET class managing System.Activator, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class Activator extends NetObject  {
    public static final String assemblyFullName = "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "mscorlib";
    public static final String className = "System.Activator";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Activator(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static Activator castFrom(IJCOBridgeReflected from) throws Throwable {
        return new Activator(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public static NetObject CreateInstance(NetType type, BindingFlags bindingAttr, Binder binder, NetObject[] args, CultureInfo culture) throws Throwable, system.ArgumentNullException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.MissingMethodException {
        try {
            JCObject objCreateInstance = (JCObject)classType.Invoke("CreateInstance", (Object)type.getJCOInstance(), (Object)bindingAttr.getJCOInstance(), (Object)binder.getJCOInstance(), (Object)toObjectFromArray(args), (Object)culture.getJCOInstance());
            return new NetObject(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject CreateInstance(NetType type, BindingFlags bindingAttr, Binder binder, NetObject[] args, CultureInfo culture, NetObject[] activationAttributes) throws Throwable, system.ArgumentNullException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentOutOfRangeException, system.FormatException {
        try {
            JCObject objCreateInstance = (JCObject)classType.Invoke("CreateInstance", (Object)type.getJCOInstance(), (Object)bindingAttr.getJCOInstance(), (Object)binder.getJCOInstance(), (Object)toObjectFromArray(args), (Object)culture.getJCOInstance(), (Object)toObjectFromArray(activationAttributes));
            return new NetObject(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject CreateInstance(NetType type, NetObject... args) throws Throwable, system.ArgumentNullException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.MissingMethodException {
        try {
            JCObject objCreateInstance = (JCObject)classType.Invoke("CreateInstance", (Object)type.getJCOInstance(), (Object[])toObjectFromArray(args));
            return new NetObject(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject CreateInstance(NetType type, NetObject[] args, NetObject[] activationAttributes) throws Throwable, system.ArgumentNullException, system.NotSupportedException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.MissingMethodException {
        try {
            JCObject objCreateInstance = (JCObject)classType.Invoke("CreateInstance", (Object)type.getJCOInstance(), (Object)toObjectFromArray(args), (Object)toObjectFromArray(activationAttributes));
            return new NetObject(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject CreateInstance(NetType type) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.NotSupportedException, system.security.SecurityException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException {
        try {
            JCObject objCreateInstance = (JCObject)classType.Invoke("CreateInstance", (Object)type.getJCOInstance());
            return new NetObject(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectHandle CreateInstance(java.lang.String assemblyName, java.lang.String typeName) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.IndexOutOfRangeException, system.io.PathTooLongException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException {
        try {
            JCObject objCreateInstance = (JCObject)classType.Invoke("CreateInstance", (Object)assemblyName, (Object)typeName);
            return new ObjectHandle(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectHandle CreateInstance(java.lang.String assemblyName, java.lang.String typeName, NetObject[] activationAttributes) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.IndexOutOfRangeException, system.io.PathTooLongException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException {
        try {
            JCObject objCreateInstance = (JCObject)classType.Invoke("CreateInstance", (Object)assemblyName, (Object)typeName, (Object)toObjectFromArray(activationAttributes));
            return new ObjectHandle(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject CreateInstance(NetType type, boolean nonPublic) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.NotSupportedException, system.MissingMethodException, system.security.SecurityException, system.reflection.TargetInvocationException, system.NotImplementedException, system.IndexOutOfRangeException {
        try {
            JCObject objCreateInstance = (JCObject)classType.Invoke("CreateInstance", (Object)type.getJCOInstance(), nonPublic);
            return new NetObject(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectHandle CreateInstanceFrom(java.lang.String assemblyFile, java.lang.String typeName) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.ArgumentOutOfRangeException {
        try {
            JCObject objCreateInstanceFrom = (JCObject)classType.Invoke("CreateInstanceFrom", (Object)assemblyFile, (Object)typeName);
            return new ObjectHandle(objCreateInstanceFrom);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectHandle CreateInstanceFrom(java.lang.String assemblyFile, java.lang.String typeName, NetObject[] activationAttributes) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.FormatException {
        try {
            JCObject objCreateInstanceFrom = (JCObject)classType.Invoke("CreateInstanceFrom", (Object)assemblyFile, (Object)typeName, (Object)toObjectFromArray(activationAttributes));
            return new ObjectHandle(objCreateInstanceFrom);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectHandle CreateInstance(java.lang.String assemblyName, java.lang.String typeName, boolean ignoreCase, BindingFlags bindingAttr, Binder binder, NetObject[] args, CultureInfo culture, NetObject[] activationAttributes, Evidence securityInfo) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.IndexOutOfRangeException, system.io.PathTooLongException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException {
        try {
            JCObject objCreateInstance = (JCObject)classType.Invoke("CreateInstance", (Object)assemblyName, (Object)typeName, ignoreCase, (Object)bindingAttr.getJCOInstance(), (Object)binder.getJCOInstance(), (Object)toObjectFromArray(args), (Object)culture.getJCOInstance(), (Object)toObjectFromArray(activationAttributes), (Object)securityInfo.getJCOInstance());
            return new ObjectHandle(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectHandle CreateInstance(java.lang.String assemblyName, java.lang.String typeName, boolean ignoreCase, BindingFlags bindingAttr, Binder binder, NetObject[] args, CultureInfo culture, NetObject[] activationAttributes) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.IndexOutOfRangeException, system.io.PathTooLongException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException {
        try {
            JCObject objCreateInstance = (JCObject)classType.Invoke("CreateInstance", (Object)assemblyName, (Object)typeName, ignoreCase, (Object)bindingAttr.getJCOInstance(), (Object)binder.getJCOInstance(), (Object)toObjectFromArray(args), (Object)culture.getJCOInstance(), (Object)toObjectFromArray(activationAttributes));
            return new ObjectHandle(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectHandle CreateInstanceFrom(java.lang.String assemblyFile, java.lang.String typeName, boolean ignoreCase, BindingFlags bindingAttr, Binder binder, NetObject[] args, CultureInfo culture, NetObject[] activationAttributes, Evidence securityInfo) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.FormatException {
        try {
            JCObject objCreateInstanceFrom = (JCObject)classType.Invoke("CreateInstanceFrom", (Object)assemblyFile, (Object)typeName, ignoreCase, (Object)bindingAttr.getJCOInstance(), (Object)binder.getJCOInstance(), (Object)toObjectFromArray(args), (Object)culture.getJCOInstance(), (Object)toObjectFromArray(activationAttributes), (Object)securityInfo.getJCOInstance());
            return new ObjectHandle(objCreateInstanceFrom);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectHandle CreateInstanceFrom(java.lang.String assemblyFile, java.lang.String typeName, boolean ignoreCase, BindingFlags bindingAttr, Binder binder, NetObject[] args, CultureInfo culture, NetObject[] activationAttributes) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.FormatException {
        try {
            JCObject objCreateInstanceFrom = (JCObject)classType.Invoke("CreateInstanceFrom", (Object)assemblyFile, (Object)typeName, ignoreCase, (Object)bindingAttr.getJCOInstance(), (Object)binder.getJCOInstance(), (Object)toObjectFromArray(args), (Object)culture.getJCOInstance(), (Object)toObjectFromArray(activationAttributes));
            return new ObjectHandle(objCreateInstanceFrom);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectHandle CreateInstance(AppDomain domain, java.lang.String assemblyName, java.lang.String typeName) throws Throwable, system.ArgumentNullException, system.security.SecurityException, system.NullReferenceException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.IndexOutOfRangeException, system.TypeLoadException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.FormatException {
        try {
            JCObject objCreateInstance = (JCObject)classType.Invoke("CreateInstance", (Object)domain.getJCOInstance(), (Object)assemblyName, (Object)typeName);
            return new ObjectHandle(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectHandle CreateInstance(AppDomain domain, java.lang.String assemblyName, java.lang.String typeName, boolean ignoreCase, BindingFlags bindingAttr, Binder binder, NetObject[] args, CultureInfo culture, NetObject[] activationAttributes, Evidence securityAttributes) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.security.SecurityException, system.NullReferenceException, system.ArgumentException, system.IndexOutOfRangeException, system.TypeLoadException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.FormatException {
        try {
            JCObject objCreateInstance = (JCObject)classType.Invoke("CreateInstance", (Object)domain.getJCOInstance(), (Object)assemblyName, (Object)typeName, ignoreCase, (Object)bindingAttr.getJCOInstance(), (Object)binder.getJCOInstance(), (Object)toObjectFromArray(args), (Object)culture.getJCOInstance(), (Object)toObjectFromArray(activationAttributes), (Object)securityAttributes.getJCOInstance());
            return new ObjectHandle(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectHandle CreateInstance(AppDomain domain, java.lang.String assemblyName, java.lang.String typeName, boolean ignoreCase, BindingFlags bindingAttr, Binder binder, NetObject[] args, CultureInfo culture, NetObject[] activationAttributes) throws Throwable, system.ArgumentNullException, system.security.SecurityException, system.NullReferenceException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.IndexOutOfRangeException, system.TypeLoadException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.FormatException {
        try {
            JCObject objCreateInstance = (JCObject)classType.Invoke("CreateInstance", (Object)domain.getJCOInstance(), (Object)assemblyName, (Object)typeName, ignoreCase, (Object)bindingAttr.getJCOInstance(), (Object)binder.getJCOInstance(), (Object)toObjectFromArray(args), (Object)culture.getJCOInstance(), (Object)toObjectFromArray(activationAttributes));
            return new ObjectHandle(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectHandle CreateInstanceFrom(AppDomain domain, java.lang.String assemblyFile, java.lang.String typeName) throws Throwable, system.ArgumentNullException, system.security.SecurityException, system.NullReferenceException, system.NotSupportedException, system.NotImplementedException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException {
        try {
            JCObject objCreateInstanceFrom = (JCObject)classType.Invoke("CreateInstanceFrom", (Object)domain.getJCOInstance(), (Object)assemblyFile, (Object)typeName);
            return new ObjectHandle(objCreateInstanceFrom);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectHandle CreateInstanceFrom(AppDomain domain, java.lang.String assemblyFile, java.lang.String typeName, boolean ignoreCase, BindingFlags bindingAttr, Binder binder, NetObject[] args, CultureInfo culture, NetObject[] activationAttributes, Evidence securityAttributes) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.security.SecurityException, system.NullReferenceException, system.ArgumentException, system.ArgumentOutOfRangeException, system.NotImplementedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.FormatException {
        try {
            JCObject objCreateInstanceFrom = (JCObject)classType.Invoke("CreateInstanceFrom", (Object)domain.getJCOInstance(), (Object)assemblyFile, (Object)typeName, ignoreCase, (Object)bindingAttr.getJCOInstance(), (Object)binder.getJCOInstance(), (Object)toObjectFromArray(args), (Object)culture.getJCOInstance(), (Object)toObjectFromArray(activationAttributes), (Object)securityAttributes.getJCOInstance());
            return new ObjectHandle(objCreateInstanceFrom);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectHandle CreateInstanceFrom(AppDomain domain, java.lang.String assemblyFile, java.lang.String typeName, boolean ignoreCase, BindingFlags bindingAttr, Binder binder, NetObject[] args, CultureInfo culture, NetObject[] activationAttributes) throws Throwable, system.ArgumentNullException, system.security.SecurityException, system.NullReferenceException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.ArgumentOutOfRangeException, system.NotImplementedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.FormatException {
        try {
            JCObject objCreateInstanceFrom = (JCObject)classType.Invoke("CreateInstanceFrom", (Object)domain.getJCOInstance(), (Object)assemblyFile, (Object)typeName, ignoreCase, (Object)bindingAttr.getJCOInstance(), (Object)binder.getJCOInstance(), (Object)toObjectFromArray(args), (Object)culture.getJCOInstance(), (Object)toObjectFromArray(activationAttributes));
            return new ObjectHandle(objCreateInstanceFrom);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectHandle CreateInstance(ActivationContext activationContext) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.io.PathTooLongException, system.NotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.NotImplementedException, system.MemberAccessException, system.security.policy.PolicyException, system.OverflowException, system.RankException, system.NullReferenceException, system.runtime.remoting.RemotingException, system.InvalidCastException {
        try {
            JCObject objCreateInstance = (JCObject)classType.Invoke("CreateInstance", (Object)activationContext.getJCOInstance());
            return new ObjectHandle(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectHandle CreateInstance(ActivationContext activationContext, java.lang.String[] activationCustomData) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.io.PathTooLongException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.DriveNotFoundException, system.OperationCanceledException, system.NotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.NotImplementedException, system.OutOfMemoryException, system.MemberAccessException, system.security.policy.PolicyException, system.OverflowException, system.RankException, system.reflection.TargetParameterCountException, system.runtime.remoting.RemotingException, system.InvalidCastException {
        try {
            JCObject objCreateInstance = (JCObject)classType.Invoke("CreateInstance", (Object)activationContext.getJCOInstance(), (Object)activationCustomData);
            return new ObjectHandle(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectHandle CreateComInstanceFrom(java.lang.String assemblyName, java.lang.String typeName) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.FormatException, system.TypeLoadException {
        try {
            JCObject objCreateComInstanceFrom = (JCObject)classType.Invoke("CreateComInstanceFrom", (Object)assemblyName, (Object)typeName);
            return new ObjectHandle(objCreateComInstanceFrom);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectHandle CreateComInstanceFrom(java.lang.String assemblyName, java.lang.String typeName, byte[] hashValue, AssemblyHashAlgorithm hashAlgorithm) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.NotSupportedException, system.FormatException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.InvalidCastException, system.NullReferenceException, system.MissingMethodException, system.reflection.TargetInvocationException, system.TypeLoadException {
        try {
            JCObject objCreateComInstanceFrom = (JCObject)classType.Invoke("CreateComInstanceFrom", (Object)assemblyName, (Object)typeName, hashValue, (Object)hashAlgorithm.getJCOInstance());
            return new ObjectHandle(objCreateComInstanceFrom);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject GetObject(NetType type, java.lang.String url) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.runtime.remoting.RemotingException, system.ArgumentException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.IndexOutOfRangeException, system.security.SecurityException, system.OutOfMemoryException, system.InvalidCastException {
        try {
            JCObject objGetObject = (JCObject)classType.Invoke("GetObject", (Object)type.getJCOInstance(), (Object)url);
            return new NetObject(objGetObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject GetObject(NetType type, java.lang.String url, NetObject state) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.runtime.remoting.RemotingException, system.ArgumentException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.security.SecurityException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.FormatException, system.InvalidCastException {
        try {
            JCObject objGetObject = (JCObject)classType.Invoke("GetObject", (Object)type.getJCOInstance(), (Object)url, (Object)state.getJCOInstance());
            return new NetObject(objGetObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    

	// Instance Events section
    
    
}