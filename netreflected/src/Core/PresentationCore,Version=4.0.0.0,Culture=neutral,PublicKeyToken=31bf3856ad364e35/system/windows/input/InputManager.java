/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.windows.input;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.windows.input.InputEventArgs;
import system.windows.PresentationSource;
import system.windows.input.KeyboardDevice;
import system.windows.input.MouseDevice;
import system.windows.input.InputDevice;
import system.windows.threading.Dispatcher;
import system.windows.input.InputManager;
import system.windows.input.PreProcessInputEventHandler;
import system.windows.input.NotifyInputEventHandler;
import system.windows.input.ProcessInputEventHandler;
import system.EventHandler;


/**
 * The base .NET class managing System.Windows.Input.InputManager, PresentationCore, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35. Extends {@link NetObject}.
 */
public class InputManager extends NetObject  {
    public static final String assemblyFullName = "PresentationCore, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
	public static final String assemblyShortName = "PresentationCore";
    public static final String className = "System.Windows.Input.InputManager";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InputManager(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static InputManager castFrom(IJCOBridgeReflected from) throws Throwable {
        return new InputManager(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public boolean ProcessInput(InputEventArgs input) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.componentmodel.InvalidEnumArgumentException, system.componentmodel.Win32Exception, system.threading.SynchronizationLockException, system.MulticastNotSupportedException, system.OutOfMemoryException {
        try {
            return (boolean)classInstance.Invoke("ProcessInput", (Object)input.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void PushMenuMode(PresentationSource menuSite) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("PushMenuMode", (Object)menuSite.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void PopMenuMode(PresentationSource menuSite) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("PopMenuMode", (Object)menuSite.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CheckAccess() throws Throwable {
        try {
            return (boolean)classInstance.Invoke("CheckAccess");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void VerifyAccess() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ObjectDisposedException, system.PlatformNotSupportedException {
        try {
            classInstance.Invoke("VerifyAccess");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public KeyboardDevice getPrimaryKeyboardDevice() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PrimaryKeyboardDevice");
            return new KeyboardDevice(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MouseDevice getPrimaryMouseDevice() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PrimaryMouseDevice");
            return new MouseDevice(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InputDevice getMostRecentInputDevice() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("MostRecentInputDevice");
            return new InputDevice(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMostRecentInputDevice(InputDevice MostRecentInputDevice) throws Throwable {
        try {
            classInstance.Set("MostRecentInputDevice", (Object)MostRecentInputDevice.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsInMenuMode() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsInMenuMode");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Dispatcher getDispatcher() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Dispatcher");
            return new Dispatcher(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static InputManager getCurrent() throws Throwable {
        try {
            JCObject val = (JCObject)classType.Get("Current");
            return new InputManager(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
    public void addPreProcessInput(PreProcessInputEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("PreProcessInput", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removePreProcessInput(PreProcessInputEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("PreProcessInput", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addPreNotifyInput(NotifyInputEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("PreNotifyInput", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removePreNotifyInput(NotifyInputEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("PreNotifyInput", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addPostNotifyInput(NotifyInputEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("PostNotifyInput", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removePostNotifyInput(NotifyInputEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("PostNotifyInput", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addPostProcessInput(ProcessInputEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("PostProcessInput", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removePostProcessInput(ProcessInputEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("PostProcessInput", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addEnterMenuMode(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("EnterMenuMode", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeEnterMenuMode(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("EnterMenuMode", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addLeaveMenuMode(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("LeaveMenuMode", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeLeaveMenuMode(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("LeaveMenuMode", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addHitTestInvalidatedAsync(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("HitTestInvalidatedAsync", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeHitTestInvalidatedAsync(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("HitTestInvalidatedAsync", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


}