/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.threading;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.threading.ThreadStart;
import system.threading.ParameterizedThreadStart;
import system.threading.CompressedStack;
import system.TimeSpan;
import system.threading.ApartmentState;
import system.LocalDataStoreSlot;
import system.AppDomain;
import system.SByte;
import system.UInt16;
import system.UInt32;
import system.UInt64;
import system.Single;
import system.threading.ExecutionContext;
import system.threading.ThreadPriority;
import system.threading.ThreadState;
import system.globalization.CultureInfo;
import system.threading.Thread;
import system.runtime.remoting.contexts.Context;


/**
 * The base .NET class managing System.Threading.Thread, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class Thread extends NetObject  {
    public static final String assemblyFullName = "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "mscorlib";
    public static final String className = "System.Threading.Thread";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Thread(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static Thread castFrom(IJCOBridgeReflected from) throws Throwable {
        return new Thread(from.getJCOInstance());
    }

    // Constructors section
    
    
    public Thread(ThreadStart start) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.security.SecurityException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject(start);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Thread(ThreadStart start, int maxStackSize) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.security.SecurityException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject(start, maxStackSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Thread(ParameterizedThreadStart start) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.security.SecurityException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject(start);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Thread(ParameterizedThreadStart start, int maxStackSize) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.security.SecurityException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject(start, maxStackSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public void Start() throws Throwable, system.security.SecurityException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.NullReferenceException {
        try {
            classInstance.Invoke("Start");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Start(NetObject parameter) throws Throwable, system.InvalidOperationException, system.security.SecurityException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.NullReferenceException {
        try {
            classInstance.Invoke("Start", (Object)parameter.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetCompressedStack(CompressedStack stack) throws Throwable, system.InvalidOperationException {
        try {
            classInstance.Invoke("SetCompressedStack", (Object)stack.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CompressedStack GetCompressedStack() throws Throwable, system.InvalidOperationException {
        try {
            JCObject objGetCompressedStack = (JCObject)classInstance.Invoke("GetCompressedStack");
            return new CompressedStack(objGetCompressedStack);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Abort(NetObject stateInfo) throws Throwable {
        try {
            classInstance.Invoke("Abort", (Object)stateInfo.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Abort() throws Throwable {
        try {
            classInstance.Invoke("Abort");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void ResetAbort() throws Throwable, system.threading.ThreadStateException {
        try {
            classType.Invoke("ResetAbort");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Suspend() throws Throwable {
        try {
            classInstance.Invoke("Suspend");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Resume() throws Throwable {
        try {
            classInstance.Invoke("Resume");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Interrupt() throws Throwable {
        try {
            classInstance.Invoke("Interrupt");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Join() throws Throwable {
        try {
            classInstance.Invoke("Join");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Join(int millisecondsTimeout) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("Join", millisecondsTimeout);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Join(TimeSpan timeout) throws Throwable, system.ArgumentOutOfRangeException {
        try {
            return (boolean)classInstance.Invoke("Join", (Object)timeout.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Sleep(int millisecondsTimeout) throws Throwable, system.ObjectDisposedException, system.threading.AbandonedMutexException {
        try {
            classType.Invoke("Sleep", millisecondsTimeout);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Sleep(TimeSpan timeout) throws Throwable, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.threading.AbandonedMutexException {
        try {
            classType.Invoke("Sleep", (Object)timeout.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SpinWait(int iterations) throws Throwable {
        try {
            classType.Invoke("SpinWait", iterations);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean Yield() throws Throwable {
        try {
            return (boolean)classType.Invoke("Yield");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ApartmentState GetApartmentState() throws Throwable {
        try {
            JCObject objGetApartmentState = (JCObject)classInstance.Invoke("GetApartmentState");
            return new ApartmentState(objGetApartmentState);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean TrySetApartmentState(ApartmentState state) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("TrySetApartmentState", (Object)state.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetApartmentState(ApartmentState state) throws Throwable, system.InvalidOperationException {
        try {
            classInstance.Invoke("SetApartmentState", (Object)state.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static LocalDataStoreSlot AllocateDataSlot() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException {
        try {
            JCObject objAllocateDataSlot = (JCObject)classType.Invoke("AllocateDataSlot");
            return new LocalDataStoreSlot(objAllocateDataSlot);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static LocalDataStoreSlot AllocateNamedDataSlot(java.lang.String name) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException {
        try {
            JCObject objAllocateNamedDataSlot = (JCObject)classType.Invoke("AllocateNamedDataSlot", (Object)name);
            return new LocalDataStoreSlot(objAllocateNamedDataSlot);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static LocalDataStoreSlot GetNamedDataSlot(java.lang.String name) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException {
        try {
            JCObject objGetNamedDataSlot = (JCObject)classType.Invoke("GetNamedDataSlot", (Object)name);
            return new LocalDataStoreSlot(objGetNamedDataSlot);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void FreeNamedDataSlot(java.lang.String name) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException {
        try {
            classType.Invoke("FreeNamedDataSlot", (Object)name);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject GetData(LocalDataStoreSlot slot) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException {
        try {
            JCObject objGetData = (JCObject)classType.Invoke("GetData", (Object)slot.getJCOInstance());
            return new NetObject(objGetData);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SetData(LocalDataStoreSlot slot, NetObject data) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.ArgumentNullException {
        try {
            classType.Invoke("SetData", (Object)slot.getJCOInstance(), (Object)data.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AppDomain GetDomain() throws Throwable {
        try {
            JCObject objGetDomain = (JCObject)classType.Invoke("GetDomain");
            return new AppDomain(objGetDomain);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int GetDomainID() throws Throwable {
        try {
            return (int)classType.Invoke("GetDomainID");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public int getManagedThreadId() throws Throwable {
        try {
            return (int)classInstance.Get("ManagedThreadId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ExecutionContext getExecutionContext() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ExecutionContext");
            return new ExecutionContext(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ThreadPriority getPriority() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Priority");
            return new ThreadPriority(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPriority(ThreadPriority Priority) throws Throwable {
        try {
            classInstance.Set("Priority", (Object)Priority.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsAlive() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsAlive");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsThreadPoolThread() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsThreadPoolThread");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsBackground() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsBackground");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIsBackground(boolean IsBackground) throws Throwable {
        try {
            classInstance.Set("IsBackground", IsBackground);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ThreadState getThreadState() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ThreadState");
            return new ThreadState(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ApartmentState getApartmentState() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ApartmentState");
            return new ApartmentState(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setApartmentState(ApartmentState ApartmentState) throws Throwable {
        try {
            classInstance.Set("ApartmentState", (Object)ApartmentState.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CultureInfo getCurrentUICulture() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CurrentUICulture");
            return new CultureInfo(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCurrentUICulture(CultureInfo CurrentUICulture) throws Throwable {
        try {
            classInstance.Set("CurrentUICulture", (Object)CurrentUICulture.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CultureInfo getCurrentCulture() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CurrentCulture");
            return new CultureInfo(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCurrentCulture(CultureInfo CurrentCulture) throws Throwable {
        try {
            classInstance.Set("CurrentCulture", (Object)CurrentCulture.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Name");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setName(java.lang.String Name) throws Throwable {
        try {
            classInstance.Set("Name", (Object)Name);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Thread getCurrentThread() throws Throwable {
        try {
            JCObject val = (JCObject)classType.Get("CurrentThread");
            return new Thread(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Context getCurrentContext() throws Throwable {
        try {
            JCObject val = (JCObject)classType.Get("CurrentContext");
            return new Context(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}