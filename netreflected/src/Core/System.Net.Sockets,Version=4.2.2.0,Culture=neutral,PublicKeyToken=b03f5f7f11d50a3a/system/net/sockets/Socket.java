/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.net.sockets;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.net.sockets.AddressFamily;
import system.net.sockets.SocketType;
import system.net.sockets.ProtocolType;
import system.net.sockets.SocketInformation;
import system.net.sockets.SelectMode;
import system.net.sockets.SocketOptionLevel;
import system.net.sockets.SocketOptionName;
import system.net.EndPoint;
import system.net.IPAddress;
import system.net.sockets.SocketFlags;
import system.net.sockets.IOControlCode;
import system.net.sockets.IPProtectionLevel;
import system.net.sockets.Socket;
import system.net.sockets.SocketShutdown;
import system.net.sockets.SocketAsyncEventArgs;
import system.net.sockets.TransmitFileOptions;
import system.net.sockets.SafeSocketHandle;
import system.net.sockets.LingerOption;


/**
 * The base .NET class managing System.Net.Sockets.Socket, System.Net.Sockets, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class Socket extends NetObject  {
    public static final String assemblyFullName = "System.Net.Sockets, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Net.Sockets";
    public static final String className = "System.Net.Sockets.Socket";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Socket(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static Socket castFrom(IJCOBridgeReflected from) throws Throwable {
        return new Socket(from.getJCOInstance());
    }

    // Constructors section
    
    
    public Socket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.ArgumentNullException, system.OutOfMemoryException, system.NotSupportedException, system.net.sockets.SocketException, system.ObjectDisposedException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)addressFamily.getJCOInstance(), (Object)socketType.getJCOInstance(), (Object)protocolType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Socket(SocketType socketType, ProtocolType protocolType) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.net.sockets.SocketException, system.ObjectDisposedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.ArrayTypeMismatchException, system.InvalidOperationException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)socketType.getJCOInstance(), (Object)protocolType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Socket(SocketInformation socketInformation) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.globalization.CultureNotFoundException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)socketInformation.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public boolean Poll(int microSeconds, SelectMode mode) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.net.sockets.SocketException {
        try {
            return (boolean)classInstance.Invoke("Poll", microSeconds, (Object)mode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.net.sockets.SocketException {
        try {
            JCObject objGetSocketOption = (JCObject)classInstance.Invoke("GetSocketOption", (Object)optionLevel.getJCOInstance(), (Object)optionName.getJCOInstance());
            return new NetObject(objGetSocketOption);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Connect(EndPoint remoteEP) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.diagnostics.tracing.EventSourceException, system.net.sockets.SocketException {
        try {
            classInstance.Invoke("Connect", (Object)remoteEP.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Connect(java.lang.String host, int port) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.ArgumentNullException, system.OutOfMemoryException, system.NotSupportedException, system.ObjectDisposedException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException {
        try {
            classInstance.Invoke("Connect", (Object)host, port);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Connect(IPAddress address, int port) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.ArgumentNullException, system.OutOfMemoryException, system.NotSupportedException, system.ObjectDisposedException, system.net.sockets.SocketException, system.resources.MissingManifestResourceException {
        try {
            classInstance.Invoke("Connect", (Object)address.getJCOInstance(), port);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Connect(IPAddress[] addresses, int port) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.ArgumentNullException, system.OutOfMemoryException, system.NotSupportedException, system.ObjectDisposedException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException {
        try {
            classInstance.Invoke("Connect", (Object)toObjectFromArray(addresses), port);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionValue) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.net.sockets.SocketException {
        try {
            classInstance.Invoke("SetSocketOption", (Object)optionLevel.getJCOInstance(), (Object)optionName.getJCOInstance(), optionValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Bind(EndPoint localEP) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.ArgumentNullException, system.OutOfMemoryException, system.NotSupportedException, system.ObjectDisposedException, system.net.sockets.SocketException, system.resources.MissingManifestResourceException {
        try {
            classInstance.Invoke("Bind", (Object)localEP.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int Receive(byte[] buffer, int offset, int size, SocketFlags socketFlags) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.ObjectDisposedException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException {
        try {
            return (int)classInstance.Invoke("Receive", buffer, offset, size, (Object)socketFlags.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int Send(byte[] buffer, int offset, int size, SocketFlags socketFlags) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.ObjectDisposedException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException {
        try {
            return (int)classInstance.Invoke("Send", buffer, offset, size, (Object)socketFlags.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int IOControl(int ioControlCode, byte[] optionInValue, byte[] optionOutValue) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.net.sockets.SocketException {
        try {
            return (int)classInstance.Invoke("IOControl", ioControlCode, optionInValue, optionOutValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int IOControl(IOControlCode ioControlCode, byte[] optionInValue, byte[] optionOutValue) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.net.sockets.SocketException {
        try {
            return (int)classInstance.Invoke("IOControl", (Object)ioControlCode.getJCOInstance(), optionInValue, optionOutValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, byte[] optionValue) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.net.sockets.SocketException {
        try {
            classInstance.Invoke("SetSocketOption", (Object)optionLevel.getJCOInstance(), (Object)optionName.getJCOInstance(), optionValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, boolean optionValue) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.net.sockets.SocketException {
        try {
            classInstance.Invoke("SetSocketOption", (Object)optionLevel.getJCOInstance(), (Object)optionName.getJCOInstance(), optionValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, NetObject optionValue) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.net.sockets.SocketException {
        try {
            classInstance.Invoke("SetSocketOption", (Object)optionLevel.getJCOInstance(), (Object)optionName.getJCOInstance(), (Object)optionValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, byte[] optionValue) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.ArrayTypeMismatchException, system.FormatException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.net.sockets.SocketException {
        try {
            classInstance.Invoke("GetSocketOption", (Object)optionLevel.getJCOInstance(), (Object)optionName.getJCOInstance(), optionValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionLength) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.ArrayTypeMismatchException, system.FormatException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.net.sockets.SocketException {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("GetSocketOption", (Object)optionLevel.getJCOInstance(), (Object)optionName.getJCOInstance(), optionLength);
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexGetSocketOption = 0; indexGetSocketOption < resultingArrayList.size(); indexGetSocketOption++ ) {
				resultingArray[indexGetSocketOption] = (byte)resultingArrayList.get(indexGetSocketOption);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetIPProtectionLevel(IPProtectionLevel level) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException, system.diagnostics.tracing.EventSourceException, system.net.sockets.SocketException, system.NotSupportedException {
        try {
            classInstance.Invoke("SetIPProtectionLevel", (Object)level.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SocketInformation DuplicateAndClose(int targetProcessId) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.globalization.CultureNotFoundException {
        try {
            JCObject objDuplicateAndClose = (JCObject)classInstance.Invoke("DuplicateAndClose", targetProcessId);
            return new SocketInformation(objDuplicateAndClose);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Disconnect(boolean reuseSocket) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.NotSupportedException, system.ObjectDisposedException, system.OverflowException, system.net.sockets.SocketException {
        try {
            classInstance.Invoke("Disconnect", reuseSocket);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Shutdown(SocketShutdown how) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.ArgumentNullException, system.OutOfMemoryException, system.NotSupportedException, system.ObjectDisposedException, system.net.sockets.SocketException {
        try {
            classInstance.Invoke("Shutdown", (Object)how.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean AcceptAsync(SocketAsyncEventArgs e) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.ArgumentNullException, system.OutOfMemoryException, system.NotSupportedException, system.ObjectDisposedException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException, system.OverflowException {
        try {
            return (boolean)classInstance.Invoke("AcceptAsync", (Object)e.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean ConnectAsync(SocketAsyncEventArgs e) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.ObjectDisposedException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException, system.NotSupportedException, system.MulticastNotSupportedException, system.security.SecurityException, system.OverflowException {
        try {
            return (boolean)classInstance.Invoke("ConnectAsync", (Object)e.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ConnectAsync(SocketType socketType, ProtocolType protocolType, SocketAsyncEventArgs e) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.net.sockets.SocketException, system.threading.AbandonedMutexException, system.MulticastNotSupportedException, system.threading.tasks.TaskSchedulerException, system.security.SecurityException {
        try {
            return (boolean)classType.Invoke("ConnectAsync", (Object)socketType.getJCOInstance(), (Object)protocolType.getJCOInstance(), (Object)e.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CancelConnectAsync(SocketAsyncEventArgs e) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.threading.tasks.TaskSchedulerException, system.ArrayTypeMismatchException {
        try {
            classType.Invoke("CancelConnectAsync", (Object)e.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean DisconnectAsync(SocketAsyncEventArgs e) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.NotSupportedException, system.ObjectDisposedException, system.resources.MissingManifestResourceException, system.OverflowException, system.net.sockets.SocketException {
        try {
            return (boolean)classInstance.Invoke("DisconnectAsync", (Object)e.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean ReceiveAsync(SocketAsyncEventArgs e) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.ObjectDisposedException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException {
        try {
            return (boolean)classInstance.Invoke("ReceiveAsync", (Object)e.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean ReceiveFromAsync(SocketAsyncEventArgs e) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.ArgumentNullException, system.OutOfMemoryException, system.NotSupportedException, system.ObjectDisposedException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException {
        try {
            return (boolean)classInstance.Invoke("ReceiveFromAsync", (Object)e.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean ReceiveMessageFromAsync(SocketAsyncEventArgs e) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.ArgumentNullException, system.OutOfMemoryException, system.NotSupportedException, system.ObjectDisposedException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException, system.OverflowException {
        try {
            return (boolean)classInstance.Invoke("ReceiveMessageFromAsync", (Object)e.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean SendAsync(SocketAsyncEventArgs e) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.ObjectDisposedException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException {
        try {
            return (boolean)classInstance.Invoke("SendAsync", (Object)e.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean SendPacketsAsync(SocketAsyncEventArgs e) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.ArgumentNullException, system.OutOfMemoryException, system.NotSupportedException, system.ObjectDisposedException, system.net.sockets.SocketException, system.resources.MissingManifestResourceException, system.OverflowException, system.threading.SynchronizationLockException, system.runtime.serialization.SerializationException, system.io.IOException {
        try {
            return (boolean)classInstance.Invoke("SendPacketsAsync", (Object)e.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean SendToAsync(SocketAsyncEventArgs e) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.ArgumentNullException, system.OutOfMemoryException, system.NotSupportedException, system.ObjectDisposedException, system.net.sockets.SocketException, system.resources.MissingManifestResourceException {
        try {
            return (boolean)classInstance.Invoke("SendToAsync", (Object)e.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Close(int timeout) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.ArgumentNullException, system.OutOfMemoryException, system.NotSupportedException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("Close", timeout);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Listen(int backlog) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.diagnostics.tracing.EventSourceException, system.ArgumentNullException, system.OutOfMemoryException, system.NotSupportedException, system.ObjectDisposedException, system.net.sockets.SocketException {
        try {
            classInstance.Invoke("Listen", backlog);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Socket Accept() throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.NotSupportedException, system.ObjectDisposedException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException {
        try {
            JCObject objAccept = (JCObject)classInstance.Invoke("Accept");
            return new Socket(objAccept);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int Send(byte[] buffer, int size, SocketFlags socketFlags) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.ObjectDisposedException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException {
        try {
            return (int)classInstance.Invoke("Send", buffer, size, (Object)socketFlags.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int Send(byte[] buffer, SocketFlags socketFlags) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.ObjectDisposedException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException {
        try {
            return (int)classInstance.Invoke("Send", buffer, (Object)socketFlags.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int Send(byte[] buffer) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.ObjectDisposedException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException {
        try {
            return (int)classInstance.Invoke("Send", buffer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SendFile(java.lang.String fileName) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.ObjectDisposedException, system.net.sockets.SocketException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.NotSupportedException, system.runtime.serialization.SerializationException, system.io.IOException {
        try {
            classInstance.Invoke("SendFile", (Object)fileName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SendFile(java.lang.String fileName, byte[] preBuffer, byte[] postBuffer, TransmitFileOptions flags) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.NotSupportedException, system.ObjectDisposedException, system.net.sockets.SocketException, system.resources.MissingManifestResourceException, system.runtime.serialization.SerializationException, system.io.IOException {
        try {
            classInstance.Invoke("SendFile", (Object)fileName, preBuffer, postBuffer, (Object)flags.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int SendTo(byte[] buffer, int offset, int size, SocketFlags socketFlags, EndPoint remoteEP) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.NotSupportedException, system.ObjectDisposedException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException {
        try {
            return (int)classInstance.Invoke("SendTo", buffer, offset, size, (Object)socketFlags.getJCOInstance(), (Object)remoteEP.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int SendTo(byte[] buffer, int size, SocketFlags socketFlags, EndPoint remoteEP) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.ObjectDisposedException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException, system.NotSupportedException {
        try {
            return (int)classInstance.Invoke("SendTo", buffer, size, (Object)socketFlags.getJCOInstance(), (Object)remoteEP.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int SendTo(byte[] buffer, SocketFlags socketFlags, EndPoint remoteEP) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.ObjectDisposedException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException, system.NotSupportedException {
        try {
            return (int)classInstance.Invoke("SendTo", buffer, (Object)socketFlags.getJCOInstance(), (Object)remoteEP.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int SendTo(byte[] buffer, EndPoint remoteEP) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.ObjectDisposedException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException, system.NotSupportedException {
        try {
            return (int)classInstance.Invoke("SendTo", buffer, (Object)remoteEP.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int Receive(byte[] buffer, int size, SocketFlags socketFlags) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.ObjectDisposedException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException {
        try {
            return (int)classInstance.Invoke("Receive", buffer, size, (Object)socketFlags.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int Receive(byte[] buffer, SocketFlags socketFlags) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.ObjectDisposedException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException {
        try {
            return (int)classInstance.Invoke("Receive", buffer, (Object)socketFlags.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int Receive(byte[] buffer) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.ObjectDisposedException, system.resources.MissingManifestResourceException, system.net.sockets.SocketException {
        try {
            return (int)classInstance.Invoke("Receive", buffer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public int getAvailable() throws Throwable {
        try {
            return (int)classInstance.Get("Available");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EndPoint getLocalEndPoint() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LocalEndPoint");
            return new EndPoint(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EndPoint getRemoteEndPoint() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RemoteEndPoint");
            return new EndPoint(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SafeSocketHandle getSafeHandle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SafeHandle");
            return new SafeSocketHandle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getBlocking() throws Throwable {
        try {
            return (boolean)classInstance.Get("Blocking");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBlocking(boolean Blocking) throws Throwable {
        try {
            classInstance.Set("Blocking", Blocking);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseOnlyOverlappedIO() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseOnlyOverlappedIO");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseOnlyOverlappedIO(boolean UseOnlyOverlappedIO) throws Throwable {
        try {
            classInstance.Set("UseOnlyOverlappedIO", UseOnlyOverlappedIO);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getConnected() throws Throwable {
        try {
            return (boolean)classInstance.Get("Connected");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AddressFamily getAddressFamily() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AddressFamily");
            return new AddressFamily(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SocketType getSocketType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SocketType");
            return new SocketType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ProtocolType getProtocolType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ProtocolType");
            return new ProtocolType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsBound() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsBound");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getExclusiveAddressUse() throws Throwable {
        try {
            return (boolean)classInstance.Get("ExclusiveAddressUse");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExclusiveAddressUse(boolean ExclusiveAddressUse) throws Throwable {
        try {
            classInstance.Set("ExclusiveAddressUse", ExclusiveAddressUse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getReceiveBufferSize() throws Throwable {
        try {
            return (int)classInstance.Get("ReceiveBufferSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReceiveBufferSize(int ReceiveBufferSize) throws Throwable {
        try {
            classInstance.Set("ReceiveBufferSize", ReceiveBufferSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getSendBufferSize() throws Throwable {
        try {
            return (int)classInstance.Get("SendBufferSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSendBufferSize(int SendBufferSize) throws Throwable {
        try {
            classInstance.Set("SendBufferSize", SendBufferSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getReceiveTimeout() throws Throwable {
        try {
            return (int)classInstance.Get("ReceiveTimeout");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReceiveTimeout(int ReceiveTimeout) throws Throwable {
        try {
            classInstance.Set("ReceiveTimeout", ReceiveTimeout);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getSendTimeout() throws Throwable {
        try {
            return (int)classInstance.Get("SendTimeout");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSendTimeout(int SendTimeout) throws Throwable {
        try {
            classInstance.Set("SendTimeout", SendTimeout);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LingerOption getLingerState() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LingerState");
            return new LingerOption(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLingerState(LingerOption LingerState) throws Throwable {
        try {
            classInstance.Set("LingerState", (Object)LingerState.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getNoDelay() throws Throwable {
        try {
            return (boolean)classInstance.Get("NoDelay");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setNoDelay(boolean NoDelay) throws Throwable {
        try {
            classInstance.Set("NoDelay", NoDelay);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public short getTtl() throws Throwable {
        try {
            return (short)classInstance.Get("Ttl");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTtl(short Ttl) throws Throwable {
        try {
            classInstance.Set("Ttl", Ttl);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getDontFragment() throws Throwable {
        try {
            return (boolean)classInstance.Get("DontFragment");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDontFragment(boolean DontFragment) throws Throwable {
        try {
            classInstance.Set("DontFragment", DontFragment);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getMulticastLoopback() throws Throwable {
        try {
            return (boolean)classInstance.Get("MulticastLoopback");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMulticastLoopback(boolean MulticastLoopback) throws Throwable {
        try {
            classInstance.Set("MulticastLoopback", MulticastLoopback);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnableBroadcast() throws Throwable {
        try {
            return (boolean)classInstance.Get("EnableBroadcast");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnableBroadcast(boolean EnableBroadcast) throws Throwable {
        try {
            classInstance.Set("EnableBroadcast", EnableBroadcast);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getDualMode() throws Throwable {
        try {
            return (boolean)classInstance.Get("DualMode");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDualMode(boolean DualMode) throws Throwable {
        try {
            classInstance.Set("DualMode", DualMode);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getSupportsIPv4() throws Throwable {
        try {
            return (boolean)classType.Get("SupportsIPv4");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getSupportsIPv6() throws Throwable {
        try {
            return (boolean)classType.Get("SupportsIPv6");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getOSSupportsIPv4() throws Throwable {
        try {
            return (boolean)classType.Get("OSSupportsIPv4");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getOSSupportsIPv6() throws Throwable {
        try {
            return (boolean)classType.Get("OSSupportsIPv6");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}