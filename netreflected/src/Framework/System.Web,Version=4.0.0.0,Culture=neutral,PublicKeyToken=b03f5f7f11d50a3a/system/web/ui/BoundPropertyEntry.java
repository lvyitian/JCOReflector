/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.web.ui;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.web.compilation.ExpressionBuilder;
import system.reflection.PropertyInfo;


/**
 * The base .NET class managing System.Web.UI.BoundPropertyEntry, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class BoundPropertyEntry extends NetObject  {
    public static final String assemblyFullName = "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Web";
    public static final String className = "System.Web.UI.BoundPropertyEntry";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BoundPropertyEntry(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static BoundPropertyEntry castFrom(IJCOBridgeReflected from) throws Throwable {
        return new BoundPropertyEntry(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    

    
    // Properties section
    
    
    public java.lang.String getControlID() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ControlID");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setControlID(java.lang.String ControlID) throws Throwable {
        try {
            classInstance.Set("ControlID", (Object)ControlID);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetType getControlType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ControlType");
            return new NetType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setControlType(NetType ControlType) throws Throwable {
        try {
            classInstance.Set("ControlType", (Object)ControlType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getExpression() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Expression");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExpression(java.lang.String Expression) throws Throwable {
        try {
            classInstance.Set("Expression", (Object)Expression);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ExpressionBuilder getExpressionBuilder() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ExpressionBuilder");
            return new ExpressionBuilder(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExpressionBuilder(ExpressionBuilder ExpressionBuilder) throws Throwable {
        try {
            classInstance.Set("ExpressionBuilder", (Object)ExpressionBuilder.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getExpressionPrefix() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ExpressionPrefix");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExpressionPrefix(java.lang.String ExpressionPrefix) throws Throwable {
        try {
            classInstance.Set("ExpressionPrefix", (Object)ExpressionPrefix);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getFieldName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("FieldName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFieldName(java.lang.String FieldName) throws Throwable {
        try {
            classInstance.Set("FieldName", (Object)FieldName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getFormatString() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("FormatString");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFormatString(java.lang.String FormatString) throws Throwable {
        try {
            classInstance.Set("FormatString", (Object)FormatString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getGenerated() throws Throwable {
        try {
            return (boolean)classInstance.Get("Generated");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setGenerated(boolean Generated) throws Throwable {
        try {
            classInstance.Set("Generated", Generated);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getParsedExpressionData() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ParsedExpressionData");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setParsedExpressionData(NetObject ParsedExpressionData) throws Throwable {
        try {
            classInstance.Set("ParsedExpressionData", (Object)ParsedExpressionData.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getReadOnlyProperty() throws Throwable {
        try {
            return (boolean)classInstance.Get("ReadOnlyProperty");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReadOnlyProperty(boolean ReadOnlyProperty) throws Throwable {
        try {
            classInstance.Set("ReadOnlyProperty", ReadOnlyProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTwoWayBound() throws Throwable {
        try {
            return (boolean)classInstance.Get("TwoWayBound");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTwoWayBound(boolean TwoWayBound) throws Throwable {
        try {
            classInstance.Set("TwoWayBound", TwoWayBound);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseSetAttribute() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseSetAttribute");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseSetAttribute(boolean UseSetAttribute) throws Throwable {
        try {
            classInstance.Set("UseSetAttribute", UseSetAttribute);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsEncoded() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsEncoded");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIsEncoded(boolean IsEncoded) throws Throwable {
        try {
            classInstance.Set("IsEncoded", IsEncoded);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getFilter() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Filter");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFilter(java.lang.String Filter) throws Throwable {
        try {
            classInstance.Set("Filter", (Object)Filter);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyInfo getPropertyInfo() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PropertyInfo");
            return new PropertyInfo(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPropertyInfo(PropertyInfo PropertyInfo) throws Throwable {
        try {
            classInstance.Set("PropertyInfo", (Object)PropertyInfo.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Name");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setName(java.lang.String Name) throws Throwable {
        try {
            classInstance.Set("Name", (Object)Name);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetType getType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Type");
            return new NetType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setType(NetType Type) throws Throwable {
        try {
            classInstance.Set("Type", (Object)Type.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetType getDeclaringType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DeclaringType");
            return new NetType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}