/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.web;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.io.TextWriter;
import system.web.routing.RouteValueDictionary;
import system.web.HttpResponseSubstitutionCallback;
import system.threading.tasks.Task;
import system.web.caching.CacheDependency;
import system.web.HttpCookie;
import system.collections.specialized.NameValueCollection;
import system.web.HttpCookieCollection;
import system.text.Encoding;
import system.web.HttpCachePolicy;
import system.threading.CancellationToken;
import system.io.Stream;
import system.DateTime;


/**
 * The base .NET class managing System.Web.HttpResponse, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class HttpResponse extends NetObject  {
    public static final String assemblyFullName = "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Web";
    public static final String className = "System.Web.HttpResponse";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HttpResponse(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static HttpResponse castFrom(IJCOBridgeReflected from) throws Throwable {
        return new HttpResponse(from.getJCOInstance());
    }

    // Constructors section
    
    
    public HttpResponse(TextWriter writer) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)writer.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public static void RemoveOutputCacheItem(java.lang.String path) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.web.HttpException, system.NullReferenceException, system.configuration.ConfigurationErrorsException, system.NotSupportedException, system.RankException, system.configuration.provider.ProviderException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OutOfMemoryException {
        try {
            classType.Invoke("RemoveOutputCacheItem", (Object)path);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Close() throws Throwable {
        try {
            classInstance.Invoke("Close");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BinaryWrite(byte[] buffer) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException {
        try {
            classInstance.Invoke("BinaryWrite", buffer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AppendHeader(java.lang.String name, java.lang.String value) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.PlatformNotSupportedException, system.threading.ThreadAbortException {
        try {
            classInstance.Invoke("AppendHeader", (Object)name, (Object)value);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ClearContent() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.web.HttpException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.web.HttpRequestValidationException, system.configuration.ConfigurationErrorsException {
        try {
            classInstance.Invoke("ClearContent");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Clear() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.web.HttpException, system.NotSupportedException, system.web.HttpRequestValidationException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException {
        try {
            classInstance.Invoke("Clear");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Flush() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.PlatformNotSupportedException, system.OutOfMemoryException, system.FormatException, system.OverflowException {
        try {
            classInstance.Invoke("Flush");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AppendToLog(java.lang.String param) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.web.HttpRequestValidationException, system.configuration.ConfigurationErrorsException, system.NotSupportedException, system.NullReferenceException {
        try {
            classInstance.Invoke("AppendToLog", (Object)param);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Redirect(java.lang.String url) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.ApplicationException, system.configuration.ConfigurationErrorsException, system.configuration.provider.ProviderException, system.IndexOutOfRangeException, system.UriFormatException, system.OutOfMemoryException, system.NotSupportedException, system.threading.ThreadAbortException, system.FormatException, system.OverflowException {
        try {
            classInstance.Invoke("Redirect", (Object)url);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Redirect(java.lang.String url, boolean endResponse) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.ApplicationException, system.configuration.ConfigurationErrorsException, system.configuration.provider.ProviderException, system.IndexOutOfRangeException, system.UriFormatException, system.OutOfMemoryException, system.NotSupportedException, system.threading.ThreadAbortException, system.FormatException, system.OverflowException {
        try {
            classInstance.Invoke("Redirect", (Object)url, endResponse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoute(java.lang.String routeName) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.web.HttpException, system.ArgumentOutOfRangeException, system.threading.LockRecursionException, system.OutOfMemoryException, system.FormatException, system.ApplicationException, system.configuration.ConfigurationErrorsException, system.configuration.provider.ProviderException, system.NullReferenceException, system.web.HttpRequestValidationException, system.UriFormatException, system.NotSupportedException, system.OverflowException {
        try {
            classInstance.Invoke("RedirectToRoute", (Object)routeName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoute(RouteValueDictionary routeValues) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.web.HttpException, system.ArgumentOutOfRangeException, system.threading.LockRecursionException, system.OutOfMemoryException, system.FormatException, system.ApplicationException, system.configuration.ConfigurationErrorsException, system.configuration.provider.ProviderException, system.NullReferenceException, system.web.HttpRequestValidationException, system.UriFormatException, system.NotSupportedException, system.OverflowException {
        try {
            classInstance.Invoke("RedirectToRoute", (Object)routeValues.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoute(java.lang.String routeName, RouteValueDictionary routeValues) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.web.HttpException, system.ArgumentOutOfRangeException, system.threading.LockRecursionException, system.OutOfMemoryException, system.FormatException, system.ApplicationException, system.configuration.ConfigurationErrorsException, system.configuration.provider.ProviderException, system.NullReferenceException, system.web.HttpRequestValidationException, system.UriFormatException, system.NotSupportedException, system.OverflowException {
        try {
            classInstance.Invoke("RedirectToRoute", (Object)routeName, (Object)routeValues.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoutePermanent(java.lang.String routeName) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.web.HttpException, system.ArgumentOutOfRangeException, system.threading.LockRecursionException, system.OutOfMemoryException, system.FormatException, system.ApplicationException, system.configuration.ConfigurationErrorsException, system.configuration.provider.ProviderException, system.NullReferenceException, system.web.HttpRequestValidationException, system.UriFormatException, system.NotSupportedException, system.OverflowException {
        try {
            classInstance.Invoke("RedirectToRoutePermanent", (Object)routeName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoutePermanent(RouteValueDictionary routeValues) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.web.HttpException, system.ArgumentOutOfRangeException, system.threading.LockRecursionException, system.OutOfMemoryException, system.FormatException, system.ApplicationException, system.configuration.ConfigurationErrorsException, system.configuration.provider.ProviderException, system.NullReferenceException, system.web.HttpRequestValidationException, system.UriFormatException, system.NotSupportedException, system.OverflowException {
        try {
            classInstance.Invoke("RedirectToRoutePermanent", (Object)routeValues.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoutePermanent(java.lang.String routeName, RouteValueDictionary routeValues) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.web.HttpException, system.ArgumentOutOfRangeException, system.threading.LockRecursionException, system.OutOfMemoryException, system.FormatException, system.ApplicationException, system.configuration.ConfigurationErrorsException, system.configuration.provider.ProviderException, system.NullReferenceException, system.web.HttpRequestValidationException, system.UriFormatException, system.NotSupportedException, system.OverflowException {
        try {
            classInstance.Invoke("RedirectToRoutePermanent", (Object)routeName, (Object)routeValues.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectPermanent(java.lang.String url) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.ApplicationException, system.configuration.ConfigurationErrorsException, system.configuration.provider.ProviderException, system.IndexOutOfRangeException, system.UriFormatException, system.OutOfMemoryException, system.NotSupportedException, system.threading.ThreadAbortException, system.FormatException, system.OverflowException {
        try {
            classInstance.Invoke("RedirectPermanent", (Object)url);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectPermanent(java.lang.String url, boolean endResponse) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.ApplicationException, system.configuration.ConfigurationErrorsException, system.configuration.provider.ProviderException, system.IndexOutOfRangeException, system.UriFormatException, system.OutOfMemoryException, system.NotSupportedException, system.threading.ThreadAbortException, system.FormatException, system.OverflowException {
        try {
            classInstance.Invoke("RedirectPermanent", (Object)url, endResponse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Write(java.lang.String s) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException {
        try {
            classInstance.Invoke("Write", (Object)s);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Write(NetObject obj) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException {
        try {
            classInstance.Invoke("Write", (Object)obj.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Write(char ch) throws Throwable {
        try {
            classInstance.Invoke("Write", ch);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Write(char[] buffer, int index, int count) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException {
        try {
            classInstance.Invoke("Write", buffer, index, count);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void WriteSubstitution(HttpResponseSubstitutionCallback callback) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.OutOfMemoryException, system.web.HttpRequestValidationException, system.PlatformNotSupportedException, system.OverflowException, system.NullReferenceException {
        try {
            classInstance.Invoke("WriteSubstitution", callback);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void WriteFile(java.lang.String filename) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.web.HttpException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.web.HttpRequestValidationException, system.io.PathTooLongException, system.NotSupportedException, system.NullReferenceException, system.security.SecurityException, system.io.IOException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.PlatformNotSupportedException, system.OverflowException {
        try {
            classInstance.Invoke("WriteFile", (Object)filename);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void TransmitFile(java.lang.String filename) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.IndexOutOfRangeException, system.web.HttpRequestValidationException, system.io.PathTooLongException, system.NotSupportedException, system.NullReferenceException, system.security.SecurityException, system.io.IOException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.OverflowException {
        try {
            classInstance.Invoke("TransmitFile", (Object)filename);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void TransmitFile(java.lang.String filename, long offset, long length) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.FormatException, system.web.HttpRequestValidationException, system.io.PathTooLongException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.DriveNotFoundException, system.OperationCanceledException, system.NullReferenceException, system.security.SecurityException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.OverflowException {
        try {
            classInstance.Invoke("TransmitFile", (Object)filename, offset, length);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void WriteFile(java.lang.String filename, long offset, long size) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.web.HttpException, system.ArgumentOutOfRangeException, system.FormatException, system.web.HttpRequestValidationException, system.io.PathTooLongException, system.IndexOutOfRangeException, system.NotSupportedException, system.NullReferenceException, system.security.SecurityException, system.io.IOException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.OverflowException {
        try {
            classInstance.Invoke("WriteFile", (Object)filename, offset, size);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddHeader(java.lang.String name, java.lang.String value) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.PlatformNotSupportedException, system.NotSupportedException, system.threading.ThreadAbortException {
        try {
            classInstance.Invoke("AddHeader", (Object)name, (Object)value);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void End() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.configuration.ConfigurationErrorsException, system.NotSupportedException, system.configuration.ConfigurationException, system.PlatformNotSupportedException, system.OutOfMemoryException, system.OverflowException, system.NullReferenceException {
        try {
            classInstance.Invoke("End");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task FlushAsync() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.configuration.ConfigurationErrorsException, system.NotSupportedException, system.configuration.ConfigurationException, system.PlatformNotSupportedException, system.OutOfMemoryException, system.OverflowException, system.NullReferenceException, system.OperationCanceledException, system.threading.AbandonedMutexException, system.threading.tasks.TaskSchedulerException {
        try {
            JCObject objFlushAsync = (JCObject)classInstance.Invoke("FlushAsync");
            return new Task(objFlushAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddFileDependency(java.lang.String filename) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentOutOfRangeException, system.FormatException {
        try {
            classInstance.Invoke("AddFileDependency", (Object)filename);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddFileDependencies(NetArrayList filenames) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.NotSupportedException, system.FormatException {
        try {
            classInstance.Invoke("AddFileDependencies", (Object)filenames.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddFileDependencies(java.lang.String[] filenames) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException {
        try {
            classInstance.Invoke("AddFileDependencies", (Object)filenames);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddCacheItemDependency(java.lang.String cacheKey) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentOutOfRangeException, system.FormatException {
        try {
            classInstance.Invoke("AddCacheItemDependency", (Object)cacheKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddCacheItemDependencies(NetArrayList cacheKeys) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.NotSupportedException, system.FormatException {
        try {
            classInstance.Invoke("AddCacheItemDependencies", (Object)cacheKeys.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddCacheItemDependencies(java.lang.String[] cacheKeys) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException {
        try {
            classInstance.Invoke("AddCacheItemDependencies", (Object)cacheKeys);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddCacheDependency(CacheDependency... dependencies) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("AddCacheDependency", (Object[])toObjectFromArray(dependencies));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void RemoveOutputCacheItem(java.lang.String path, java.lang.String providerName) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.web.HttpException, system.configuration.ConfigurationErrorsException, system.NullReferenceException, system.configuration.ConfigurationException, system.OverflowException, system.RankException, system.configuration.provider.ProviderException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OutOfMemoryException {
        try {
            classType.Invoke("RemoveOutputCacheItem", (Object)path, (Object)providerName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Pics(java.lang.String value) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.PlatformNotSupportedException, system.NotSupportedException, system.threading.ThreadAbortException {
        try {
            classInstance.Invoke("Pics", (Object)value);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AppendCookie(HttpCookie cookie) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.configuration.ConfigurationErrorsException {
        try {
            classInstance.Invoke("AppendCookie", (Object)cookie.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetCookie(HttpCookie cookie) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.configuration.ConfigurationErrorsException, system.web.HttpRequestValidationException {
        try {
            classInstance.Invoke("SetCookie", (Object)cookie.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoute(NetObject routeValues) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.NotSupportedException, system.RankException, system.NullReferenceException, system.web.HttpException, system.ObjectDisposedException, system.threading.LockRecursionException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.ApplicationException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.UriFormatException, system.OutOfMemoryException, system.FormatException, system.OverflowException {
        try {
            classInstance.Invoke("RedirectToRoute", (Object)routeValues.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoute(java.lang.String routeName, NetObject routeValues) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.NotSupportedException, system.RankException, system.NullReferenceException, system.web.HttpException, system.ObjectDisposedException, system.threading.LockRecursionException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.ApplicationException, system.configuration.ConfigurationErrorsException, system.MissingMethodException, system.reflection.TargetInvocationException, system.configuration.provider.ProviderException, system.web.HttpRequestValidationException, system.UriFormatException, system.OutOfMemoryException, system.FormatException, system.OverflowException {
        try {
            classInstance.Invoke("RedirectToRoute", (Object)routeName, (Object)routeValues.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoutePermanent(NetObject routeValues) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.NotSupportedException, system.RankException, system.NullReferenceException, system.web.HttpException, system.ObjectDisposedException, system.threading.LockRecursionException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.ApplicationException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.UriFormatException, system.OutOfMemoryException, system.FormatException, system.OverflowException {
        try {
            classInstance.Invoke("RedirectToRoutePermanent", (Object)routeValues.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RedirectToRoutePermanent(java.lang.String routeName, NetObject routeValues) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.NotSupportedException, system.RankException, system.NullReferenceException, system.web.HttpException, system.ObjectDisposedException, system.threading.LockRecursionException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.ApplicationException, system.configuration.ConfigurationErrorsException, system.MissingMethodException, system.reflection.TargetInvocationException, system.configuration.provider.ProviderException, system.web.HttpRequestValidationException, system.UriFormatException, system.OutOfMemoryException, system.FormatException, system.OverflowException {
        try {
            classInstance.Invoke("RedirectToRoutePermanent", (Object)routeName, (Object)routeValues.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void WriteFile(java.lang.String filename, boolean readIntoMemory) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.web.HttpException, system.ArgumentOutOfRangeException, system.FormatException, system.web.HttpRequestValidationException, system.io.PathTooLongException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.DriveNotFoundException, system.OperationCanceledException, system.NotSupportedException, system.NullReferenceException, system.security.SecurityException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.OverflowException {
        try {
            classInstance.Invoke("WriteFile", (Object)filename, readIntoMemory);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void PushPromise(java.lang.String path) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.web.HttpException, system.configuration.provider.ProviderException, system.configuration.ConfigurationErrorsException, system.threading.ThreadAbortException, system.web.HttpRequestValidationException, system.PlatformNotSupportedException, system.NotSupportedException, system.configuration.ConfigurationException, system.FormatException, system.OverflowException {
        try {
            classInstance.Invoke("PushPromise", (Object)path);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void PushPromise(java.lang.String path, java.lang.String method, NameValueCollection headers) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.web.HttpException, system.configuration.provider.ProviderException, system.configuration.ConfigurationErrorsException, system.threading.ThreadAbortException, system.web.HttpRequestValidationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.OverflowException {
        try {
            classInstance.Invoke("PushPromise", (Object)path, (Object)method, (Object)headers.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ClearHeaders() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.OverflowException, system.web.HttpRequestValidationException, system.reflection.TargetParameterCountException, system.PlatformNotSupportedException {
        try {
            classInstance.Invoke("ClearHeaders");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String ApplyAppPathModifier(java.lang.String virtualPath) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.web.HttpException, system.configuration.ConfigurationErrorsException, system.threading.ThreadAbortException, system.web.HttpRequestValidationException {
        try {
            return (java.lang.String)classInstance.Invoke("ApplyAppPathModifier", (Object)virtualPath);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public boolean getHeadersWritten() throws Throwable {
        try {
            return (boolean)classInstance.Get("HeadersWritten");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHeadersWritten(boolean HeadersWritten) throws Throwable {
        try {
            classInstance.Set("HeadersWritten", HeadersWritten);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSupportsAsyncFlush() throws Throwable {
        try {
            return (boolean)classInstance.Get("SupportsAsyncFlush");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HttpCookieCollection getCookies() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Cookies");
            return new HttpCookieCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NameValueCollection getHeaders() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Headers");
            return new NameValueCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getStatusCode() throws Throwable {
        try {
            return (int)classInstance.Get("StatusCode");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStatusCode(int StatusCode) throws Throwable {
        try {
            classInstance.Set("StatusCode", StatusCode);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getSubStatusCode() throws Throwable {
        try {
            return (int)classInstance.Get("SubStatusCode");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSubStatusCode(int SubStatusCode) throws Throwable {
        try {
            classInstance.Set("SubStatusCode", SubStatusCode);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getStatusDescription() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("StatusDescription");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStatusDescription(java.lang.String StatusDescription) throws Throwable {
        try {
            classInstance.Set("StatusDescription", (Object)StatusDescription);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTrySkipIisCustomErrors() throws Throwable {
        try {
            return (boolean)classInstance.Get("TrySkipIisCustomErrors");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTrySkipIisCustomErrors(boolean TrySkipIisCustomErrors) throws Throwable {
        try {
            classInstance.Set("TrySkipIisCustomErrors", TrySkipIisCustomErrors);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSuppressFormsAuthenticationRedirect() throws Throwable {
        try {
            return (boolean)classInstance.Get("SuppressFormsAuthenticationRedirect");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSuppressFormsAuthenticationRedirect(boolean SuppressFormsAuthenticationRedirect) throws Throwable {
        try {
            classInstance.Set("SuppressFormsAuthenticationRedirect", SuppressFormsAuthenticationRedirect);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSuppressDefaultCacheControlHeader() throws Throwable {
        try {
            return (boolean)classInstance.Get("SuppressDefaultCacheControlHeader");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSuppressDefaultCacheControlHeader(boolean SuppressDefaultCacheControlHeader) throws Throwable {
        try {
            classInstance.Set("SuppressDefaultCacheControlHeader", SuppressDefaultCacheControlHeader);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getBufferOutput() throws Throwable {
        try {
            return (boolean)classInstance.Get("BufferOutput");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBufferOutput(boolean BufferOutput) throws Throwable {
        try {
            classInstance.Set("BufferOutput", BufferOutput);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getContentType() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ContentType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setContentType(java.lang.String ContentType) throws Throwable {
        try {
            classInstance.Set("ContentType", (Object)ContentType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getCharset() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Charset");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCharset(java.lang.String Charset) throws Throwable {
        try {
            classInstance.Set("Charset", (Object)Charset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Encoding getContentEncoding() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ContentEncoding");
            return new Encoding(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setContentEncoding(Encoding ContentEncoding) throws Throwable {
        try {
            classInstance.Set("ContentEncoding", (Object)ContentEncoding.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Encoding getHeaderEncoding() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("HeaderEncoding");
            return new Encoding(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHeaderEncoding(Encoding HeaderEncoding) throws Throwable {
        try {
            classInstance.Set("HeaderEncoding", (Object)HeaderEncoding.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HttpCachePolicy getCache() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Cache");
            return new HttpCachePolicy(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsClientConnected() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsClientConnected");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CancellationToken getClientDisconnectedToken() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ClientDisconnectedToken");
            return new CancellationToken(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsRequestBeingRedirected() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsRequestBeingRedirected");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIsRequestBeingRedirected(boolean IsRequestBeingRedirected) throws Throwable {
        try {
            classInstance.Set("IsRequestBeingRedirected", IsRequestBeingRedirected);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getRedirectLocation() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("RedirectLocation");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRedirectLocation(java.lang.String RedirectLocation) throws Throwable {
        try {
            classInstance.Set("RedirectLocation", (Object)RedirectLocation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TextWriter getOutput() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Output");
            return new TextWriter(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setOutput(TextWriter Output) throws Throwable {
        try {
            classInstance.Set("Output", (Object)Output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Stream getOutputStream() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("OutputStream");
            return new Stream(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Stream getFilter() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Filter");
            return new Stream(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFilter(Stream Filter) throws Throwable {
        try {
            classInstance.Set("Filter", (Object)Filter.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSuppressContent() throws Throwable {
        try {
            return (boolean)classInstance.Get("SuppressContent");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSuppressContent(boolean SuppressContent) throws Throwable {
        try {
            classInstance.Set("SuppressContent", SuppressContent);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getStatus() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Status");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStatus(java.lang.String Status) throws Throwable {
        try {
            classInstance.Set("Status", (Object)Status);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getBuffer() throws Throwable {
        try {
            return (boolean)classInstance.Get("Buffer");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBuffer(boolean Buffer) throws Throwable {
        try {
            classInstance.Set("Buffer", Buffer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getExpires() throws Throwable {
        try {
            return (int)classInstance.Get("Expires");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExpires(int Expires) throws Throwable {
        try {
            classInstance.Set("Expires", Expires);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DateTime getExpiresAbsolute() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ExpiresAbsolute");
            return new DateTime(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExpiresAbsolute(DateTime ExpiresAbsolute) throws Throwable {
        try {
            classInstance.Set("ExpiresAbsolute", (Object)ExpiresAbsolute.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getCacheControl() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("CacheControl");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCacheControl(java.lang.String CacheControl) throws Throwable {
        try {
            classInstance.Set("CacheControl", (Object)CacheControl);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}