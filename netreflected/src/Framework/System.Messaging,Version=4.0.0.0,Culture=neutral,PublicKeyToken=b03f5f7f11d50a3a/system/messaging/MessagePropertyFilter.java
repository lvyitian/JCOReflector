/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.messaging;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section


/**
 * The base .NET class managing System.Messaging.MessagePropertyFilter, System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class MessagePropertyFilter extends NetObject  {
    public static final String assemblyFullName = "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Messaging";
    public static final String className = "System.Messaging.MessagePropertyFilter";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MessagePropertyFilter(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static MessagePropertyFilter castFrom(IJCOBridgeReflected from) throws Throwable {
        return new MessagePropertyFilter(from.getJCOInstance());
    }

    // Constructors section
    
    
    public MessagePropertyFilter() throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public void ClearAll() throws Throwable {
        try {
            classInstance.Invoke("ClearAll");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetDefaults() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("SetDefaults");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetAll() throws Throwable {
        try {
            classInstance.Invoke("SetAll");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject Clone() throws Throwable {
        try {
            JCObject objClone = (JCObject)classInstance.Invoke("Clone");
            return new NetObject(objClone);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public boolean getAcknowledgment() throws Throwable {
        try {
            return (boolean)classInstance.Get("Acknowledgment");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAcknowledgment(boolean Acknowledgment) throws Throwable {
        try {
            classInstance.Set("Acknowledgment", Acknowledgment);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAcknowledgeType() throws Throwable {
        try {
            return (boolean)classInstance.Get("AcknowledgeType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAcknowledgeType(boolean AcknowledgeType) throws Throwable {
        try {
            classInstance.Set("AcknowledgeType", AcknowledgeType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAdministrationQueue() throws Throwable {
        try {
            return (boolean)classInstance.Get("AdministrationQueue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAdministrationQueue(boolean AdministrationQueue) throws Throwable {
        try {
            classInstance.Set("AdministrationQueue", AdministrationQueue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAppSpecific() throws Throwable {
        try {
            return (boolean)classInstance.Get("AppSpecific");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAppSpecific(boolean AppSpecific) throws Throwable {
        try {
            classInstance.Set("AppSpecific", AppSpecific);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getArrivedTime() throws Throwable {
        try {
            return (boolean)classInstance.Get("ArrivedTime");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setArrivedTime(boolean ArrivedTime) throws Throwable {
        try {
            classInstance.Set("ArrivedTime", ArrivedTime);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAttachSenderId() throws Throwable {
        try {
            return (boolean)classInstance.Get("AttachSenderId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAttachSenderId(boolean AttachSenderId) throws Throwable {
        try {
            classInstance.Set("AttachSenderId", AttachSenderId);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAuthenticated() throws Throwable {
        try {
            return (boolean)classInstance.Get("Authenticated");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAuthenticated(boolean Authenticated) throws Throwable {
        try {
            classInstance.Set("Authenticated", Authenticated);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAuthenticationProviderName() throws Throwable {
        try {
            return (boolean)classInstance.Get("AuthenticationProviderName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAuthenticationProviderName(boolean AuthenticationProviderName) throws Throwable {
        try {
            classInstance.Set("AuthenticationProviderName", AuthenticationProviderName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAuthenticationProviderType() throws Throwable {
        try {
            return (boolean)classInstance.Get("AuthenticationProviderType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAuthenticationProviderType(boolean AuthenticationProviderType) throws Throwable {
        try {
            classInstance.Set("AuthenticationProviderType", AuthenticationProviderType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getBody() throws Throwable {
        try {
            return (boolean)classInstance.Get("Body");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBody(boolean Body) throws Throwable {
        try {
            classInstance.Set("Body", Body);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getConnectorType() throws Throwable {
        try {
            return (boolean)classInstance.Get("ConnectorType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConnectorType(boolean ConnectorType) throws Throwable {
        try {
            classInstance.Set("ConnectorType", ConnectorType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getCorrelationId() throws Throwable {
        try {
            return (boolean)classInstance.Get("CorrelationId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCorrelationId(boolean CorrelationId) throws Throwable {
        try {
            classInstance.Set("CorrelationId", CorrelationId);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getDefaultBodySize() throws Throwable {
        try {
            return (int)classInstance.Get("DefaultBodySize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDefaultBodySize(int DefaultBodySize) throws Throwable {
        try {
            classInstance.Set("DefaultBodySize", DefaultBodySize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getDefaultExtensionSize() throws Throwable {
        try {
            return (int)classInstance.Get("DefaultExtensionSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDefaultExtensionSize(int DefaultExtensionSize) throws Throwable {
        try {
            classInstance.Set("DefaultExtensionSize", DefaultExtensionSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getDefaultLabelSize() throws Throwable {
        try {
            return (int)classInstance.Get("DefaultLabelSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDefaultLabelSize(int DefaultLabelSize) throws Throwable {
        try {
            classInstance.Set("DefaultLabelSize", DefaultLabelSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getDestinationQueue() throws Throwable {
        try {
            return (boolean)classInstance.Get("DestinationQueue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDestinationQueue(boolean DestinationQueue) throws Throwable {
        try {
            classInstance.Set("DestinationQueue", DestinationQueue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getDestinationSymmetricKey() throws Throwable {
        try {
            return (boolean)classInstance.Get("DestinationSymmetricKey");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDestinationSymmetricKey(boolean DestinationSymmetricKey) throws Throwable {
        try {
            classInstance.Set("DestinationSymmetricKey", DestinationSymmetricKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getDigitalSignature() throws Throwable {
        try {
            return (boolean)classInstance.Get("DigitalSignature");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDigitalSignature(boolean DigitalSignature) throws Throwable {
        try {
            classInstance.Set("DigitalSignature", DigitalSignature);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEncryptionAlgorithm() throws Throwable {
        try {
            return (boolean)classInstance.Get("EncryptionAlgorithm");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEncryptionAlgorithm(boolean EncryptionAlgorithm) throws Throwable {
        try {
            classInstance.Set("EncryptionAlgorithm", EncryptionAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getExtension() throws Throwable {
        try {
            return (boolean)classInstance.Get("Extension");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExtension(boolean Extension) throws Throwable {
        try {
            classInstance.Set("Extension", Extension);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getHashAlgorithm() throws Throwable {
        try {
            return (boolean)classInstance.Get("HashAlgorithm");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHashAlgorithm(boolean HashAlgorithm) throws Throwable {
        try {
            classInstance.Set("HashAlgorithm", HashAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getId() throws Throwable {
        try {
            return (boolean)classInstance.Get("Id");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setId(boolean Id) throws Throwable {
        try {
            classInstance.Set("Id", Id);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsFirstInTransaction() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsFirstInTransaction");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIsFirstInTransaction(boolean IsFirstInTransaction) throws Throwable {
        try {
            classInstance.Set("IsFirstInTransaction", IsFirstInTransaction);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsLastInTransaction() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsLastInTransaction");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIsLastInTransaction(boolean IsLastInTransaction) throws Throwable {
        try {
            classInstance.Set("IsLastInTransaction", IsLastInTransaction);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getLabel() throws Throwable {
        try {
            return (boolean)classInstance.Get("Label");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLabel(boolean Label) throws Throwable {
        try {
            classInstance.Set("Label", Label);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getLookupId() throws Throwable {
        try {
            return (boolean)classInstance.Get("LookupId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLookupId(boolean LookupId) throws Throwable {
        try {
            classInstance.Set("LookupId", LookupId);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getMessageType() throws Throwable {
        try {
            return (boolean)classInstance.Get("MessageType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMessageType(boolean MessageType) throws Throwable {
        try {
            classInstance.Set("MessageType", MessageType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getPriority() throws Throwable {
        try {
            return (boolean)classInstance.Get("Priority");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPriority(boolean Priority) throws Throwable {
        try {
            classInstance.Set("Priority", Priority);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRecoverable() throws Throwable {
        try {
            return (boolean)classInstance.Get("Recoverable");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRecoverable(boolean Recoverable) throws Throwable {
        try {
            classInstance.Set("Recoverable", Recoverable);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getResponseQueue() throws Throwable {
        try {
            return (boolean)classInstance.Get("ResponseQueue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setResponseQueue(boolean ResponseQueue) throws Throwable {
        try {
            classInstance.Set("ResponseQueue", ResponseQueue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSenderCertificate() throws Throwable {
        try {
            return (boolean)classInstance.Get("SenderCertificate");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSenderCertificate(boolean SenderCertificate) throws Throwable {
        try {
            classInstance.Set("SenderCertificate", SenderCertificate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSenderId() throws Throwable {
        try {
            return (boolean)classInstance.Get("SenderId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSenderId(boolean SenderId) throws Throwable {
        try {
            classInstance.Set("SenderId", SenderId);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSenderVersion() throws Throwable {
        try {
            return (boolean)classInstance.Get("SenderVersion");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSenderVersion(boolean SenderVersion) throws Throwable {
        try {
            classInstance.Set("SenderVersion", SenderVersion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSentTime() throws Throwable {
        try {
            return (boolean)classInstance.Get("SentTime");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSentTime(boolean SentTime) throws Throwable {
        try {
            classInstance.Set("SentTime", SentTime);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSourceMachine() throws Throwable {
        try {
            return (boolean)classInstance.Get("SourceMachine");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSourceMachine(boolean SourceMachine) throws Throwable {
        try {
            classInstance.Set("SourceMachine", SourceMachine);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTimeToBeReceived() throws Throwable {
        try {
            return (boolean)classInstance.Get("TimeToBeReceived");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTimeToBeReceived(boolean TimeToBeReceived) throws Throwable {
        try {
            classInstance.Set("TimeToBeReceived", TimeToBeReceived);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTimeToReachQueue() throws Throwable {
        try {
            return (boolean)classInstance.Get("TimeToReachQueue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTimeToReachQueue(boolean TimeToReachQueue) throws Throwable {
        try {
            classInstance.Set("TimeToReachQueue", TimeToReachQueue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTransactionId() throws Throwable {
        try {
            return (boolean)classInstance.Get("TransactionId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTransactionId(boolean TransactionId) throws Throwable {
        try {
            classInstance.Set("TransactionId", TransactionId);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTransactionStatusQueue() throws Throwable {
        try {
            return (boolean)classInstance.Get("TransactionStatusQueue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTransactionStatusQueue(boolean TransactionStatusQueue) throws Throwable {
        try {
            classInstance.Set("TransactionStatusQueue", TransactionStatusQueue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseAuthentication() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseAuthentication");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseAuthentication(boolean UseAuthentication) throws Throwable {
        try {
            classInstance.Set("UseAuthentication", UseAuthentication);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseDeadLetterQueue() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseDeadLetterQueue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseDeadLetterQueue(boolean UseDeadLetterQueue) throws Throwable {
        try {
            classInstance.Set("UseDeadLetterQueue", UseDeadLetterQueue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseEncryption() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseEncryption");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseEncryption(boolean UseEncryption) throws Throwable {
        try {
            classInstance.Set("UseEncryption", UseEncryption);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseJournalQueue() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseJournalQueue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseJournalQueue(boolean UseJournalQueue) throws Throwable {
        try {
            classInstance.Set("UseJournalQueue", UseJournalQueue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseTracing() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseTracing");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseTracing(boolean UseTracing) throws Throwable {
        try {
            classInstance.Set("UseTracing", UseTracing);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}