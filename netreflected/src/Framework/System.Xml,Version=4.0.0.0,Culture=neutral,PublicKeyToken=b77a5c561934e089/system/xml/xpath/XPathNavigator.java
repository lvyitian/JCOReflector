/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.xml.xpath;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.xml.xpath.XPathNavigator;
import system.xml.XmlReader;
import system.xml.XmlWriter;
import system.xml.xpath.XPathNodeType;
import system.xml.xpath.XPathExpression;
import system.xml.xpath.XPathNodeIterator;
import system.xml.XmlNodeOrder;
import system.xml.schema.XmlSchemaSet;
import system.xml.schema.ValidationEventHandler;
import system.xml.schema.XmlSchemaType;
import system.DateTime;
import system.xml.XmlNameTable;


/**
 * The base .NET class managing System.Xml.XPath.XPathNavigator, System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class XPathNavigator extends NetObject  {
    public static final String assemblyFullName = "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "System.Xml";
    public static final String className = "System.Xml.XPath.XPathNavigator";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XPathNavigator(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static XPathNavigator castFrom(IJCOBridgeReflected from) throws Throwable {
        return new XPathNavigator(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public void SetValue(java.lang.String value) throws Throwable, system.NotSupportedException {
        try {
            classInstance.Invoke("SetValue", (Object)value);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetTypedValue(NetObject typedValue) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("SetTypedValue", (Object)typedValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XPathNavigator CreateNavigator() throws Throwable {
        try {
            JCObject objCreateNavigator = (JCObject)classInstance.Invoke("CreateNavigator");
            return new XPathNavigator(objCreateNavigator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlReader ReadSubtree() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            JCObject objReadSubtree = (JCObject)classInstance.Invoke("ReadSubtree");
            return new XmlReader(objReadSubtree);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void WriteSubtree(XmlWriter writer) throws Throwable, system.ArgumentNullException {
        try {
            classInstance.Invoke("WriteSubtree", (Object)writer.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetAttribute(java.lang.String localName, java.lang.String namespaceURI) throws Throwable {
        try {
            return (java.lang.String)classInstance.Invoke("GetAttribute", (Object)localName, (Object)namespaceURI);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean MoveToAttribute(java.lang.String localName, java.lang.String namespaceURI) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("MoveToAttribute", (Object)localName, (Object)namespaceURI);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean MoveToNamespace(java.lang.String name) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("MoveToNamespace", (Object)name);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean MoveToFirstNamespace() throws Throwable {
        try {
            return (boolean)classInstance.Invoke("MoveToFirstNamespace");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean MoveToNextNamespace() throws Throwable {
        try {
            return (boolean)classInstance.Invoke("MoveToNextNamespace");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean MoveToFirst() throws Throwable {
        try {
            return (boolean)classInstance.Invoke("MoveToFirst");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void MoveToRoot() throws Throwable {
        try {
            classInstance.Invoke("MoveToRoot");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean MoveToChild(java.lang.String localName, java.lang.String namespaceURI) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("MoveToChild", (Object)localName, (Object)namespaceURI);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean MoveToChild(XPathNodeType type) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("MoveToChild", (Object)type.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean MoveToFollowing(java.lang.String localName, java.lang.String namespaceURI) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("MoveToFollowing", (Object)localName, (Object)namespaceURI);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean MoveToFollowing(java.lang.String localName, java.lang.String namespaceURI, XPathNavigator end) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("MoveToFollowing", (Object)localName, (Object)namespaceURI, (Object)end.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean MoveToFollowing(XPathNodeType type) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("MoveToFollowing", (Object)type.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean MoveToFollowing(XPathNodeType type, XPathNavigator end) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("MoveToFollowing", (Object)type.getJCOInstance(), (Object)end.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean MoveToNext(java.lang.String localName, java.lang.String namespaceURI) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("MoveToNext", (Object)localName, (Object)namespaceURI);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean MoveToNext(XPathNodeType type) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("MoveToNext", (Object)type.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsDescendant(XPathNavigator nav) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("IsDescendant", (Object)nav.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XPathExpression Compile(java.lang.String xpath) throws Throwable, system.NotImplementedException, system.NotSupportedException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.xml.xpath.XPathException {
        try {
            JCObject objCompile = (JCObject)classInstance.Invoke("Compile", (Object)xpath);
            return new XPathExpression(objCompile);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XPathNavigator SelectSingleNode(java.lang.String xpath) throws Throwable, system.NotImplementedException, system.NotSupportedException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.xml.xpath.XPathException {
        try {
            JCObject objSelectSingleNode = (JCObject)classInstance.Invoke("SelectSingleNode", (Object)xpath);
            return new XPathNavigator(objSelectSingleNode);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XPathNavigator SelectSingleNode(XPathExpression expression) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.xml.xpath.XPathException {
        try {
            JCObject objSelectSingleNode = (JCObject)classInstance.Invoke("SelectSingleNode", (Object)expression.getJCOInstance());
            return new XPathNavigator(objSelectSingleNode);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XPathNodeIterator Select(java.lang.String xpath) throws Throwable, system.NotImplementedException, system.NotSupportedException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.xml.xpath.XPathException {
        try {
            JCObject objSelect = (JCObject)classInstance.Invoke("Select", (Object)xpath);
            return new XPathNodeIterator(objSelect);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XPathNodeIterator Select(XPathExpression expr) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.xml.xpath.XPathException {
        try {
            JCObject objSelect = (JCObject)classInstance.Invoke("Select", (Object)expr.getJCOInstance());
            return new XPathNodeIterator(objSelect);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject Evaluate(java.lang.String xpath) throws Throwable, system.NotImplementedException, system.NotSupportedException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.xml.xpath.XPathException {
        try {
            JCObject objEvaluate = (JCObject)classInstance.Invoke("Evaluate", (Object)xpath);
            return new NetObject(objEvaluate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject Evaluate(XPathExpression expr) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.xml.xpath.XPathException {
        try {
            JCObject objEvaluate = (JCObject)classInstance.Invoke("Evaluate", (Object)expr.getJCOInstance());
            return new NetObject(objEvaluate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject Evaluate(XPathExpression expr, XPathNodeIterator context) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.xml.xpath.XPathException {
        try {
            JCObject objEvaluate = (JCObject)classInstance.Invoke("Evaluate", (Object)expr.getJCOInstance(), (Object)context.getJCOInstance());
            return new NetObject(objEvaluate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Matches(XPathExpression expr) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.xml.xpath.XPathException {
        try {
            return (boolean)classInstance.Invoke("Matches", (Object)expr.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Matches(java.lang.String xpath) throws Throwable, system.ArgumentException, system.NotImplementedException, system.NotSupportedException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.ArgumentOutOfRangeException, system.xml.xpath.XPathException, system.ArgumentNullException {
        try {
            return (boolean)classInstance.Invoke("Matches", (Object)xpath);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XPathNodeIterator SelectChildren(XPathNodeType type) throws Throwable {
        try {
            JCObject objSelectChildren = (JCObject)classInstance.Invoke("SelectChildren", (Object)type.getJCOInstance());
            return new XPathNodeIterator(objSelectChildren);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XPathNodeIterator SelectChildren(java.lang.String name, java.lang.String namespaceURI) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objSelectChildren = (JCObject)classInstance.Invoke("SelectChildren", (Object)name, (Object)namespaceURI);
            return new XPathNodeIterator(objSelectChildren);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XPathNodeIterator SelectAncestors(XPathNodeType type, boolean matchSelf) throws Throwable {
        try {
            JCObject objSelectAncestors = (JCObject)classInstance.Invoke("SelectAncestors", (Object)type.getJCOInstance(), matchSelf);
            return new XPathNodeIterator(objSelectAncestors);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XPathNodeIterator SelectAncestors(java.lang.String name, java.lang.String namespaceURI, boolean matchSelf) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objSelectAncestors = (JCObject)classInstance.Invoke("SelectAncestors", (Object)name, (Object)namespaceURI, matchSelf);
            return new XPathNodeIterator(objSelectAncestors);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XPathNodeIterator SelectDescendants(XPathNodeType type, boolean matchSelf) throws Throwable {
        try {
            JCObject objSelectDescendants = (JCObject)classInstance.Invoke("SelectDescendants", (Object)type.getJCOInstance(), matchSelf);
            return new XPathNodeIterator(objSelectDescendants);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XPathNodeIterator SelectDescendants(java.lang.String name, java.lang.String namespaceURI, boolean matchSelf) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objSelectDescendants = (JCObject)classInstance.Invoke("SelectDescendants", (Object)name, (Object)namespaceURI, matchSelf);
            return new XPathNodeIterator(objSelectDescendants);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlWriter PrependChild() throws Throwable, system.NotSupportedException {
        try {
            JCObject objPrependChild = (JCObject)classInstance.Invoke("PrependChild");
            return new XmlWriter(objPrependChild);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlWriter AppendChild() throws Throwable, system.NotSupportedException {
        try {
            JCObject objAppendChild = (JCObject)classInstance.Invoke("AppendChild");
            return new XmlWriter(objAppendChild);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlWriter InsertAfter() throws Throwable, system.NotSupportedException {
        try {
            JCObject objInsertAfter = (JCObject)classInstance.Invoke("InsertAfter");
            return new XmlWriter(objInsertAfter);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlWriter InsertBefore() throws Throwable, system.NotSupportedException {
        try {
            JCObject objInsertBefore = (JCObject)classInstance.Invoke("InsertBefore");
            return new XmlWriter(objInsertBefore);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlWriter CreateAttributes() throws Throwable, system.NotSupportedException {
        try {
            JCObject objCreateAttributes = (JCObject)classInstance.Invoke("CreateAttributes");
            return new XmlWriter(objCreateAttributes);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlWriter ReplaceRange(XPathNavigator lastSiblingToReplace) throws Throwable, system.NotSupportedException {
        try {
            JCObject objReplaceRange = (JCObject)classInstance.Invoke("ReplaceRange", (Object)lastSiblingToReplace.getJCOInstance());
            return new XmlWriter(objReplaceRange);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ReplaceSelf(java.lang.String newNode) throws Throwable, system.ArgumentNullException, system.NullReferenceException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.xml.XmlException, system.NotSupportedException, system.security.SecurityException, system.UnauthorizedAccessException, system.io.IOException {
        try {
            classInstance.Invoke("ReplaceSelf", (Object)newNode);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ReplaceSelf(XmlReader newNode) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("ReplaceSelf", (Object)newNode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ReplaceSelf(XPathNavigator newNode) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.NotSupportedException {
        try {
            classInstance.Invoke("ReplaceSelf", (Object)newNode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AppendChild(java.lang.String newChild) throws Throwable, system.ArgumentNullException, system.NullReferenceException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.xml.XmlException, system.NotSupportedException, system.security.SecurityException, system.UnauthorizedAccessException, system.io.IOException {
        try {
            classInstance.Invoke("AppendChild", (Object)newChild);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AppendChild(XmlReader newChild) throws Throwable, system.ArgumentNullException, system.NotSupportedException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("AppendChild", (Object)newChild.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AppendChild(XPathNavigator newChild) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("AppendChild", (Object)newChild.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void PrependChild(java.lang.String newChild) throws Throwable, system.ArgumentNullException, system.NullReferenceException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.xml.XmlException, system.NotSupportedException, system.security.SecurityException, system.UnauthorizedAccessException, system.io.IOException {
        try {
            classInstance.Invoke("PrependChild", (Object)newChild);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void PrependChild(XmlReader newChild) throws Throwable, system.ArgumentNullException, system.NotSupportedException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("PrependChild", (Object)newChild.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void PrependChild(XPathNavigator newChild) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("PrependChild", (Object)newChild.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void InsertBefore(java.lang.String newSibling) throws Throwable, system.ArgumentNullException, system.NullReferenceException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.xml.XmlException, system.NotSupportedException, system.security.SecurityException, system.UnauthorizedAccessException, system.io.IOException {
        try {
            classInstance.Invoke("InsertBefore", (Object)newSibling);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void InsertBefore(XmlReader newSibling) throws Throwable, system.ArgumentNullException, system.NotSupportedException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("InsertBefore", (Object)newSibling.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void InsertBefore(XPathNavigator newSibling) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("InsertBefore", (Object)newSibling.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void InsertAfter(java.lang.String newSibling) throws Throwable, system.ArgumentNullException, system.NullReferenceException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.xml.XmlException, system.NotSupportedException, system.security.SecurityException, system.UnauthorizedAccessException, system.io.IOException {
        try {
            classInstance.Invoke("InsertAfter", (Object)newSibling);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void InsertAfter(XmlReader newSibling) throws Throwable, system.ArgumentNullException, system.NotSupportedException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("InsertAfter", (Object)newSibling.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void InsertAfter(XPathNavigator newSibling) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("InsertAfter", (Object)newSibling.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DeleteRange(XPathNavigator lastSiblingToDelete) throws Throwable, system.NotSupportedException {
        try {
            classInstance.Invoke("DeleteRange", (Object)lastSiblingToDelete.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DeleteSelf() throws Throwable, system.NotSupportedException {
        try {
            classInstance.Invoke("DeleteSelf");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void PrependChildElement(java.lang.String prefix, java.lang.String localName, java.lang.String namespaceURI, java.lang.String value) throws Throwable, system.NotSupportedException {
        try {
            classInstance.Invoke("PrependChildElement", (Object)prefix, (Object)localName, (Object)namespaceURI, (Object)value);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AppendChildElement(java.lang.String prefix, java.lang.String localName, java.lang.String namespaceURI, java.lang.String value) throws Throwable, system.NotSupportedException {
        try {
            classInstance.Invoke("AppendChildElement", (Object)prefix, (Object)localName, (Object)namespaceURI, (Object)value);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void InsertElementBefore(java.lang.String prefix, java.lang.String localName, java.lang.String namespaceURI, java.lang.String value) throws Throwable, system.NotSupportedException {
        try {
            classInstance.Invoke("InsertElementBefore", (Object)prefix, (Object)localName, (Object)namespaceURI, (Object)value);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void InsertElementAfter(java.lang.String prefix, java.lang.String localName, java.lang.String namespaceURI, java.lang.String value) throws Throwable, system.NotSupportedException {
        try {
            classInstance.Invoke("InsertElementAfter", (Object)prefix, (Object)localName, (Object)namespaceURI, (Object)value);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void CreateAttribute(java.lang.String prefix, java.lang.String localName, java.lang.String namespaceURI, java.lang.String value) throws Throwable, system.NotSupportedException {
        try {
            classInstance.Invoke("CreateAttribute", (Object)prefix, (Object)localName, (Object)namespaceURI, (Object)value);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String LookupNamespace(java.lang.String prefix) throws Throwable {
        try {
            return (java.lang.String)classInstance.Invoke("LookupNamespace", (Object)prefix);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String LookupPrefix(java.lang.String namespaceURI) throws Throwable {
        try {
            return (java.lang.String)classInstance.Invoke("LookupPrefix", (Object)namespaceURI);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetNamespace(java.lang.String name) throws Throwable {
        try {
            return (java.lang.String)classInstance.Invoke("GetNamespace", (Object)name);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlNodeOrder ComparePosition(XPathNavigator nav) throws Throwable {
        try {
            JCObject objComparePosition = (JCObject)classInstance.Invoke("ComparePosition", (Object)nav.getJCOInstance());
            return new XmlNodeOrder(objComparePosition);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CheckValidity(XmlSchemaSet schemas, ValidationEventHandler validationEventHandler) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.security.SecurityException, system.UnauthorizedAccessException, system.io.IOException, system.xml.XmlException, system.MulticastNotSupportedException, system.IndexOutOfRangeException, system.xml.schema.XmlSchemaException {
        try {
            return (boolean)classInstance.Invoke("CheckValidity", (Object)schemas.getJCOInstance(), validationEventHandler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject ValueAs(NetType returnType) throws Throwable {
        try {
            JCObject objValueAs = (JCObject)classInstance.Invoke("ValueAs", (Object)returnType.getJCOInstance());
            return new NetObject(objValueAs);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public boolean getIsNode() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsNode");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlSchemaType getXmlType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("XmlType");
            return new XmlSchemaType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getTypedValue() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("TypedValue");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetType getValueType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ValueType");
            return new NetType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getValueAsBoolean() throws Throwable {
        try {
            return (boolean)classInstance.Get("ValueAsBoolean");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DateTime getValueAsDateTime() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ValueAsDateTime");
            return new DateTime(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getValueAsDouble() throws Throwable {
        try {
            return (double)classInstance.Get("ValueAsDouble");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getValueAsInt() throws Throwable {
        try {
            return (int)classInstance.Get("ValueAsInt");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getValueAsLong() throws Throwable {
        try {
            return (long)classInstance.Get("ValueAsLong");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlNameTable getNameTable() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("NameTable");
            return new XmlNameTable(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XPathNodeType getNodeType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("NodeType");
            return new XPathNodeType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getLocalName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("LocalName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Name");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getNamespaceURI() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("NamespaceURI");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getPrefix() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Prefix");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getBaseURI() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("BaseURI");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsEmptyElement() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsEmptyElement");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getXmlLang() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("XmlLang");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getUnderlyingObject() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("UnderlyingObject");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getHasAttributes() throws Throwable {
        try {
            return (boolean)classInstance.Get("HasAttributes");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getHasChildren() throws Throwable {
        try {
            return (boolean)classInstance.Get("HasChildren");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getCanEdit() throws Throwable {
        try {
            return (boolean)classInstance.Get("CanEdit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getOuterXml() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("OuterXml");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setOuterXml(java.lang.String OuterXml) throws Throwable {
        try {
            classInstance.Set("OuterXml", (Object)OuterXml);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getInnerXml() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("InnerXml");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInnerXml(java.lang.String InnerXml) throws Throwable {
        try {
            classInstance.Set("InnerXml", (Object)InnerXml);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getValue() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Value");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}