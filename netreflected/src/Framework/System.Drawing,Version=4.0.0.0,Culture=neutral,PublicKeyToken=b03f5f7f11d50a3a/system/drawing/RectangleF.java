/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.drawing;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.Single;
import system.drawing.PointF;
import system.drawing.SizeF;
import system.drawing.RectangleF;


/**
 * The base .NET class managing System.Drawing.RectangleF, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class RectangleF extends NetObject  {
    public static final String assemblyFullName = "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Drawing";
    public static final String className = "System.Drawing.RectangleF";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RectangleF(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static RectangleF castFrom(IJCOBridgeReflected from) throws Throwable {
        return new RectangleF(from.getJCOInstance());
    }

    // Constructors section
    
    
    public RectangleF(Single x, Single y, Single width, Single height) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)x.getJCOInstance(), (Object)y.getJCOInstance(), (Object)width.getJCOInstance(), (Object)height.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RectangleF(PointF location, SizeF size) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)location.getJCOInstance(), (Object)size.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public void Inflate(Single x, Single y) throws Throwable {
        try {
            classInstance.Invoke("Inflate", (Object)x.getJCOInstance(), (Object)y.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RectangleF Union(RectangleF a, RectangleF b) throws Throwable {
        try {
            JCObject objUnion = (JCObject)classType.Invoke("Union", (Object)a.getJCOInstance(), (Object)b.getJCOInstance());
            return new RectangleF(objUnion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RectangleF FromLTRB(Single left, Single top, Single right, Single bottom) throws Throwable {
        try {
            JCObject objFromLTRB = (JCObject)classType.Invoke("FromLTRB", (Object)left.getJCOInstance(), (Object)top.getJCOInstance(), (Object)right.getJCOInstance(), (Object)bottom.getJCOInstance());
            return new RectangleF(objFromLTRB);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Contains(Single x, Single y) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("Contains", (Object)x.getJCOInstance(), (Object)y.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Contains(PointF pt) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("Contains", (Object)pt.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Contains(RectangleF rect) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("Contains", (Object)rect.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Inflate(SizeF size) throws Throwable {
        try {
            classInstance.Invoke("Inflate", (Object)size.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RectangleF Inflate(RectangleF rect, Single x, Single y) throws Throwable {
        try {
            JCObject objInflate = (JCObject)classType.Invoke("Inflate", (Object)rect.getJCOInstance(), (Object)x.getJCOInstance(), (Object)y.getJCOInstance());
            return new RectangleF(objInflate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Intersect(RectangleF rect) throws Throwable {
        try {
            classInstance.Invoke("Intersect", (Object)rect.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RectangleF Intersect(RectangleF a, RectangleF b) throws Throwable {
        try {
            JCObject objIntersect = (JCObject)classType.Invoke("Intersect", (Object)a.getJCOInstance(), (Object)b.getJCOInstance());
            return new RectangleF(objIntersect);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IntersectsWith(RectangleF rect) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("IntersectsWith", (Object)rect.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Offset(PointF pos) throws Throwable {
        try {
            classInstance.Invoke("Offset", (Object)pos.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Offset(Single x, Single y) throws Throwable {
        try {
            classInstance.Invoke("Offset", (Object)x.getJCOInstance(), (Object)y.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public PointF getLocation() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Location");
            return new PointF(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLocation(PointF Location) throws Throwable {
        try {
            classInstance.Set("Location", (Object)Location.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SizeF getSize() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Size");
            return new SizeF(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSize(SizeF Size) throws Throwable {
        try {
            classInstance.Set("Size", (Object)Size.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getX() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("X");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setX(Single X) throws Throwable {
        try {
            classInstance.Set("X", (Object)X.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getY() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Y");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setY(Single Y) throws Throwable {
        try {
            classInstance.Set("Y", (Object)Y.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getWidth() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Width");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setWidth(Single Width) throws Throwable {
        try {
            classInstance.Set("Width", (Object)Width.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getHeight() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Height");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHeight(Single Height) throws Throwable {
        try {
            classInstance.Set("Height", (Object)Height.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getLeft() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Left");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getTop() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Top");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getRight() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Right");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single getBottom() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Bottom");
            return new Single(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsEmpty() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsEmpty");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}