/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.net;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.io.Stream;
import system.net.WebResponse;
import system.Uri;
import system.net.DecompressionMethods;
import system.DateTime;
import system.net.HttpContinueDelegate;
import system.net.ServicePoint;
import system.net.security.RemoteCertificateValidationCallback;
import system.security.cryptography.x509certificates.X509CertificateCollection;
import system.Version;
import system.net.CookieContainer;
import system.net.WebHeaderCollection;
import system.net.cache.RequestCachePolicy;
import system.net.security.AuthenticationLevel;
import system.security.principal.TokenImpersonationLevel;


/**
 * The base .NET class managing System.Net.HttpWebRequest, System.Net.Requests, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class HttpWebRequest extends NetObject  {
    public static final String assemblyFullName = "System.Net.Requests, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Net.Requests";
    public static final String className = "System.Net.HttpWebRequest";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HttpWebRequest(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static HttpWebRequest castFrom(IJCOBridgeReflected from) throws Throwable {
        return new HttpWebRequest(from.getJCOInstance());
    }

    // Constructors section
    
    
    public HttpWebRequest() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.PlatformNotSupportedException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public void AddRange(int from, int to) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("AddRange", from, to);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddRange(long from, long to) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("AddRange", from, to);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddRange(int range) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("AddRange", range);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddRange(long range) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("AddRange", range);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddRange(java.lang.String rangeSpecifier, int from, int to) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("AddRange", (Object)rangeSpecifier, from, to);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddRange(java.lang.String rangeSpecifier, long from, long to) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("AddRange", (Object)rangeSpecifier, from, to);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddRange(java.lang.String rangeSpecifier, int range) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("AddRange", (Object)rangeSpecifier, range);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddRange(java.lang.String rangeSpecifier, long range) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("AddRange", (Object)rangeSpecifier, range);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Abort() throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.ObjectDisposedException, system.AggregateException {
        try {
            classInstance.Invoke("Abort");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebResponse GetResponse() throws Throwable, system.ArgumentNullException, system.diagnostics.tracing.EventSourceException, system.PlatformNotSupportedException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException, system.ArgumentException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException {
        try {
            JCObject objGetResponse = (JCObject)classInstance.Invoke("GetResponse");
            return new WebResponse(objGetResponse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Stream GetRequestStream() throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.globalization.CultureNotFoundException, system.net.WebException, system.net.ProtocolViolationException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.threading.tasks.TaskSchedulerException, system.ObjectDisposedException, system.OperationCanceledException {
        try {
            JCObject objGetRequestStream = (JCObject)classInstance.Invoke("GetRequestStream");
            return new Stream(objGetRequestStream);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.NotSupportedException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            JCObject objGetLifetimeService = (JCObject)classInstance.Invoke("GetLifetimeService");
            return new NetObject(objGetLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject InitializeLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.NotSupportedException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            JCObject objInitializeLifetimeService = (JCObject)classInstance.Invoke("InitializeLifetimeService");
            return new NetObject(objInitializeLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public java.lang.String getAccept() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Accept");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAccept(java.lang.String Accept) throws Throwable {
        try {
            classInstance.Set("Accept", (Object)Accept);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowReadStreamBuffering() throws Throwable {
        try {
            return (boolean)classInstance.Get("AllowReadStreamBuffering");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowReadStreamBuffering(boolean AllowReadStreamBuffering) throws Throwable {
        try {
            classInstance.Set("AllowReadStreamBuffering", AllowReadStreamBuffering);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMaximumResponseHeadersLength() throws Throwable {
        try {
            return (int)classInstance.Get("MaximumResponseHeadersLength");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaximumResponseHeadersLength(int MaximumResponseHeadersLength) throws Throwable {
        try {
            classInstance.Set("MaximumResponseHeadersLength", MaximumResponseHeadersLength);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMaximumAutomaticRedirections() throws Throwable {
        try {
            return (int)classInstance.Get("MaximumAutomaticRedirections");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaximumAutomaticRedirections(int MaximumAutomaticRedirections) throws Throwable {
        try {
            classInstance.Set("MaximumAutomaticRedirections", MaximumAutomaticRedirections);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getContentType() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ContentType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setContentType(java.lang.String ContentType) throws Throwable {
        try {
            classInstance.Set("ContentType", (Object)ContentType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getContinueTimeout() throws Throwable {
        try {
            return (int)classInstance.Get("ContinueTimeout");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setContinueTimeout(int ContinueTimeout) throws Throwable {
        try {
            classInstance.Set("ContinueTimeout", ContinueTimeout);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getTimeout() throws Throwable {
        try {
            return (int)classInstance.Get("Timeout");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTimeout(int Timeout) throws Throwable {
        try {
            classInstance.Set("Timeout", Timeout);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getContentLength() throws Throwable {
        try {
            return (long)classInstance.Get("ContentLength");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setContentLength(long ContentLength) throws Throwable {
        try {
            classInstance.Set("ContentLength", ContentLength);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Uri getAddress() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Address");
            return new Uri(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getUserAgent() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("UserAgent");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUserAgent(java.lang.String UserAgent) throws Throwable {
        try {
            classInstance.Set("UserAgent", (Object)UserAgent);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getHost() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Host");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHost(java.lang.String Host) throws Throwable {
        try {
            classInstance.Set("Host", (Object)Host);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getPipelined() throws Throwable {
        try {
            return (boolean)classInstance.Get("Pipelined");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPipelined(boolean Pipelined) throws Throwable {
        try {
            classInstance.Set("Pipelined", Pipelined);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getReferer() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Referer");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReferer(java.lang.String Referer) throws Throwable {
        try {
            classInstance.Set("Referer", (Object)Referer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getMediaType() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("MediaType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMediaType(java.lang.String MediaType) throws Throwable {
        try {
            classInstance.Set("MediaType", (Object)MediaType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTransferEncoding() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TransferEncoding");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTransferEncoding(java.lang.String TransferEncoding) throws Throwable {
        try {
            classInstance.Set("TransferEncoding", (Object)TransferEncoding);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getKeepAlive() throws Throwable {
        try {
            return (boolean)classInstance.Get("KeepAlive");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setKeepAlive(boolean KeepAlive) throws Throwable {
        try {
            classInstance.Set("KeepAlive", KeepAlive);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUnsafeAuthenticatedConnectionSharing() throws Throwable {
        try {
            return (boolean)classInstance.Get("UnsafeAuthenticatedConnectionSharing");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUnsafeAuthenticatedConnectionSharing(boolean UnsafeAuthenticatedConnectionSharing) throws Throwable {
        try {
            classInstance.Set("UnsafeAuthenticatedConnectionSharing", UnsafeAuthenticatedConnectionSharing);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DecompressionMethods getAutomaticDecompression() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AutomaticDecompression");
            return new DecompressionMethods(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutomaticDecompression(DecompressionMethods AutomaticDecompression) throws Throwable {
        try {
            classInstance.Set("AutomaticDecompression", (Object)AutomaticDecompression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowWriteStreamBuffering() throws Throwable {
        try {
            return (boolean)classInstance.Get("AllowWriteStreamBuffering");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowWriteStreamBuffering(boolean AllowWriteStreamBuffering) throws Throwable {
        try {
            classInstance.Set("AllowWriteStreamBuffering", AllowWriteStreamBuffering);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowAutoRedirect() throws Throwable {
        try {
            return (boolean)classInstance.Get("AllowAutoRedirect");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowAutoRedirect(boolean AllowAutoRedirect) throws Throwable {
        try {
            classInstance.Set("AllowAutoRedirect", AllowAutoRedirect);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getConnectionGroupName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ConnectionGroupName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConnectionGroupName(java.lang.String ConnectionGroupName) throws Throwable {
        try {
            classInstance.Set("ConnectionGroupName", (Object)ConnectionGroupName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getPreAuthenticate() throws Throwable {
        try {
            return (boolean)classInstance.Get("PreAuthenticate");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPreAuthenticate(boolean PreAuthenticate) throws Throwable {
        try {
            classInstance.Set("PreAuthenticate", PreAuthenticate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getConnection() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Connection");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConnection(java.lang.String Connection) throws Throwable {
        try {
            classInstance.Set("Connection", (Object)Connection);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getExpect() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Expect");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExpect(java.lang.String Expect) throws Throwable {
        try {
            classInstance.Set("Expect", (Object)Expect);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DateTime getIfModifiedSince() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("IfModifiedSince");
            return new DateTime(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIfModifiedSince(DateTime IfModifiedSince) throws Throwable {
        try {
            classInstance.Set("IfModifiedSince", (Object)IfModifiedSince.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DateTime getDate() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Date");
            return new DateTime(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDate(DateTime Date) throws Throwable {
        try {
            classInstance.Set("Date", (Object)Date.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSendChunked() throws Throwable {
        try {
            return (boolean)classInstance.Get("SendChunked");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSendChunked(boolean SendChunked) throws Throwable {
        try {
            classInstance.Set("SendChunked", SendChunked);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HttpContinueDelegate getContinueDelegate() throws Throwable {
        try {
            return (HttpContinueDelegate)classInstance.Get("ContinueDelegate");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setContinueDelegate(HttpContinueDelegate ContinueDelegate) throws Throwable {
        try {
            classInstance.Set("ContinueDelegate", ContinueDelegate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ServicePoint getServicePoint() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ServicePoint");
            return new ServicePoint(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RemoteCertificateValidationCallback getServerCertificateValidationCallback() throws Throwable {
        try {
            return (RemoteCertificateValidationCallback)classInstance.Get("ServerCertificateValidationCallback");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setServerCertificateValidationCallback(RemoteCertificateValidationCallback ServerCertificateValidationCallback) throws Throwable {
        try {
            classInstance.Set("ServerCertificateValidationCallback", ServerCertificateValidationCallback);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public X509CertificateCollection getClientCertificates() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ClientCertificates");
            return new X509CertificateCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setClientCertificates(X509CertificateCollection ClientCertificates) throws Throwable {
        try {
            classInstance.Set("ClientCertificates", (Object)ClientCertificates.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Version getProtocolVersion() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ProtocolVersion");
            return new Version(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setProtocolVersion(Version ProtocolVersion) throws Throwable {
        try {
            classInstance.Set("ProtocolVersion", (Object)ProtocolVersion.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getReadWriteTimeout() throws Throwable {
        try {
            return (int)classInstance.Get("ReadWriteTimeout");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReadWriteTimeout(int ReadWriteTimeout) throws Throwable {
        try {
            classInstance.Set("ReadWriteTimeout", ReadWriteTimeout);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CookieContainer getCookieContainer() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CookieContainer");
            return new CookieContainer(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCookieContainer(CookieContainer CookieContainer) throws Throwable {
        try {
            classInstance.Set("CookieContainer", (Object)CookieContainer.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getHaveResponse() throws Throwable {
        try {
            return (boolean)classInstance.Get("HaveResponse");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebHeaderCollection getHeaders() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Headers");
            return new WebHeaderCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHeaders(WebHeaderCollection Headers) throws Throwable {
        try {
            classInstance.Set("Headers", (Object)Headers.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getMethod() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Method");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMethod(java.lang.String Method) throws Throwable {
        try {
            classInstance.Set("Method", (Object)Method);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Uri getRequestUri() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RequestUri");
            return new Uri(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSupportsCookieContainer() throws Throwable {
        try {
            return (boolean)classInstance.Get("SupportsCookieContainer");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseDefaultCredentials() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseDefaultCredentials");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseDefaultCredentials(boolean UseDefaultCredentials) throws Throwable {
        try {
            classInstance.Set("UseDefaultCredentials", UseDefaultCredentials);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RequestCachePolicy getCachePolicy() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CachePolicy");
            return new RequestCachePolicy(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCachePolicy(RequestCachePolicy CachePolicy) throws Throwable {
        try {
            classInstance.Set("CachePolicy", (Object)CachePolicy.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AuthenticationLevel getAuthenticationLevel() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AuthenticationLevel");
            return new AuthenticationLevel(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAuthenticationLevel(AuthenticationLevel AuthenticationLevel) throws Throwable {
        try {
            classInstance.Set("AuthenticationLevel", (Object)AuthenticationLevel.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TokenImpersonationLevel getImpersonationLevel() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ImpersonationLevel");
            return new TokenImpersonationLevel(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setImpersonationLevel(TokenImpersonationLevel ImpersonationLevel) throws Throwable {
        try {
            classInstance.Set("ImpersonationLevel", (Object)ImpersonationLevel.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int getDefaultMaximumResponseHeadersLength() throws Throwable {
        try {
            return (int)classType.Get("DefaultMaximumResponseHeadersLength");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setDefaultMaximumResponseHeadersLength(int DefaultMaximumResponseHeadersLength) throws Throwable {
        try {
            classType.Set("DefaultMaximumResponseHeadersLength", DefaultMaximumResponseHeadersLength);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int getDefaultMaximumErrorResponseLength() throws Throwable {
        try {
            return (int)classType.Get("DefaultMaximumErrorResponseLength");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setDefaultMaximumErrorResponseLength(int DefaultMaximumErrorResponseLength) throws Throwable {
        try {
            classType.Set("DefaultMaximumErrorResponseLength", DefaultMaximumErrorResponseLength);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RequestCachePolicy getDefaultCachePolicy() throws Throwable {
        try {
            JCObject val = (JCObject)classType.Get("DefaultCachePolicy");
            return new RequestCachePolicy(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setDefaultCachePolicy(RequestCachePolicy DefaultCachePolicy) throws Throwable {
        try {
            classType.Set("DefaultCachePolicy", (Object)DefaultCachePolicy.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}