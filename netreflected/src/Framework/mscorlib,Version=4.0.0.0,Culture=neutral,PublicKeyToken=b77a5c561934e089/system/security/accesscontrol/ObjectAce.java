/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.security.accesscontrol;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.security.accesscontrol.AceFlags;
import system.security.accesscontrol.AceQualifier;
import system.security.principal.SecurityIdentifier;
import system.security.accesscontrol.ObjectAceFlags;
import system.Guid;
import system.security.accesscontrol.GenericAce;
import system.security.accesscontrol.AceType;
import system.security.accesscontrol.InheritanceFlags;
import system.security.accesscontrol.PropagationFlags;
import system.security.accesscontrol.AuditFlags;


/**
 * The base .NET class managing System.Security.AccessControl.ObjectAce, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class ObjectAce extends NetObject  {
    public static final String assemblyFullName = "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "mscorlib";
    public static final String className = "System.Security.AccessControl.ObjectAce";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ObjectAce(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static ObjectAce castFrom(IJCOBridgeReflected from) throws Throwable {
        return new ObjectAce(from.getJCOInstance());
    }

    // Constructors section
    
    
    public ObjectAce(AceFlags aceFlags, AceQualifier qualifier, int accessMask, SecurityIdentifier sid, ObjectAceFlags flags, Guid type, Guid inheritedType, boolean isCallback, byte[] opaque) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.SystemException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.OutOfMemoryException, system.FormatException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)aceFlags.getJCOInstance(), (Object)qualifier.getJCOInstance(), accessMask, (Object)sid.getJCOInstance(), (Object)flags.getJCOInstance(), (Object)type.getJCOInstance(), (Object)inheritedType.getJCOInstance(), isCallback, opaque);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public static int MaxOpaqueLength(boolean isCallback) throws Throwable {
        try {
            return (int)classType.Invoke("MaxOpaqueLength", isCallback);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void GetBinaryForm(byte[] binaryForm, int offset) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.SystemException, system.ArgumentException {
        try {
            classInstance.Invoke("GetBinaryForm", binaryForm, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] GetOpaque() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("GetOpaque");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexGetOpaque = 0; indexGetOpaque < resultingArrayList.size(); indexGetOpaque++ ) {
				resultingArray[indexGetOpaque] = (byte)resultingArrayList.get(indexGetOpaque);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetOpaque(byte[] opaque) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        try {
            classInstance.Invoke("SetOpaque", opaque);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public GenericAce Copy() throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.FormatException, system.SystemException {
        try {
            JCObject objCopy = (JCObject)classInstance.Invoke("Copy");
            return new GenericAce(objCopy);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public ObjectAceFlags getObjectAceFlags() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ObjectAceFlags");
            return new ObjectAceFlags(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setObjectAceFlags(ObjectAceFlags ObjectAceFlags) throws Throwable {
        try {
            classInstance.Set("ObjectAceFlags", (Object)ObjectAceFlags.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Guid getObjectAceType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ObjectAceType");
            return new Guid(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setObjectAceType(Guid ObjectAceType) throws Throwable {
        try {
            classInstance.Set("ObjectAceType", (Object)ObjectAceType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Guid getInheritedObjectAceType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("InheritedObjectAceType");
            return new Guid(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInheritedObjectAceType(Guid InheritedObjectAceType) throws Throwable {
        try {
            classInstance.Set("InheritedObjectAceType", (Object)InheritedObjectAceType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getBinaryLength() throws Throwable {
        try {
            return (int)classInstance.Get("BinaryLength");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AceQualifier getAceQualifier() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AceQualifier");
            return new AceQualifier(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsCallback() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsCallback");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getOpaqueLength() throws Throwable {
        try {
            return (int)classInstance.Get("OpaqueLength");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getAccessMask() throws Throwable {
        try {
            return (int)classInstance.Get("AccessMask");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAccessMask(int AccessMask) throws Throwable {
        try {
            classInstance.Set("AccessMask", AccessMask);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SecurityIdentifier getSecurityIdentifier() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SecurityIdentifier");
            return new SecurityIdentifier(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSecurityIdentifier(SecurityIdentifier SecurityIdentifier) throws Throwable {
        try {
            classInstance.Set("SecurityIdentifier", (Object)SecurityIdentifier.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AceType getAceType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AceType");
            return new AceType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AceFlags getAceFlags() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AceFlags");
            return new AceFlags(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAceFlags(AceFlags AceFlags) throws Throwable {
        try {
            classInstance.Set("AceFlags", (Object)AceFlags.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsInherited() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsInherited");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InheritanceFlags getInheritanceFlags() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("InheritanceFlags");
            return new InheritanceFlags(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropagationFlags getPropagationFlags() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PropagationFlags");
            return new PropagationFlags(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AuditFlags getAuditFlags() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AuditFlags");
            return new AuditFlags(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}