/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.windows.documents;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.windows.input.RoutedUICommand;


/**
 * The base .NET class managing System.Windows.Documents.EditingCommands, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35. Extends {@link NetObject}.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/System.Windows.Documents.EditingCommands" target="_top">https://docs.microsoft.com/en-us/dotnet/api/System.Windows.Documents.EditingCommands</a>
 */
public class EditingCommands extends NetObject  {
    /**
     * Fully assembly qualified name: PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
     */
    public static final String assemblyFullName = "PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
    /**
     * Assembly name: PresentationFramework
     */
    public static final String assemblyShortName = "PresentationFramework";
    /**
     * Qualified class name: System.Windows.Documents.EditingCommands
     */
    public static final String className = "System.Windows.Documents.EditingCommands";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EditingCommands(Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link EditingCommands}, a cast assert is made to check if types are compatible.
     */
    public static EditingCommands cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new EditingCommands(from.getJCOInstance());
    }

    // Constructors section
    
    public EditingCommands() throws Throwable {
    }

    
    // Methods section
    

    
    // Properties section
    
    public RoutedUICommand getAlignCenter() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("AlignCenter");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getAlignJustify() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("AlignJustify");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getAlignLeft() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("AlignLeft");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getAlignRight() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("AlignRight");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getBackspace() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Backspace");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getCorrectSpellingError() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("CorrectSpellingError");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getDecreaseFontSize() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("DecreaseFontSize");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getDecreaseIndentation() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("DecreaseIndentation");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getDelete() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Delete");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getDeleteNextWord() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("DeleteNextWord");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getDeletePreviousWord() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("DeletePreviousWord");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getEnterLineBreak() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("EnterLineBreak");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getEnterParagraphBreak() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("EnterParagraphBreak");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getIgnoreSpellingError() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("IgnoreSpellingError");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getIncreaseFontSize() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("IncreaseFontSize");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getIncreaseIndentation() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("IncreaseIndentation");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getMoveDownByLine() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("MoveDownByLine");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getMoveDownByPage() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("MoveDownByPage");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getMoveDownByParagraph() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("MoveDownByParagraph");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getMoveLeftByCharacter() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("MoveLeftByCharacter");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getMoveLeftByWord() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("MoveLeftByWord");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getMoveRightByCharacter() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("MoveRightByCharacter");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getMoveRightByWord() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("MoveRightByWord");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getMoveToDocumentEnd() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("MoveToDocumentEnd");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getMoveToDocumentStart() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("MoveToDocumentStart");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getMoveToLineEnd() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("MoveToLineEnd");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getMoveToLineStart() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("MoveToLineStart");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getMoveUpByLine() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("MoveUpByLine");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getMoveUpByPage() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("MoveUpByPage");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getMoveUpByParagraph() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("MoveUpByParagraph");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getSelectDownByLine() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("SelectDownByLine");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getSelectDownByPage() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("SelectDownByPage");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getSelectDownByParagraph() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("SelectDownByParagraph");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getSelectLeftByCharacter() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("SelectLeftByCharacter");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getSelectLeftByWord() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("SelectLeftByWord");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getSelectRightByCharacter() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("SelectRightByCharacter");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getSelectRightByWord() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("SelectRightByWord");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getSelectToDocumentEnd() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("SelectToDocumentEnd");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getSelectToDocumentStart() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("SelectToDocumentStart");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getSelectToLineEnd() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("SelectToLineEnd");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getSelectToLineStart() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("SelectToLineStart");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getSelectUpByLine() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("SelectUpByLine");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getSelectUpByPage() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("SelectUpByPage");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getSelectUpByParagraph() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("SelectUpByParagraph");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getTabBackward() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("TabBackward");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getTabForward() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("TabForward");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getToggleBold() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ToggleBold");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getToggleBullets() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ToggleBullets");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getToggleInsert() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ToggleInsert");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getToggleItalic() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ToggleItalic");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getToggleNumbering() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ToggleNumbering");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getToggleSubscript() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ToggleSubscript");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getToggleSuperscript() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ToggleSuperscript");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RoutedUICommand getToggleUnderline() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ToggleUnderline");
            return new RoutedUICommand(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}