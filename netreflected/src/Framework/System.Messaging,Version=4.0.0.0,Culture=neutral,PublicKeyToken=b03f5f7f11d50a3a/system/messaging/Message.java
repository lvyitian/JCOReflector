/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.messaging;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.runtime.remoting.ObjRef;
import system.messaging.Acknowledgment;
import system.messaging.AcknowledgeTypes;
import system.messaging.MessageQueue;
import system.DateTime;
import system.messaging.CryptographicProviderType;
import system.io.Stream;
import system.Guid;
import system.messaging.EncryptionAlgorithm;
import system.messaging.HashAlgorithm;
import system.messaging.MessageType;
import system.messaging.MessagePriority;
import system.messaging.SecurityContext;
import system.TimeSpan;
import system.EventHandler;


/**
 * The base .NET class managing System.Messaging.Message, System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class Message extends NetObject  {
    public static final String assemblyFullName = "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Messaging";
    public static final String className = "System.Messaging.Message";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static Message castFrom(IJCOBridgeReflected from) throws Throwable {
        return new Message(from.getJCOInstance());
    }

    // Constructors section
    
    
    public Message() throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Message(NetObject body) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)body.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public void Dispose() throws Throwable, system.ArgumentException, system.ArgumentNullException {
        try {
            classInstance.Invoke("Dispose");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.runtime.remoting.RemotingException, system.ObjectDisposedException, system.InvalidOperationException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            JCObject objGetLifetimeService = (JCObject)classInstance.Invoke("GetLifetimeService");
            return new NetObject(objGetLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject InitializeLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.runtime.remoting.RemotingException, system.ObjectDisposedException, system.InvalidOperationException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            JCObject objInitializeLifetimeService = (JCObject)classInstance.Invoke("InitializeLifetimeService");
            return new NetObject(objInitializeLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ObjRef CreateObjRef(NetType requestedType) throws Throwable, system.runtime.remoting.RemotingException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        try {
            JCObject objCreateObjRef = (JCObject)classInstance.Invoke("CreateObjRef", (Object)requestedType.getJCOInstance());
            return new ObjRef(objCreateObjRef);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public Acknowledgment getAcknowledgment() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Acknowledgment");
            return new Acknowledgment(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AcknowledgeTypes getAcknowledgeType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AcknowledgeType");
            return new AcknowledgeTypes(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAcknowledgeType(AcknowledgeTypes AcknowledgeType) throws Throwable {
        try {
            classInstance.Set("AcknowledgeType", (Object)AcknowledgeType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MessageQueue getAdministrationQueue() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AdministrationQueue");
            return new MessageQueue(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAdministrationQueue(MessageQueue AdministrationQueue) throws Throwable {
        try {
            classInstance.Set("AdministrationQueue", (Object)AdministrationQueue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getAppSpecific() throws Throwable {
        try {
            return (int)classInstance.Get("AppSpecific");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAppSpecific(int AppSpecific) throws Throwable {
        try {
            classInstance.Set("AppSpecific", AppSpecific);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DateTime getArrivedTime() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ArrivedTime");
            return new DateTime(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAttachSenderId() throws Throwable {
        try {
            return (boolean)classInstance.Get("AttachSenderId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAttachSenderId(boolean AttachSenderId) throws Throwable {
        try {
            classInstance.Set("AttachSenderId", AttachSenderId);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAuthenticated() throws Throwable {
        try {
            return (boolean)classInstance.Get("Authenticated");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getAuthenticationProviderName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("AuthenticationProviderName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAuthenticationProviderName(java.lang.String AuthenticationProviderName) throws Throwable {
        try {
            classInstance.Set("AuthenticationProviderName", (Object)AuthenticationProviderName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CryptographicProviderType getAuthenticationProviderType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AuthenticationProviderType");
            return new CryptographicProviderType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAuthenticationProviderType(CryptographicProviderType AuthenticationProviderType) throws Throwable {
        try {
            classInstance.Set("AuthenticationProviderType", (Object)AuthenticationProviderType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getBody() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Body");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBody(NetObject Body) throws Throwable {
        try {
            classInstance.Set("Body", (Object)Body.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Stream getBodyStream() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("BodyStream");
            return new Stream(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBodyStream(Stream BodyStream) throws Throwable {
        try {
            classInstance.Set("BodyStream", (Object)BodyStream.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getBodyType() throws Throwable {
        try {
            return (int)classInstance.Get("BodyType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBodyType(int BodyType) throws Throwable {
        try {
            classInstance.Set("BodyType", BodyType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Guid getConnectorType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ConnectorType");
            return new Guid(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConnectorType(Guid ConnectorType) throws Throwable {
        try {
            classInstance.Set("ConnectorType", (Object)ConnectorType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getCorrelationId() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("CorrelationId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCorrelationId(java.lang.String CorrelationId) throws Throwable {
        try {
            classInstance.Set("CorrelationId", (Object)CorrelationId);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MessageQueue getDestinationQueue() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DestinationQueue");
            return new MessageQueue(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] getDestinationSymmetricKey() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("DestinationSymmetricKey");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
			for(int indexDestinationSymmetricKey = 0; indexDestinationSymmetricKey < resultingArrayList.size(); indexDestinationSymmetricKey++ ) {
				resultingArray[indexDestinationSymmetricKey] = (byte)resultingArrayList.get(indexDestinationSymmetricKey);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDestinationSymmetricKey(byte[] DestinationSymmetricKey) throws Throwable {
        try {
            classInstance.Set("DestinationSymmetricKey", DestinationSymmetricKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] getDigitalSignature() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("DigitalSignature");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
			for(int indexDigitalSignature = 0; indexDigitalSignature < resultingArrayList.size(); indexDigitalSignature++ ) {
				resultingArray[indexDigitalSignature] = (byte)resultingArrayList.get(indexDigitalSignature);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDigitalSignature(byte[] DigitalSignature) throws Throwable {
        try {
            classInstance.Set("DigitalSignature", DigitalSignature);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EncryptionAlgorithm getEncryptionAlgorithm() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("EncryptionAlgorithm");
            return new EncryptionAlgorithm(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEncryptionAlgorithm(EncryptionAlgorithm EncryptionAlgorithm) throws Throwable {
        try {
            classInstance.Set("EncryptionAlgorithm", (Object)EncryptionAlgorithm.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] getExtension() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("Extension");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
			for(int indexExtension = 0; indexExtension < resultingArrayList.size(); indexExtension++ ) {
				resultingArray[indexExtension] = (byte)resultingArrayList.get(indexExtension);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExtension(byte[] Extension) throws Throwable {
        try {
            classInstance.Set("Extension", Extension);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HashAlgorithm getHashAlgorithm() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("HashAlgorithm");
            return new HashAlgorithm(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHashAlgorithm(HashAlgorithm HashAlgorithm) throws Throwable {
        try {
            classInstance.Set("HashAlgorithm", (Object)HashAlgorithm.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getId() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Id");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsFirstInTransaction() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsFirstInTransaction");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsLastInTransaction() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsLastInTransaction");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getLabel() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Label");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLabel(java.lang.String Label) throws Throwable {
        try {
            classInstance.Set("Label", (Object)Label);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getLookupId() throws Throwable {
        try {
            return (long)classInstance.Get("LookupId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MessageType getMessageType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("MessageType");
            return new MessageType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MessagePriority getPriority() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Priority");
            return new MessagePriority(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPriority(MessagePriority Priority) throws Throwable {
        try {
            classInstance.Set("Priority", (Object)Priority.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRecoverable() throws Throwable {
        try {
            return (boolean)classInstance.Get("Recoverable");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRecoverable(boolean Recoverable) throws Throwable {
        try {
            classInstance.Set("Recoverable", Recoverable);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MessageQueue getResponseQueue() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ResponseQueue");
            return new MessageQueue(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setResponseQueue(MessageQueue ResponseQueue) throws Throwable {
        try {
            classInstance.Set("ResponseQueue", (Object)ResponseQueue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SecurityContext getSecurityContext() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SecurityContext");
            return new SecurityContext(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSecurityContext(SecurityContext SecurityContext) throws Throwable {
        try {
            classInstance.Set("SecurityContext", (Object)SecurityContext.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] getSenderCertificate() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("SenderCertificate");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
			for(int indexSenderCertificate = 0; indexSenderCertificate < resultingArrayList.size(); indexSenderCertificate++ ) {
				resultingArray[indexSenderCertificate] = (byte)resultingArrayList.get(indexSenderCertificate);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSenderCertificate(byte[] SenderCertificate) throws Throwable {
        try {
            classInstance.Set("SenderCertificate", SenderCertificate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] getSenderId() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("SenderId");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
			for(int indexSenderId = 0; indexSenderId < resultingArrayList.size(); indexSenderId++ ) {
				resultingArray[indexSenderId] = (byte)resultingArrayList.get(indexSenderId);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getSenderVersion() throws Throwable {
        try {
            return (long)classInstance.Get("SenderVersion");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DateTime getSentTime() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SentTime");
            return new DateTime(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSourceMachine() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("SourceMachine");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getTimeToBeReceived() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("TimeToBeReceived");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTimeToBeReceived(TimeSpan TimeToBeReceived) throws Throwable {
        try {
            classInstance.Set("TimeToBeReceived", (Object)TimeToBeReceived.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getTimeToReachQueue() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("TimeToReachQueue");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTimeToReachQueue(TimeSpan TimeToReachQueue) throws Throwable {
        try {
            classInstance.Set("TimeToReachQueue", (Object)TimeToReachQueue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTransactionId() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TransactionId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MessageQueue getTransactionStatusQueue() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("TransactionStatusQueue");
            return new MessageQueue(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTransactionStatusQueue(MessageQueue TransactionStatusQueue) throws Throwable {
        try {
            classInstance.Set("TransactionStatusQueue", (Object)TransactionStatusQueue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseAuthentication() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseAuthentication");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseAuthentication(boolean UseAuthentication) throws Throwable {
        try {
            classInstance.Set("UseAuthentication", UseAuthentication);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseDeadLetterQueue() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseDeadLetterQueue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseDeadLetterQueue(boolean UseDeadLetterQueue) throws Throwable {
        try {
            classInstance.Set("UseDeadLetterQueue", UseDeadLetterQueue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseEncryption() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseEncryption");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseEncryption(boolean UseEncryption) throws Throwable {
        try {
            classInstance.Set("UseEncryption", UseEncryption);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseJournalQueue() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseJournalQueue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseJournalQueue(boolean UseJournalQueue) throws Throwable {
        try {
            classInstance.Set("UseJournalQueue", UseJournalQueue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseTracing() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseTracing");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseTracing(boolean UseTracing) throws Throwable {
        try {
            classInstance.Set("UseTracing", UseTracing);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
    public void addDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


}