/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.visualbasic.applicationservices;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.visualbasic.applicationservices.AuthenticationMode;
import system.windows.forms.FormCollection;
import system.windows.forms.Form;
import system.windows.forms.ApplicationContext;
import system.deployment.application.ApplicationDeployment;
import microsoft.visualbasic.logging.Log;
import microsoft.visualbasic.applicationservices.AssemblyInfo;
import system.globalization.CultureInfo;
import microsoft.visualbasic.applicationservices.StartupEventHandler;
import microsoft.visualbasic.applicationservices.StartupNextInstanceEventHandler;
import microsoft.visualbasic.applicationservices.ShutdownEventHandler;
import microsoft.visualbasic.devices.NetworkAvailableEventHandler;
import microsoft.visualbasic.applicationservices.UnhandledExceptionEventHandler;


/**
 * The base .NET class managing Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase, Microsoft.VisualBasic, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class WindowsFormsApplicationBase extends NetObject  {
    public static final String assemblyFullName = "Microsoft.VisualBasic, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "Microsoft.VisualBasic";
    public static final String className = "Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WindowsFormsApplicationBase(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static WindowsFormsApplicationBase castFrom(IJCOBridgeReflected from) throws Throwable {
        return new WindowsFormsApplicationBase(from.getJCOInstance());
    }

    // Constructors section
    
    
    public WindowsFormsApplicationBase() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.ArgumentOutOfRangeException, system.FormatException, system.componentmodel.InvalidEnumArgumentException, system.security.SecurityException, system.NullReferenceException, system.MulticastNotSupportedException, system.NotSupportedException, system.configuration.ConfigurationErrorsException, system.componentmodel.Win32Exception {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WindowsFormsApplicationBase(AuthenticationMode authenticationMode) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.NotImplementedException, system.IndexOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.componentmodel.InvalidEnumArgumentException, system.security.SecurityException, system.NullReferenceException, system.MulticastNotSupportedException, system.NotSupportedException, system.configuration.ConfigurationErrorsException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.runtime.interopservices.ExternalException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)authenticationMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public void Run(java.lang.String[] commandLine) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.security.SecurityException, system.NotImplementedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.NotSupportedException, system.OutOfMemoryException, system.net.networkinformation.NetworkInformationException, system.globalization.CultureNotFoundException, system.net.sockets.SocketException, microsoft.visualbasic.applicationservices.NoStartupFormException, system.componentmodel.InvalidAsynchronousStateException, system.componentmodel.InvalidEnumArgumentException, system.AccessViolationException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.FormatException, system.InvalidCastException, system.TypeLoadException, system.runtime.remoting.RemotingException, system.componentmodel.Win32Exception, microsoft.visualbasic.applicationservices.CantStartSingleInstanceException {
        try {
            classInstance.Invoke("Run", (Object)commandLine);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DoEvents() throws Throwable, system.ArgumentException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.ArgumentNullException, system.FormatException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.MulticastNotSupportedException, system.configuration.ConfigurationErrorsException, system.NotSupportedException, system.NullReferenceException, system.componentmodel.InvalidAsynchronousStateException, system.security.SecurityException, system.io.FileNotFoundException, system.componentmodel.InvalidEnumArgumentException, system.componentmodel.Win32Exception {
        try {
            classInstance.Invoke("DoEvents");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ChangeCulture(java.lang.String cultureName) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.InvalidOperationException, system.NotSupportedException, system.NullReferenceException, system.security.SecurityException {
        try {
            classInstance.Invoke("ChangeCulture", (Object)cultureName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ChangeUICulture(java.lang.String cultureName) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.InvalidOperationException, system.NotSupportedException, system.NullReferenceException, system.security.SecurityException {
        try {
            classInstance.Invoke("ChangeUICulture", (Object)cultureName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetEnvironmentVariable(java.lang.String name) throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.IndexOutOfRangeException, system.NullReferenceException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.InvalidOperationException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            return (java.lang.String)classInstance.Invoke("GetEnvironmentVariable", (Object)name);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public FormCollection getOpenForms() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("OpenForms");
            return new FormCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Form getSplashScreen() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SplashScreen");
            return new Form(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSplashScreen(Form SplashScreen) throws Throwable {
        try {
            classInstance.Set("SplashScreen", (Object)SplashScreen.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMinimumSplashScreenDisplayTime() throws Throwable {
        try {
            return (int)classInstance.Get("MinimumSplashScreenDisplayTime");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMinimumSplashScreenDisplayTime(int MinimumSplashScreenDisplayTime) throws Throwable {
        try {
            classInstance.Set("MinimumSplashScreenDisplayTime", MinimumSplashScreenDisplayTime);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ApplicationContext getApplicationContext() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ApplicationContext");
            return new ApplicationContext(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSaveMySettingsOnExit() throws Throwable {
        try {
            return (boolean)classInstance.Get("SaveMySettingsOnExit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSaveMySettingsOnExit(boolean SaveMySettingsOnExit) throws Throwable {
        try {
            classInstance.Set("SaveMySettingsOnExit", SaveMySettingsOnExit);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ApplicationDeployment getDeployment() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Deployment");
            return new ApplicationDeployment(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsNetworkDeployed() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsNetworkDeployed");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Log getLog() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Log");
            return new Log(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AssemblyInfo getInfo() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Info");
            return new AssemblyInfo(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CultureInfo getCulture() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Culture");
            return new CultureInfo(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CultureInfo getUICulture() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("UICulture");
            return new CultureInfo(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
    public void addStartup(StartupEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Startup", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeStartup(StartupEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Startup", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addStartupNextInstance(StartupNextInstanceEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("StartupNextInstance", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeStartupNextInstance(StartupNextInstanceEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("StartupNextInstance", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addShutdown(ShutdownEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Shutdown", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeShutdown(ShutdownEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Shutdown", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addNetworkAvailabilityChanged(NetworkAvailableEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("NetworkAvailabilityChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeNetworkAvailabilityChanged(NetworkAvailableEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("NetworkAvailabilityChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addUnhandledException(UnhandledExceptionEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("UnhandledException", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeUnhandledException(UnhandledExceptionEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("UnhandledException", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


}