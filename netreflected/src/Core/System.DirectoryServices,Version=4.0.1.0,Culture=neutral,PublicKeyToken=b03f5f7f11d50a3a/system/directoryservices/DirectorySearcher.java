/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.directoryservices;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.directoryservices.DirectoryEntry;
import system.directoryservices.SearchScope;
import system.directoryservices.SearchResultCollection;
import system.directoryservices.SearchResult;
import system.TimeSpan;
import system.collections.specialized.StringCollection;
import system.directoryservices.ReferralChasingOption;
import system.directoryservices.SortOption;
import system.directoryservices.DereferenceAlias;
import system.directoryservices.SecurityMasks;
import system.directoryservices.ExtendedDN;
import system.directoryservices.DirectorySynchronization;
import system.directoryservices.DirectoryVirtualListView;
import system.EventHandler;


/**
 * The base .NET class managing System.DirectoryServices.DirectorySearcher, System.DirectoryServices, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class DirectorySearcher extends NetObject  {
    public static final String assemblyFullName = "System.DirectoryServices, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.DirectoryServices";
    public static final String className = "System.DirectoryServices.DirectorySearcher";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectorySearcher(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static DirectorySearcher castFrom(IJCOBridgeReflected from) throws Throwable {
        return new DirectorySearcher(from.getJCOInstance());
    }

    // Constructors section
    
    
    public DirectorySearcher(DirectoryEntry searchRoot, java.lang.String filter, java.lang.String[] propertiesToLoad, SearchScope scope) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.ArrayTypeMismatchException, system.componentmodel.InvalidEnumArgumentException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)searchRoot.getJCOInstance(), (Object)filter, (Object)propertiesToLoad, (Object)scope.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectorySearcher(DirectoryEntry searchRoot) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.componentmodel.InvalidEnumArgumentException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)searchRoot.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectorySearcher() throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.componentmodel.InvalidEnumArgumentException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectorySearcher(DirectoryEntry searchRoot, java.lang.String filter) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.componentmodel.InvalidEnumArgumentException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)searchRoot.getJCOInstance(), (Object)filter);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectorySearcher(DirectoryEntry searchRoot, java.lang.String filter, java.lang.String[] propertiesToLoad) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.componentmodel.InvalidEnumArgumentException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)searchRoot.getJCOInstance(), (Object)filter, (Object)propertiesToLoad);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectorySearcher(java.lang.String filter) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.componentmodel.InvalidEnumArgumentException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)filter);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectorySearcher(java.lang.String filter, java.lang.String[] propertiesToLoad) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.componentmodel.InvalidEnumArgumentException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)filter, (Object)propertiesToLoad);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectorySearcher(java.lang.String filter, java.lang.String[] propertiesToLoad, SearchScope scope) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.componentmodel.InvalidEnumArgumentException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)filter, (Object)propertiesToLoad, (Object)scope.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public SearchResultCollection FindAll() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.globalization.CultureNotFoundException, system.InvalidOperationException, system.ObjectDisposedException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.IndexOutOfRangeException, system.NotImplementedException, system.FormatException, system.OutOfMemoryException, system.AccessViolationException {
        try {
            JCObject objFindAll = (JCObject)classInstance.Invoke("FindAll");
            return new SearchResultCollection(objFindAll);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SearchResult FindOne() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.globalization.CultureNotFoundException, system.InvalidOperationException, system.ObjectDisposedException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.IndexOutOfRangeException, system.NotImplementedException, system.FormatException, system.OutOfMemoryException, system.AccessViolationException {
        try {
            JCObject objFindOne = (JCObject)classInstance.Invoke("FindOne");
            return new SearchResult(objFindOne);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Dispose() throws Throwable, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException {
        try {
            classInstance.Invoke("Dispose");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.NotSupportedException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            JCObject objGetLifetimeService = (JCObject)classInstance.Invoke("GetLifetimeService");
            return new NetObject(objGetLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject InitializeLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.NotSupportedException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            JCObject objInitializeLifetimeService = (JCObject)classInstance.Invoke("InitializeLifetimeService");
            return new NetObject(objInitializeLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public boolean getCacheResults() throws Throwable {
        try {
            return (boolean)classInstance.Get("CacheResults");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCacheResults(boolean CacheResults) throws Throwable {
        try {
            classInstance.Set("CacheResults", CacheResults);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getClientTimeout() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ClientTimeout");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setClientTimeout(TimeSpan ClientTimeout) throws Throwable {
        try {
            classInstance.Set("ClientTimeout", (Object)ClientTimeout.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getPropertyNamesOnly() throws Throwable {
        try {
            return (boolean)classInstance.Get("PropertyNamesOnly");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPropertyNamesOnly(boolean PropertyNamesOnly) throws Throwable {
        try {
            classInstance.Set("PropertyNamesOnly", PropertyNamesOnly);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getFilter() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Filter");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFilter(java.lang.String Filter) throws Throwable {
        try {
            classInstance.Set("Filter", (Object)Filter);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getPageSize() throws Throwable {
        try {
            return (int)classInstance.Get("PageSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPageSize(int PageSize) throws Throwable {
        try {
            classInstance.Set("PageSize", PageSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringCollection getPropertiesToLoad() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PropertiesToLoad");
            return new StringCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ReferralChasingOption getReferralChasing() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ReferralChasing");
            return new ReferralChasingOption(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReferralChasing(ReferralChasingOption ReferralChasing) throws Throwable {
        try {
            classInstance.Set("ReferralChasing", (Object)ReferralChasing.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SearchScope getSearchScope() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SearchScope");
            return new SearchScope(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSearchScope(SearchScope SearchScope) throws Throwable {
        try {
            classInstance.Set("SearchScope", (Object)SearchScope.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getServerPageTimeLimit() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ServerPageTimeLimit");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setServerPageTimeLimit(TimeSpan ServerPageTimeLimit) throws Throwable {
        try {
            classInstance.Set("ServerPageTimeLimit", (Object)ServerPageTimeLimit.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getServerTimeLimit() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ServerTimeLimit");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setServerTimeLimit(TimeSpan ServerTimeLimit) throws Throwable {
        try {
            classInstance.Set("ServerTimeLimit", (Object)ServerTimeLimit.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getSizeLimit() throws Throwable {
        try {
            return (int)classInstance.Get("SizeLimit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSizeLimit(int SizeLimit) throws Throwable {
        try {
            classInstance.Set("SizeLimit", SizeLimit);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryEntry getSearchRoot() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SearchRoot");
            return new DirectoryEntry(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSearchRoot(DirectoryEntry SearchRoot) throws Throwable {
        try {
            classInstance.Set("SearchRoot", (Object)SearchRoot.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SortOption getSort() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Sort");
            return new SortOption(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSort(SortOption Sort) throws Throwable {
        try {
            classInstance.Set("Sort", (Object)Sort.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAsynchronous() throws Throwable {
        try {
            return (boolean)classInstance.Get("Asynchronous");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAsynchronous(boolean Asynchronous) throws Throwable {
        try {
            classInstance.Set("Asynchronous", Asynchronous);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTombstone() throws Throwable {
        try {
            return (boolean)classInstance.Get("Tombstone");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTombstone(boolean Tombstone) throws Throwable {
        try {
            classInstance.Set("Tombstone", Tombstone);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getAttributeScopeQuery() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("AttributeScopeQuery");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAttributeScopeQuery(java.lang.String AttributeScopeQuery) throws Throwable {
        try {
            classInstance.Set("AttributeScopeQuery", (Object)AttributeScopeQuery);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DereferenceAlias getDerefAlias() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DerefAlias");
            return new DereferenceAlias(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDerefAlias(DereferenceAlias DerefAlias) throws Throwable {
        try {
            classInstance.Set("DerefAlias", (Object)DerefAlias.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SecurityMasks getSecurityMasks() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SecurityMasks");
            return new SecurityMasks(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSecurityMasks(SecurityMasks SecurityMasks) throws Throwable {
        try {
            classInstance.Set("SecurityMasks", (Object)SecurityMasks.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ExtendedDN getExtendedDN() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ExtendedDN");
            return new ExtendedDN(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExtendedDN(ExtendedDN ExtendedDN) throws Throwable {
        try {
            classInstance.Set("ExtendedDN", (Object)ExtendedDN.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectorySynchronization getDirectorySynchronization() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DirectorySynchronization");
            return new DirectorySynchronization(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDirectorySynchronization(DirectorySynchronization DirectorySynchronization) throws Throwable {
        try {
            classInstance.Set("DirectorySynchronization", (Object)DirectorySynchronization.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DirectoryVirtualListView getVirtualListView() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("VirtualListView");
            return new DirectoryVirtualListView(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setVirtualListView(DirectoryVirtualListView VirtualListView) throws Throwable {
        try {
            classInstance.Set("VirtualListView", (Object)VirtualListView.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
    public void addDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


}