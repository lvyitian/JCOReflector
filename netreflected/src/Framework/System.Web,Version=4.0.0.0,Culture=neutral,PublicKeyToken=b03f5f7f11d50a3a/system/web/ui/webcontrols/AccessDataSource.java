/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.web.ui.webcontrols;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.web.ui.Page;
import system.web.ui.Control;
import system.web.ui.HtmlTextWriter;
import system.web.routing.RouteValueDictionary;
import system.web.ui.RenderMethod;
import system.web.ui.DataSourceCacheExpiry;
import system.web.ui.ConflictOptions;
import system.web.ui.webcontrols.SqlDataSourceMode;
import system.web.ui.webcontrols.SqlDataSourceCommandType;
import system.web.ui.webcontrols.ParameterCollection;
import system.web.ui.ClientIDMode;
import system.web.ui.ControlCollection;
import system.web.ui.ViewStateMode;
import system.Version;
import system.web.ui.TemplateControl;
import system.web.ui.ValidateRequestMode;
import system.web.ui.webcontrols.SqlDataSourceStatusEventHandler;
import system.web.ui.webcontrols.SqlDataSourceCommandEventHandler;
import system.web.ui.webcontrols.SqlDataSourceFilteringEventHandler;
import system.web.ui.webcontrols.SqlDataSourceSelectingEventHandler;
import system.EventHandler;


/**
 * The base .NET class managing System.Web.UI.WebControls.AccessDataSource, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class AccessDataSource extends NetObject  {
    public static final String assemblyFullName = "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Web";
    public static final String className = "System.Web.UI.WebControls.AccessDataSource";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AccessDataSource(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static AccessDataSource castFrom(IJCOBridgeReflected from) throws Throwable {
        return new AccessDataSource(from.getJCOInstance());
    }

    // Constructors section
    
    
    public AccessDataSource() throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AccessDataSource(java.lang.String dataFile, java.lang.String selectCommand) throws Throwable, system.ArgumentNullException, system.MulticastNotSupportedException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)dataFile, (Object)selectCommand);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public int Delete() throws Throwable, system.ArgumentNullException, system.MulticastNotSupportedException, system.NotSupportedException {
        try {
            return (int)classInstance.Invoke("Delete");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int Insert() throws Throwable, system.ArgumentNullException, system.MulticastNotSupportedException, system.NotSupportedException {
        try {
            return (int)classInstance.Invoke("Insert");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int Update() throws Throwable, system.ArgumentNullException, system.MulticastNotSupportedException, system.NotSupportedException {
        try {
            return (int)classInstance.Invoke("Update");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ApplyStyleSheetSkin(Page page) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("ApplyStyleSheetSkin", (Object)page.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Control FindControl(java.lang.String id) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.web.HttpException, system.configuration.ConfigurationErrorsException, system.NullReferenceException, system.ArgumentOutOfRangeException, system.NotImplementedException {
        try {
            JCObject objFindControl = (JCObject)classInstance.Invoke("FindControl", (Object)id);
            return new Control(objFindControl);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean HasControls() throws Throwable {
        try {
            return (boolean)classInstance.Invoke("HasControls");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RenderControl(HtmlTextWriter writer) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.web.HttpException, system.ArgumentOutOfRangeException, system.configuration.ConfigurationErrorsException, system.MissingMethodException, system.reflection.TargetInvocationException, system.configuration.provider.ProviderException, system.NullReferenceException, system.OutOfMemoryException, system.OverflowException, system.NotSupportedException, system.FormatException, system.web.HttpRequestValidationException, system.PlatformNotSupportedException {
        try {
            classInstance.Invoke("RenderControl", (Object)writer.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Focus() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException {
        try {
            classInstance.Invoke("Focus");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetRouteUrl(RouteValueDictionary routeParameters) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.web.HttpException, system.threading.LockRecursionException {
        try {
            return (java.lang.String)classInstance.Invoke("GetRouteUrl", (Object)routeParameters.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetRouteUrl(java.lang.String routeName, RouteValueDictionary routeParameters) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.threading.LockRecursionException, system.threading.WaitHandleCannotBeOpenedException, system.IndexOutOfRangeException {
        try {
            return (java.lang.String)classInstance.Invoke("GetRouteUrl", (Object)routeName, (Object)routeParameters.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DataBind() throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        try {
            classInstance.Invoke("DataBind");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Dispose() throws Throwable {
        try {
            classInstance.Invoke("Dispose");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String ResolveUrl(java.lang.String relativeUrl) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.web.HttpException, system.ArgumentException, system.web.HttpRequestValidationException {
        try {
            return (java.lang.String)classInstance.Invoke("ResolveUrl", (Object)relativeUrl);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String ResolveClientUrl(java.lang.String relativeUrl) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.web.HttpException, system.OutOfMemoryException, system.threading.ThreadAbortException, system.web.HttpRequestValidationException, system.configuration.ConfigurationErrorsException, system.security.SecurityException, system.MemberAccessException, system.UriFormatException, system.globalization.CultureNotFoundException, system.NotSupportedException {
        try {
            return (java.lang.String)classInstance.Invoke("ResolveClientUrl", (Object)relativeUrl);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetTraceData(NetObject traceDataKey, NetObject traceDataValue) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.InvalidOperationException {
        try {
            classInstance.Invoke("SetTraceData", (Object)traceDataKey.getJCOInstance(), (Object)traceDataValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetTraceData(NetObject tracedObject, NetObject traceDataKey, NetObject traceDataValue) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.InvalidOperationException {
        try {
            classInstance.Invoke("SetTraceData", (Object)tracedObject.getJCOInstance(), (Object)traceDataKey.getJCOInstance(), (Object)traceDataValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetRouteUrl(NetObject routeParameters) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.NotSupportedException, system.RankException, system.NullReferenceException, system.web.HttpException, system.ObjectDisposedException, system.threading.LockRecursionException, system.NotImplementedException, system.globalization.CultureNotFoundException {
        try {
            return (java.lang.String)classInstance.Invoke("GetRouteUrl", (Object)routeParameters.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetRouteUrl(java.lang.String routeName, NetObject routeParameters) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.NotSupportedException, system.RankException, system.NullReferenceException, system.web.HttpException, system.ObjectDisposedException, system.threading.LockRecursionException, system.NotImplementedException, system.globalization.CultureNotFoundException {
        try {
            return (java.lang.String)classInstance.Invoke("GetRouteUrl", (Object)routeName, (Object)routeParameters.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetUniqueIDRelativeTo(Control control) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.web.HttpException {
        try {
            return (java.lang.String)classInstance.Invoke("GetUniqueIDRelativeTo", (Object)control.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetRenderMethodDelegate(RenderMethod renderMethod) throws Throwable, system.ArgumentNullException {
        try {
            classInstance.Invoke("SetRenderMethodDelegate", renderMethod);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public java.lang.String getConnectionString() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ConnectionString");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConnectionString(java.lang.String ConnectionString) throws Throwable {
        try {
            classInstance.Set("ConnectionString", (Object)ConnectionString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDataFile() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("DataFile");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDataFile(java.lang.String DataFile) throws Throwable {
        try {
            classInstance.Set("DataFile", (Object)DataFile);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getProviderName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ProviderName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setProviderName(java.lang.String ProviderName) throws Throwable {
        try {
            classInstance.Set("ProviderName", (Object)ProviderName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSqlCacheDependency() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("SqlCacheDependency");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSqlCacheDependency(java.lang.String SqlCacheDependency) throws Throwable {
        try {
            classInstance.Set("SqlCacheDependency", (Object)SqlCacheDependency);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getCacheDuration() throws Throwable {
        try {
            return (int)classInstance.Get("CacheDuration");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCacheDuration(int CacheDuration) throws Throwable {
        try {
            classInstance.Set("CacheDuration", CacheDuration);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataSourceCacheExpiry getCacheExpirationPolicy() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CacheExpirationPolicy");
            return new DataSourceCacheExpiry(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCacheExpirationPolicy(DataSourceCacheExpiry CacheExpirationPolicy) throws Throwable {
        try {
            classInstance.Set("CacheExpirationPolicy", (Object)CacheExpirationPolicy.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getCacheKeyDependency() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("CacheKeyDependency");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCacheKeyDependency(java.lang.String CacheKeyDependency) throws Throwable {
        try {
            classInstance.Set("CacheKeyDependency", (Object)CacheKeyDependency);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getCancelSelectOnNullParameter() throws Throwable {
        try {
            return (boolean)classInstance.Get("CancelSelectOnNullParameter");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCancelSelectOnNullParameter(boolean CancelSelectOnNullParameter) throws Throwable {
        try {
            classInstance.Set("CancelSelectOnNullParameter", CancelSelectOnNullParameter);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConflictOptions getConflictDetection() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ConflictDetection");
            return new ConflictOptions(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConflictDetection(ConflictOptions ConflictDetection) throws Throwable {
        try {
            classInstance.Set("ConflictDetection", (Object)ConflictDetection.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlDataSourceMode getDataSourceMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DataSourceMode");
            return new SqlDataSourceMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDataSourceMode(SqlDataSourceMode DataSourceMode) throws Throwable {
        try {
            classInstance.Set("DataSourceMode", (Object)DataSourceMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDeleteCommand() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("DeleteCommand");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDeleteCommand(java.lang.String DeleteCommand) throws Throwable {
        try {
            classInstance.Set("DeleteCommand", (Object)DeleteCommand);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlDataSourceCommandType getDeleteCommandType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DeleteCommandType");
            return new SqlDataSourceCommandType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDeleteCommandType(SqlDataSourceCommandType DeleteCommandType) throws Throwable {
        try {
            classInstance.Set("DeleteCommandType", (Object)DeleteCommandType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ParameterCollection getDeleteParameters() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DeleteParameters");
            return new ParameterCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnableCaching() throws Throwable {
        try {
            return (boolean)classInstance.Get("EnableCaching");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnableCaching(boolean EnableCaching) throws Throwable {
        try {
            classInstance.Set("EnableCaching", EnableCaching);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getFilterExpression() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("FilterExpression");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFilterExpression(java.lang.String FilterExpression) throws Throwable {
        try {
            classInstance.Set("FilterExpression", (Object)FilterExpression);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ParameterCollection getFilterParameters() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("FilterParameters");
            return new ParameterCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getInsertCommand() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("InsertCommand");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInsertCommand(java.lang.String InsertCommand) throws Throwable {
        try {
            classInstance.Set("InsertCommand", (Object)InsertCommand);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlDataSourceCommandType getInsertCommandType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("InsertCommandType");
            return new SqlDataSourceCommandType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInsertCommandType(SqlDataSourceCommandType InsertCommandType) throws Throwable {
        try {
            classInstance.Set("InsertCommandType", (Object)InsertCommandType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ParameterCollection getInsertParameters() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("InsertParameters");
            return new ParameterCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getOldValuesParameterFormatString() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("OldValuesParameterFormatString");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setOldValuesParameterFormatString(java.lang.String OldValuesParameterFormatString) throws Throwable {
        try {
            classInstance.Set("OldValuesParameterFormatString", (Object)OldValuesParameterFormatString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSelectCommand() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("SelectCommand");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSelectCommand(java.lang.String SelectCommand) throws Throwable {
        try {
            classInstance.Set("SelectCommand", (Object)SelectCommand);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlDataSourceCommandType getSelectCommandType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SelectCommandType");
            return new SqlDataSourceCommandType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSelectCommandType(SqlDataSourceCommandType SelectCommandType) throws Throwable {
        try {
            classInstance.Set("SelectCommandType", (Object)SelectCommandType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ParameterCollection getSelectParameters() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SelectParameters");
            return new ParameterCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSortParameterName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("SortParameterName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSortParameterName(java.lang.String SortParameterName) throws Throwable {
        try {
            classInstance.Set("SortParameterName", (Object)SortParameterName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getUpdateCommand() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("UpdateCommand");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUpdateCommand(java.lang.String UpdateCommand) throws Throwable {
        try {
            classInstance.Set("UpdateCommand", (Object)UpdateCommand);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlDataSourceCommandType getUpdateCommandType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("UpdateCommandType");
            return new SqlDataSourceCommandType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUpdateCommandType(SqlDataSourceCommandType UpdateCommandType) throws Throwable {
        try {
            classInstance.Set("UpdateCommandType", (Object)UpdateCommandType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ParameterCollection getUpdateParameters() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("UpdateParameters");
            return new ParameterCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getClientID() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ClientID");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ClientIDMode getClientIDMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ClientIDMode");
            return new ClientIDMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setClientIDMode(ClientIDMode ClientIDMode) throws Throwable {
        try {
            classInstance.Set("ClientIDMode", (Object)ClientIDMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ControlCollection getControls() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Controls");
            return new ControlCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnableTheming() throws Throwable {
        try {
            return (boolean)classInstance.Get("EnableTheming");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnableTheming(boolean EnableTheming) throws Throwable {
        try {
            classInstance.Set("EnableTheming", EnableTheming);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSkinID() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("SkinID");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSkinID(java.lang.String SkinID) throws Throwable {
        try {
            classInstance.Set("SkinID", (Object)SkinID);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getVisible() throws Throwable {
        try {
            return (boolean)classInstance.Get("Visible");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setVisible(boolean Visible) throws Throwable {
        try {
            classInstance.Set("Visible", Visible);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getID() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ID");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setID(java.lang.String ID) throws Throwable {
        try {
            classInstance.Set("ID", (Object)ID);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnableViewState() throws Throwable {
        try {
            return (boolean)classInstance.Get("EnableViewState");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnableViewState(boolean EnableViewState) throws Throwable {
        try {
            classInstance.Set("EnableViewState", EnableViewState);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ViewStateMode getViewStateMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ViewStateMode");
            return new ViewStateMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setViewStateMode(ViewStateMode ViewStateMode) throws Throwable {
        try {
            classInstance.Set("ViewStateMode", (Object)ViewStateMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Control getNamingContainer() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("NamingContainer");
            return new Control(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Control getBindingContainer() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("BindingContainer");
            return new Control(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Control getDataItemContainer() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DataItemContainer");
            return new Control(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Control getDataKeysContainer() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DataKeysContainer");
            return new Control(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Page getPage() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Page");
            return new Page(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPage(Page Page) throws Throwable {
        try {
            classInstance.Set("Page", (Object)Page.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Version getRenderingCompatibility() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RenderingCompatibility");
            return new Version(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRenderingCompatibility(Version RenderingCompatibility) throws Throwable {
        try {
            classInstance.Set("RenderingCompatibility", (Object)RenderingCompatibility.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TemplateControl getTemplateControl() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("TemplateControl");
            return new TemplateControl(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTemplateControl(TemplateControl TemplateControl) throws Throwable {
        try {
            classInstance.Set("TemplateControl", (Object)TemplateControl.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Control getParent() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Parent");
            return new Control(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTemplateSourceDirectory() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TemplateSourceDirectory");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getAppRelativeTemplateSourceDirectory() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("AppRelativeTemplateSourceDirectory");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAppRelativeTemplateSourceDirectory(java.lang.String AppRelativeTemplateSourceDirectory) throws Throwable {
        try {
            classInstance.Set("AppRelativeTemplateSourceDirectory", (Object)AppRelativeTemplateSourceDirectory);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getUniqueID() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("UniqueID");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ValidateRequestMode getValidateRequestMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ValidateRequestMode");
            return new ValidateRequestMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setValidateRequestMode(ValidateRequestMode ValidateRequestMode) throws Throwable {
        try {
            classInstance.Set("ValidateRequestMode", (Object)ValidateRequestMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
    public void addDeleted(SqlDataSourceStatusEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Deleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDeleted(SqlDataSourceStatusEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Deleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDeleting(SqlDataSourceCommandEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Deleting", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDeleting(SqlDataSourceCommandEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Deleting", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addFiltering(SqlDataSourceFilteringEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Filtering", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeFiltering(SqlDataSourceFilteringEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Filtering", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addInserted(SqlDataSourceStatusEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Inserted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeInserted(SqlDataSourceStatusEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Inserted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addInserting(SqlDataSourceCommandEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Inserting", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeInserting(SqlDataSourceCommandEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Inserting", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addSelected(SqlDataSourceStatusEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Selected", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeSelected(SqlDataSourceStatusEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Selected", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addSelecting(SqlDataSourceSelectingEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Selecting", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeSelecting(SqlDataSourceSelectingEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Selecting", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addUpdated(SqlDataSourceStatusEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Updated", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeUpdated(SqlDataSourceStatusEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Updated", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addUpdating(SqlDataSourceCommandEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Updating", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeUpdating(SqlDataSourceCommandEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Updating", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDataBinding(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DataBinding", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDataBinding(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DataBinding", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addInit(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Init", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeInit(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Init", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addLoad(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Load", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeLoad(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Load", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addPreRender(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("PreRender", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removePreRender(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("PreRender", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addUnload(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Unload", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeUnload(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Unload", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


}