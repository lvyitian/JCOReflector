/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.windows.data;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.windows.data.BindingMode;
import system.windows.data.UpdateSourceTrigger;
import system.globalization.CultureInfo;
import system.windows.data.UpdateSourceExceptionFilterCallback;


/**
 * The base .NET class managing System.Windows.Data.MultiBinding, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35. Extends {@link NetObject}.
 */
public class MultiBinding extends NetObject  {
    public static final String assemblyFullName = "PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
	public static final String assemblyShortName = "PresentationFramework";
    public static final String className = "System.Windows.Data.MultiBinding";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MultiBinding(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static MultiBinding castFrom(IJCOBridgeReflected from) throws Throwable {
        return new MultiBinding(from.getJCOInstance());
    }

    // Constructors section
    
    
    public MultiBinding() throws Throwable, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.NotSupportedException, system.MissingMethodException, system.security.SecurityException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.UnauthorizedAccessException, system.io.IOException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public boolean ShouldSerializeBindings() throws Throwable {
        try {
            return (boolean)classInstance.Invoke("ShouldSerializeBindings");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean ShouldSerializeValidationRules() throws Throwable {
        try {
            return (boolean)classInstance.Invoke("ShouldSerializeValidationRules");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean ShouldSerializeFallbackValue() throws Throwable {
        try {
            return (boolean)classInstance.Invoke("ShouldSerializeFallbackValue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean ShouldSerializeTargetNullValue() throws Throwable {
        try {
            return (boolean)classInstance.Invoke("ShouldSerializeTargetNullValue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public BindingMode getMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Mode");
            return new BindingMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMode(BindingMode Mode) throws Throwable {
        try {
            classInstance.Set("Mode", (Object)Mode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UpdateSourceTrigger getUpdateSourceTrigger() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("UpdateSourceTrigger");
            return new UpdateSourceTrigger(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUpdateSourceTrigger(UpdateSourceTrigger UpdateSourceTrigger) throws Throwable {
        try {
            classInstance.Set("UpdateSourceTrigger", (Object)UpdateSourceTrigger.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getNotifyOnSourceUpdated() throws Throwable {
        try {
            return (boolean)classInstance.Get("NotifyOnSourceUpdated");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setNotifyOnSourceUpdated(boolean NotifyOnSourceUpdated) throws Throwable {
        try {
            classInstance.Set("NotifyOnSourceUpdated", NotifyOnSourceUpdated);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getNotifyOnTargetUpdated() throws Throwable {
        try {
            return (boolean)classInstance.Get("NotifyOnTargetUpdated");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setNotifyOnTargetUpdated(boolean NotifyOnTargetUpdated) throws Throwable {
        try {
            classInstance.Set("NotifyOnTargetUpdated", NotifyOnTargetUpdated);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getNotifyOnValidationError() throws Throwable {
        try {
            return (boolean)classInstance.Get("NotifyOnValidationError");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setNotifyOnValidationError(boolean NotifyOnValidationError) throws Throwable {
        try {
            classInstance.Set("NotifyOnValidationError", NotifyOnValidationError);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getConverterParameter() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ConverterParameter");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConverterParameter(NetObject ConverterParameter) throws Throwable {
        try {
            classInstance.Set("ConverterParameter", (Object)ConverterParameter.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CultureInfo getConverterCulture() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ConverterCulture");
            return new CultureInfo(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConverterCulture(CultureInfo ConverterCulture) throws Throwable {
        try {
            classInstance.Set("ConverterCulture", (Object)ConverterCulture.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UpdateSourceExceptionFilterCallback getUpdateSourceExceptionFilter() throws Throwable {
        try {
            return (UpdateSourceExceptionFilterCallback)classInstance.Get("UpdateSourceExceptionFilter");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUpdateSourceExceptionFilter(UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter) throws Throwable {
        try {
            classInstance.Set("UpdateSourceExceptionFilter", UpdateSourceExceptionFilter);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getValidatesOnExceptions() throws Throwable {
        try {
            return (boolean)classInstance.Get("ValidatesOnExceptions");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setValidatesOnExceptions(boolean ValidatesOnExceptions) throws Throwable {
        try {
            classInstance.Set("ValidatesOnExceptions", ValidatesOnExceptions);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getValidatesOnDataErrors() throws Throwable {
        try {
            return (boolean)classInstance.Get("ValidatesOnDataErrors");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setValidatesOnDataErrors(boolean ValidatesOnDataErrors) throws Throwable {
        try {
            classInstance.Set("ValidatesOnDataErrors", ValidatesOnDataErrors);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getValidatesOnNotifyDataErrors() throws Throwable {
        try {
            return (boolean)classInstance.Get("ValidatesOnNotifyDataErrors");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setValidatesOnNotifyDataErrors(boolean ValidatesOnNotifyDataErrors) throws Throwable {
        try {
            classInstance.Set("ValidatesOnNotifyDataErrors", ValidatesOnNotifyDataErrors);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getFallbackValue() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("FallbackValue");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFallbackValue(NetObject FallbackValue) throws Throwable {
        try {
            classInstance.Set("FallbackValue", (Object)FallbackValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getStringFormat() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("StringFormat");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStringFormat(java.lang.String StringFormat) throws Throwable {
        try {
            classInstance.Set("StringFormat", (Object)StringFormat);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getTargetNullValue() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("TargetNullValue");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTargetNullValue(NetObject TargetNullValue) throws Throwable {
        try {
            classInstance.Set("TargetNullValue", (Object)TargetNullValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getBindingGroupName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("BindingGroupName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBindingGroupName(java.lang.String BindingGroupName) throws Throwable {
        try {
            classInstance.Set("BindingGroupName", (Object)BindingGroupName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getDelay() throws Throwable {
        try {
            return (int)classInstance.Get("Delay");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDelay(int Delay) throws Throwable {
        try {
            classInstance.Set("Delay", Delay);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}