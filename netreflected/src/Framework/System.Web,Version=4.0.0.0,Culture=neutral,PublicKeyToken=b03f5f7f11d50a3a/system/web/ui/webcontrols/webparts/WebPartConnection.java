/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.web.ui.webcontrols.webparts;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.web.ui.webcontrols.webparts.WebPart;
import system.web.ui.webcontrols.webparts.ConsumerConnectionPoint;
import system.web.ui.webcontrols.webparts.ProviderConnectionPoint;
import system.web.ui.webcontrols.webparts.WebPartTransformer;
import system.web.ui.webcontrols.webparts.WebPartTransformerCollection;


/**
 * The base .NET class managing System.Web.UI.WebControls.WebParts.WebPartConnection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class WebPartConnection extends NetObject  {
    public static final String assemblyFullName = "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Web";
    public static final String className = "System.Web.UI.WebControls.WebParts.WebPartConnection";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebPartConnection(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static WebPartConnection castFrom(IJCOBridgeReflected from) throws Throwable {
        return new WebPartConnection(from.getJCOInstance());
    }

    // Constructors section
    
    
    public WebPartConnection() throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    

    
    // Properties section
    
    
    public WebPart getConsumer() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Consumer");
            return new WebPart(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConsumerConnectionPoint getConsumerConnectionPoint() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ConsumerConnectionPoint");
            return new ConsumerConnectionPoint(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getConsumerConnectionPointID() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ConsumerConnectionPointID");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConsumerConnectionPointID(java.lang.String ConsumerConnectionPointID) throws Throwable {
        try {
            classInstance.Set("ConsumerConnectionPointID", (Object)ConsumerConnectionPointID);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getConsumerID() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ConsumerID");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConsumerID(java.lang.String ConsumerID) throws Throwable {
        try {
            classInstance.Set("ConsumerID", (Object)ConsumerID);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getID() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ID");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setID(java.lang.String ID) throws Throwable {
        try {
            classInstance.Set("ID", (Object)ID);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsActive() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsActive");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsShared() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsShared");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsStatic() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsStatic");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebPart getProvider() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Provider");
            return new WebPart(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ProviderConnectionPoint getProviderConnectionPoint() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ProviderConnectionPoint");
            return new ProviderConnectionPoint(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getProviderConnectionPointID() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ProviderConnectionPointID");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setProviderConnectionPointID(java.lang.String ProviderConnectionPointID) throws Throwable {
        try {
            classInstance.Set("ProviderConnectionPointID", (Object)ProviderConnectionPointID);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getProviderID() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ProviderID");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setProviderID(java.lang.String ProviderID) throws Throwable {
        try {
            classInstance.Set("ProviderID", (Object)ProviderID);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebPartTransformer getTransformer() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Transformer");
            return new WebPartTransformer(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebPartTransformerCollection getTransformers() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Transformers");
            return new WebPartTransformerCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}