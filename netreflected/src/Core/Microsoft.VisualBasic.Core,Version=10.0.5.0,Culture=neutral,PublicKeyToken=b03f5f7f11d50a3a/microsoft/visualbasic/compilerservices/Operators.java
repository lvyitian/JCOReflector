/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.visualbasic.compilerservices;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section


/**
 * The base .NET class managing Microsoft.VisualBasic.CompilerServices.Operators, Microsoft.VisualBasic.Core, Version=10.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class Operators extends NetObject  {
    public static final String assemblyFullName = "Microsoft.VisualBasic.Core, Version=10.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "Microsoft.VisualBasic.Core";
    public static final String className = "Microsoft.VisualBasic.CompilerServices.Operators";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Operators(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static Operators castFrom(IJCOBridgeReflected from) throws Throwable {
        return new Operators(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public static int CompareString(java.lang.String Left, java.lang.String Right, boolean TextCompare) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        try {
            return (int)classType.Invoke("CompareString", (Object)Left, (Object)Right, TextCompare);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject AddObject(NetObject Left, NetObject Right) throws Throwable, system.InvalidOperationException, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.OverflowException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidCastException, system.TypeInitializationException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objAddObject = (JCObject)classType.Invoke("AddObject", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance());
            return new NetObject(objAddObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject SubtractObject(NetObject Left, NetObject Right) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.FormatException, system.OverflowException, system.InvalidCastException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objSubtractObject = (JCObject)classType.Invoke("SubtractObject", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance());
            return new NetObject(objSubtractObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject MultiplyObject(NetObject Left, NetObject Right) throws Throwable, system.ArgumentNullException, system.globalization.CultureNotFoundException, system.ArgumentException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.FormatException, system.OverflowException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidCastException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objMultiplyObject = (JCObject)classType.Invoke("MultiplyObject", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance());
            return new NetObject(objMultiplyObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject DivideObject(NetObject Left, NetObject Right) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.DivideByZeroException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.FormatException, system.OverflowException, system.InvalidCastException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objDivideObject = (JCObject)classType.Invoke("DivideObject", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance());
            return new NetObject(objDivideObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject ExponentObject(NetObject Left, NetObject Right) throws Throwable, system.ArgumentNullException, system.globalization.CultureNotFoundException, system.ArgumentException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.FormatException, system.OverflowException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidCastException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objExponentObject = (JCObject)classType.Invoke("ExponentObject", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance());
            return new NetObject(objExponentObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject ModObject(NetObject Left, NetObject Right) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.DivideByZeroException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.FormatException, system.OverflowException, system.InvalidCastException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objModObject = (JCObject)classType.Invoke("ModObject", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance());
            return new NetObject(objModObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject IntDivideObject(NetObject Left, NetObject Right) throws Throwable, system.ArgumentNullException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.FormatException, system.OverflowException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidCastException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objIntDivideObject = (JCObject)classType.Invoke("IntDivideObject", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance());
            return new NetObject(objIntDivideObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject LeftShiftObject(NetObject Operand, NetObject Amount) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidCastException, system.NullReferenceException, system.MissingMemberException, system.FormatException, system.OverflowException {
        try {
            JCObject objLeftShiftObject = (JCObject)classType.Invoke("LeftShiftObject", (Object)Operand.getJCOInstance(), (Object)Amount.getJCOInstance());
            return new NetObject(objLeftShiftObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject RightShiftObject(NetObject Operand, NetObject Amount) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidCastException, system.NullReferenceException, system.MissingMemberException, system.FormatException, system.OverflowException {
        try {
            JCObject objRightShiftObject = (JCObject)classType.Invoke("RightShiftObject", (Object)Operand.getJCOInstance(), (Object)Amount.getJCOInstance());
            return new NetObject(objRightShiftObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject ConcatenateObject(NetObject Left, NetObject Right) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidCastException, system.NullReferenceException, system.MissingMemberException, system.FormatException, system.ArrayTypeMismatchException, system.OverflowException {
        try {
            JCObject objConcatenateObject = (JCObject)classType.Invoke("ConcatenateObject", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance());
            return new NetObject(objConcatenateObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject FallbackInvokeUserDefinedOperator(NetObject vbOp, NetObject[] arguments) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.PlatformNotSupportedException, system.OverflowException, system.InvalidOperationException, system.IndexOutOfRangeException, system.InvalidCastException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objFallbackInvokeUserDefinedOperator = (JCObject)classType.Invoke("FallbackInvokeUserDefinedOperator", (Object)vbOp.getJCOInstance(), (Object)toObjectFromArray(arguments));
            return new NetObject(objFallbackInvokeUserDefinedOperator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject CompareObjectEqual(NetObject Left, NetObject Right, boolean TextCompare) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException, system.OverflowException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidCastException, system.TypeInitializationException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objCompareObjectEqual = (JCObject)classType.Invoke("CompareObjectEqual", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance(), TextCompare);
            return new NetObject(objCompareObjectEqual);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ConditionalCompareObjectEqual(NetObject Left, NetObject Right, boolean TextCompare) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException, system.OverflowException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidCastException, system.TypeInitializationException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            return (boolean)classType.Invoke("ConditionalCompareObjectEqual", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance(), TextCompare);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject CompareObjectNotEqual(NetObject Left, NetObject Right, boolean TextCompare) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException, system.OverflowException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidCastException, system.TypeInitializationException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objCompareObjectNotEqual = (JCObject)classType.Invoke("CompareObjectNotEqual", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance(), TextCompare);
            return new NetObject(objCompareObjectNotEqual);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ConditionalCompareObjectNotEqual(NetObject Left, NetObject Right, boolean TextCompare) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException, system.OverflowException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidCastException, system.TypeInitializationException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            return (boolean)classType.Invoke("ConditionalCompareObjectNotEqual", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance(), TextCompare);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject CompareObjectLess(NetObject Left, NetObject Right, boolean TextCompare) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException, system.OverflowException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidCastException, system.TypeInitializationException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objCompareObjectLess = (JCObject)classType.Invoke("CompareObjectLess", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance(), TextCompare);
            return new NetObject(objCompareObjectLess);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ConditionalCompareObjectLess(NetObject Left, NetObject Right, boolean TextCompare) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException, system.OverflowException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidCastException, system.TypeInitializationException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            return (boolean)classType.Invoke("ConditionalCompareObjectLess", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance(), TextCompare);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject CompareObjectLessEqual(NetObject Left, NetObject Right, boolean TextCompare) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException, system.OverflowException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidCastException, system.TypeInitializationException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objCompareObjectLessEqual = (JCObject)classType.Invoke("CompareObjectLessEqual", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance(), TextCompare);
            return new NetObject(objCompareObjectLessEqual);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ConditionalCompareObjectLessEqual(NetObject Left, NetObject Right, boolean TextCompare) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException, system.OverflowException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidCastException, system.TypeInitializationException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            return (boolean)classType.Invoke("ConditionalCompareObjectLessEqual", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance(), TextCompare);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject CompareObjectGreaterEqual(NetObject Left, NetObject Right, boolean TextCompare) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException, system.OverflowException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidCastException, system.TypeInitializationException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objCompareObjectGreaterEqual = (JCObject)classType.Invoke("CompareObjectGreaterEqual", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance(), TextCompare);
            return new NetObject(objCompareObjectGreaterEqual);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ConditionalCompareObjectGreaterEqual(NetObject Left, NetObject Right, boolean TextCompare) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException, system.OverflowException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidCastException, system.TypeInitializationException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            return (boolean)classType.Invoke("ConditionalCompareObjectGreaterEqual", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance(), TextCompare);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject CompareObjectGreater(NetObject Left, NetObject Right, boolean TextCompare) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException, system.OverflowException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidCastException, system.TypeInitializationException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objCompareObjectGreater = (JCObject)classType.Invoke("CompareObjectGreater", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance(), TextCompare);
            return new NetObject(objCompareObjectGreater);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ConditionalCompareObjectGreater(NetObject Left, NetObject Right, boolean TextCompare) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException, system.OverflowException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidCastException, system.TypeInitializationException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            return (boolean)classType.Invoke("ConditionalCompareObjectGreater", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance(), TextCompare);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject PlusObject(NetObject Operand) throws Throwable, system.ArgumentNullException, system.globalization.CultureNotFoundException, system.ArgumentException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.FormatException, system.OverflowException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidCastException, system.NotSupportedException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objPlusObject = (JCObject)classType.Invoke("PlusObject", (Object)Operand.getJCOInstance());
            return new NetObject(objPlusObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject NegateObject(NetObject Operand) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.OverflowException, system.InvalidCastException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objNegateObject = (JCObject)classType.Invoke("NegateObject", (Object)Operand.getJCOInstance());
            return new NetObject(objNegateObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject NotObject(NetObject Operand) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.FormatException, system.OverflowException, system.InvalidCastException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objNotObject = (JCObject)classType.Invoke("NotObject", (Object)Operand.getJCOInstance());
            return new NetObject(objNotObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject AndObject(NetObject Left, NetObject Right) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.FormatException, system.OverflowException, system.InvalidCastException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objAndObject = (JCObject)classType.Invoke("AndObject", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance());
            return new NetObject(objAndObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject OrObject(NetObject Left, NetObject Right) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.FormatException, system.OverflowException, system.InvalidCastException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objOrObject = (JCObject)classType.Invoke("OrObject", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance());
            return new NetObject(objOrObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject XorObject(NetObject Left, NetObject Right) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.FormatException, system.OverflowException, system.InvalidCastException, system.NullReferenceException, system.MissingMemberException {
        try {
            JCObject objXorObject = (JCObject)classType.Invoke("XorObject", (Object)Left.getJCOInstance(), (Object)Right.getJCOInstance());
            return new NetObject(objXorObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    

	// Instance Events section
    
    
}