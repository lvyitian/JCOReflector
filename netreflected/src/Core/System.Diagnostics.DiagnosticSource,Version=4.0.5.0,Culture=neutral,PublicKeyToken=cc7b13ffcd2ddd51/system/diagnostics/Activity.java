/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.diagnostics;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.diagnostics.Activity;
import system.diagnostics.ActivityTraceId;
import system.diagnostics.ActivitySpanId;
import system.diagnostics.ActivityTraceFlags;
import system.DateTime;
import system.diagnostics.ActivityIdFormat;
import system.TimeSpan;


/**
 * The base .NET class managing System.Diagnostics.Activity, System.Diagnostics.DiagnosticSource, Version=4.0.5.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51. Extends {@link NetObject}.
 */
public class Activity extends NetObject  {
    public static final String assemblyFullName = "System.Diagnostics.DiagnosticSource, Version=4.0.5.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51";
	public static final String assemblyShortName = "System.Diagnostics.DiagnosticSource";
    public static final String className = "System.Diagnostics.Activity";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Activity(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static Activity castFrom(IJCOBridgeReflected from) throws Throwable {
        return new Activity(from.getJCOInstance());
    }

    // Constructors section
    
    
    public Activity(java.lang.String operationName) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.globalization.CultureNotFoundException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)operationName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public Activity Start() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException, system.FormatException, system.ArrayTypeMismatchException {
        try {
            JCObject objStart = (JCObject)classInstance.Invoke("Start");
            return new Activity(objStart);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetBaggageItem(java.lang.String key) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.IndexOutOfRangeException {
        try {
            return (java.lang.String)classInstance.Invoke("GetBaggageItem", (Object)key);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Activity AddTag(java.lang.String key, java.lang.String value) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException {
        try {
            JCObject objAddTag = (JCObject)classInstance.Invoke("AddTag", (Object)key, (Object)value);
            return new Activity(objAddTag);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Activity AddBaggage(java.lang.String key, java.lang.String value) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException {
        try {
            JCObject objAddBaggage = (JCObject)classInstance.Invoke("AddBaggage", (Object)key, (Object)value);
            return new Activity(objAddBaggage);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Activity SetParentId(java.lang.String parentId) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.globalization.CultureNotFoundException, system.OutOfMemoryException, system.InvalidOperationException, system.IndexOutOfRangeException {
        try {
            JCObject objSetParentId = (JCObject)classInstance.Invoke("SetParentId", (Object)parentId);
            return new Activity(objSetParentId);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Activity SetParentId(ActivityTraceId traceId, ActivitySpanId spanId, ActivityTraceFlags activityTraceFlags) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.globalization.CultureNotFoundException, system.OutOfMemoryException, system.InvalidOperationException, system.IndexOutOfRangeException {
        try {
            JCObject objSetParentId = (JCObject)classInstance.Invoke("SetParentId", (Object)traceId.getJCOInstance(), (Object)spanId.getJCOInstance(), (Object)activityTraceFlags.getJCOInstance());
            return new Activity(objSetParentId);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Activity SetStartTime(DateTime startTimeUtc) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.globalization.CultureNotFoundException {
        try {
            JCObject objSetStartTime = (JCObject)classInstance.Invoke("SetStartTime", (Object)startTimeUtc.getJCOInstance());
            return new Activity(objSetStartTime);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Activity SetEndTime(DateTime endTimeUtc) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.globalization.CultureNotFoundException {
        try {
            JCObject objSetEndTime = (JCObject)classInstance.Invoke("SetEndTime", (Object)endTimeUtc.getJCOInstance());
            return new Activity(objSetEndTime);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Stop() throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("Stop");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Activity SetIdFormat(ActivityIdFormat format) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.globalization.CultureNotFoundException {
        try {
            JCObject objSetIdFormat = (JCObject)classInstance.Invoke("SetIdFormat", (Object)format.getJCOInstance());
            return new Activity(objSetIdFormat);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public java.lang.String getOperationName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("OperationName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Activity getParent() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Parent");
            return new Activity(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setParent(Activity Parent) throws Throwable {
        try {
            classInstance.Set("Parent", (Object)Parent.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getDuration() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Duration");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDuration(TimeSpan Duration) throws Throwable {
        try {
            classInstance.Set("Duration", (Object)Duration.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DateTime getStartTimeUtc() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("StartTimeUtc");
            return new DateTime(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStartTimeUtc(DateTime StartTimeUtc) throws Throwable {
        try {
            classInstance.Set("StartTimeUtc", (Object)StartTimeUtc.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getId() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Id");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getParentId() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ParentId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getRootId() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("RootId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTraceStateString() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TraceStateString");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTraceStateString(java.lang.String TraceStateString) throws Throwable {
        try {
            classInstance.Set("TraceStateString", (Object)TraceStateString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ActivitySpanId getSpanId() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SpanId");
            return new ActivitySpanId(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ActivityTraceId getTraceId() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("TraceId");
            return new ActivityTraceId(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRecorded() throws Throwable {
        try {
            return (boolean)classInstance.Get("Recorded");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ActivityTraceFlags getActivityTraceFlags() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ActivityTraceFlags");
            return new ActivityTraceFlags(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setActivityTraceFlags(ActivityTraceFlags ActivityTraceFlags) throws Throwable {
        try {
            classInstance.Set("ActivityTraceFlags", (Object)ActivityTraceFlags.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ActivitySpanId getParentSpanId() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ParentSpanId");
            return new ActivitySpanId(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ActivityIdFormat getIdFormat() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("IdFormat");
            return new ActivityIdFormat(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIdFormat(ActivityIdFormat IdFormat) throws Throwable {
        try {
            classInstance.Set("IdFormat", (Object)IdFormat.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getForceDefaultIdFormat() throws Throwable {
        try {
            return (boolean)classType.Get("ForceDefaultIdFormat");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setForceDefaultIdFormat(boolean ForceDefaultIdFormat) throws Throwable {
        try {
            classType.Set("ForceDefaultIdFormat", ForceDefaultIdFormat);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ActivityIdFormat getDefaultIdFormat() throws Throwable {
        try {
            JCObject val = (JCObject)classType.Get("DefaultIdFormat");
            return new ActivityIdFormat(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setDefaultIdFormat(ActivityIdFormat DefaultIdFormat) throws Throwable {
        try {
            classType.Set("DefaultIdFormat", (Object)DefaultIdFormat.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Activity getCurrent() throws Throwable {
        try {
            JCObject val = (JCObject)classType.Get("Current");
            return new Activity(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setCurrent(Activity Current) throws Throwable {
        try {
            classType.Set("Current", (Object)Current.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}