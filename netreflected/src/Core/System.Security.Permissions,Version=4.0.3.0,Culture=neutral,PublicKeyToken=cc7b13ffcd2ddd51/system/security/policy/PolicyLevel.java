/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.security.policy;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.security.policy.StrongName;
import system.security.policy.StrongNameMembershipCondition;
import system.security.NamedPermissionSet;
import system.security.PermissionSet;
import system.security.policy.PolicyLevel;
import system.security.SecurityElement;
import system.security.policy.PolicyStatement;
import system.security.policy.Evidence;
import system.security.policy.CodeGroup;
import system.security.PolicyLevelType;


/**
 * The base .NET class managing System.Security.Policy.PolicyLevel, System.Security.Permissions, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51. Extends {@link NetObject}.
 */
public class PolicyLevel extends NetObject  {
    public static final String assemblyFullName = "System.Security.Permissions, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51";
	public static final String assemblyShortName = "System.Security.Permissions";
    public static final String className = "System.Security.Policy.PolicyLevel";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PolicyLevel(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static PolicyLevel castFrom(IJCOBridgeReflected from) throws Throwable {
        return new PolicyLevel(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public void AddFullTrustAssembly(StrongName sn) throws Throwable {
        try {
            classInstance.Invoke("AddFullTrustAssembly", (Object)sn.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddFullTrustAssembly(StrongNameMembershipCondition snMC) throws Throwable {
        try {
            classInstance.Invoke("AddFullTrustAssembly", (Object)snMC.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddNamedPermissionSet(NamedPermissionSet permSet) throws Throwable {
        try {
            classInstance.Invoke("AddNamedPermissionSet", (Object)permSet.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NamedPermissionSet ChangeNamedPermissionSet(java.lang.String name, PermissionSet pSet) throws Throwable {
        try {
            JCObject objChangeNamedPermissionSet = (JCObject)classInstance.Invoke("ChangeNamedPermissionSet", (Object)name, (Object)pSet.getJCOInstance());
            return new NamedPermissionSet(objChangeNamedPermissionSet);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PolicyLevel CreateAppDomainLevel() throws Throwable {
        try {
            JCObject objCreateAppDomainLevel = (JCObject)classType.Invoke("CreateAppDomainLevel");
            return new PolicyLevel(objCreateAppDomainLevel);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void FromXml(SecurityElement e) throws Throwable {
        try {
            classInstance.Invoke("FromXml", (Object)e.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NamedPermissionSet GetNamedPermissionSet(java.lang.String name) throws Throwable {
        try {
            JCObject objGetNamedPermissionSet = (JCObject)classInstance.Invoke("GetNamedPermissionSet", (Object)name);
            return new NamedPermissionSet(objGetNamedPermissionSet);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Recover() throws Throwable {
        try {
            classInstance.Invoke("Recover");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RemoveFullTrustAssembly(StrongName sn) throws Throwable {
        try {
            classInstance.Invoke("RemoveFullTrustAssembly", (Object)sn.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RemoveFullTrustAssembly(StrongNameMembershipCondition snMC) throws Throwable {
        try {
            classInstance.Invoke("RemoveFullTrustAssembly", (Object)snMC.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NamedPermissionSet RemoveNamedPermissionSet(NamedPermissionSet permSet) throws Throwable {
        try {
            JCObject objRemoveNamedPermissionSet = (JCObject)classInstance.Invoke("RemoveNamedPermissionSet", (Object)permSet.getJCOInstance());
            return new NamedPermissionSet(objRemoveNamedPermissionSet);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NamedPermissionSet RemoveNamedPermissionSet(java.lang.String name) throws Throwable {
        try {
            JCObject objRemoveNamedPermissionSet = (JCObject)classInstance.Invoke("RemoveNamedPermissionSet", (Object)name);
            return new NamedPermissionSet(objRemoveNamedPermissionSet);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Reset() throws Throwable {
        try {
            classInstance.Invoke("Reset");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PolicyStatement Resolve(Evidence evidence) throws Throwable {
        try {
            JCObject objResolve = (JCObject)classInstance.Invoke("Resolve", (Object)evidence.getJCOInstance());
            return new PolicyStatement(objResolve);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeGroup ResolveMatchingCodeGroups(Evidence evidence) throws Throwable {
        try {
            JCObject objResolveMatchingCodeGroups = (JCObject)classInstance.Invoke("ResolveMatchingCodeGroups", (Object)evidence.getJCOInstance());
            return new CodeGroup(objResolveMatchingCodeGroups);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SecurityElement ToXml() throws Throwable {
        try {
            JCObject objToXml = (JCObject)classInstance.Invoke("ToXml");
            return new SecurityElement(objToXml);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public java.lang.String getLabel() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Label");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeGroup getRootCodeGroup() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RootCodeGroup");
            return new CodeGroup(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRootCodeGroup(CodeGroup RootCodeGroup) throws Throwable {
        try {
            classInstance.Set("RootCodeGroup", (Object)RootCodeGroup.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getStoreLocation() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("StoreLocation");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PolicyLevelType getType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Type");
            return new PolicyLevelType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}