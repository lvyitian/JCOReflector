/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.windows.forms;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.windows.forms.CurrencyManager;
import system.windows.forms.DataGridColumnStyle;
import system.runtime.remoting.ObjRef;
import system.drawing.Color;
import system.windows.forms.DataGridLineStyle;
import system.drawing.Font;
import system.windows.forms.GridColumnStylesCollection;
import system.windows.forms.DataGrid;
import system.EventHandler;


/**
 * The base .NET class managing System.Windows.Forms.DataGridTableStyle, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class DataGridTableStyle extends NetObject  {
    public static final String assemblyFullName = "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "System.Windows.Forms";
    public static final String className = "System.Windows.Forms.DataGridTableStyle";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridTableStyle(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static DataGridTableStyle castFrom(IJCOBridgeReflected from) throws Throwable {
        return new DataGridTableStyle(from.getJCOInstance());
    }

    // Constructors section
    
    
    public DataGridTableStyle(boolean isDefaultTableStyle) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.runtime.interopservices.ExternalException, system.NullReferenceException, system.IndexOutOfRangeException, system.RankException, system.componentmodel.InvalidEnumArgumentException, system.MulticastNotSupportedException, system.NotSupportedException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject(isDefaultTableStyle);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridTableStyle() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentOutOfRangeException, system.FormatException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.NullReferenceException, system.componentmodel.InvalidEnumArgumentException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.NotSupportedException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridTableStyle(CurrencyManager listManager) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.componentmodel.Win32Exception, system.OutOfMemoryException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)listManager.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public void ResetAlternatingBackColor() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NullReferenceException, system.componentmodel.Win32Exception, system.OutOfMemoryException {
        try {
            classInstance.Invoke("ResetAlternatingBackColor");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ResetBackColor() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.runtime.interopservices.ExternalException, system.NullReferenceException, system.componentmodel.Win32Exception, system.OutOfMemoryException {
        try {
            classInstance.Invoke("ResetBackColor");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ResetForeColor() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.runtime.interopservices.ExternalException, system.NullReferenceException, system.componentmodel.Win32Exception, system.OutOfMemoryException {
        try {
            classInstance.Invoke("ResetForeColor");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ResetGridLineColor() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NullReferenceException {
        try {
            classInstance.Invoke("ResetGridLineColor");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ResetHeaderBackColor() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NullReferenceException {
        try {
            classInstance.Invoke("ResetHeaderBackColor");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ResetHeaderFont() throws Throwable {
        try {
            classInstance.Invoke("ResetHeaderFont");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ResetHeaderForeColor() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.runtime.interopservices.ExternalException, system.collections.generic.KeyNotFoundException {
        try {
            classInstance.Invoke("ResetHeaderForeColor");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ResetLinkColor() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NullReferenceException {
        try {
            classInstance.Invoke("ResetLinkColor");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ResetLinkHoverColor() throws Throwable {
        try {
            classInstance.Invoke("ResetLinkHoverColor");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ResetSelectionBackColor() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NullReferenceException, system.componentmodel.Win32Exception, system.OutOfMemoryException {
        try {
            classInstance.Invoke("ResetSelectionBackColor");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ResetSelectionForeColor() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NullReferenceException, system.componentmodel.Win32Exception, system.OutOfMemoryException {
        try {
            classInstance.Invoke("ResetSelectionForeColor");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean BeginEdit(DataGridColumnStyle gridColumn, int rowNumber) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.NullReferenceException, system.MulticastNotSupportedException, system.componentmodel.InvalidEnumArgumentException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.security.SecurityException {
        try {
            return (boolean)classInstance.Invoke("BeginEdit", (Object)gridColumn.getJCOInstance(), rowNumber);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean EndEdit(DataGridColumnStyle gridColumn, int rowNumber, boolean shouldAbort) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.NotSupportedException, system.security.SecurityException, system.NullReferenceException, system.OutOfMemoryException, system.globalization.CultureNotFoundException {
        try {
            return (boolean)classInstance.Invoke("EndEdit", (Object)gridColumn.getJCOInstance(), rowNumber, shouldAbort);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Dispose() throws Throwable, system.ArgumentException, system.ArgumentNullException {
        try {
            classInstance.Invoke("Dispose");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.runtime.remoting.RemotingException, system.ObjectDisposedException, system.InvalidOperationException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            JCObject objGetLifetimeService = (JCObject)classInstance.Invoke("GetLifetimeService");
            return new NetObject(objGetLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject InitializeLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.runtime.remoting.RemotingException, system.ObjectDisposedException, system.InvalidOperationException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            JCObject objInitializeLifetimeService = (JCObject)classInstance.Invoke("InitializeLifetimeService");
            return new NetObject(objInitializeLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ObjRef CreateObjRef(NetType requestedType) throws Throwable, system.runtime.remoting.RemotingException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        try {
            JCObject objCreateObjRef = (JCObject)classInstance.Invoke("CreateObjRef", (Object)requestedType.getJCOInstance());
            return new ObjRef(objCreateObjRef);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public boolean getAllowSorting() throws Throwable {
        try {
            return (boolean)classInstance.Get("AllowSorting");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowSorting(boolean AllowSorting) throws Throwable {
        try {
            classInstance.Set("AllowSorting", AllowSorting);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getAlternatingBackColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AlternatingBackColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAlternatingBackColor(Color AlternatingBackColor) throws Throwable {
        try {
            classInstance.Set("AlternatingBackColor", (Object)AlternatingBackColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getBackColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("BackColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBackColor(Color BackColor) throws Throwable {
        try {
            classInstance.Set("BackColor", (Object)BackColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getForeColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ForeColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setForeColor(Color ForeColor) throws Throwable {
        try {
            classInstance.Set("ForeColor", (Object)ForeColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getGridLineColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("GridLineColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setGridLineColor(Color GridLineColor) throws Throwable {
        try {
            classInstance.Set("GridLineColor", (Object)GridLineColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridLineStyle getGridLineStyle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("GridLineStyle");
            return new DataGridLineStyle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setGridLineStyle(DataGridLineStyle GridLineStyle) throws Throwable {
        try {
            classInstance.Set("GridLineStyle", (Object)GridLineStyle.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getHeaderBackColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("HeaderBackColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHeaderBackColor(Color HeaderBackColor) throws Throwable {
        try {
            classInstance.Set("HeaderBackColor", (Object)HeaderBackColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Font getHeaderFont() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("HeaderFont");
            return new Font(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHeaderFont(Font HeaderFont) throws Throwable {
        try {
            classInstance.Set("HeaderFont", (Object)HeaderFont.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getHeaderForeColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("HeaderForeColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHeaderForeColor(Color HeaderForeColor) throws Throwable {
        try {
            classInstance.Set("HeaderForeColor", (Object)HeaderForeColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getLinkColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LinkColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLinkColor(Color LinkColor) throws Throwable {
        try {
            classInstance.Set("LinkColor", (Object)LinkColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getLinkHoverColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LinkHoverColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLinkHoverColor(Color LinkHoverColor) throws Throwable {
        try {
            classInstance.Set("LinkHoverColor", (Object)LinkHoverColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getPreferredColumnWidth() throws Throwable {
        try {
            return (int)classInstance.Get("PreferredColumnWidth");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPreferredColumnWidth(int PreferredColumnWidth) throws Throwable {
        try {
            classInstance.Set("PreferredColumnWidth", PreferredColumnWidth);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getPreferredRowHeight() throws Throwable {
        try {
            return (int)classInstance.Get("PreferredRowHeight");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPreferredRowHeight(int PreferredRowHeight) throws Throwable {
        try {
            classInstance.Set("PreferredRowHeight", PreferredRowHeight);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getColumnHeadersVisible() throws Throwable {
        try {
            return (boolean)classInstance.Get("ColumnHeadersVisible");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setColumnHeadersVisible(boolean ColumnHeadersVisible) throws Throwable {
        try {
            classInstance.Set("ColumnHeadersVisible", ColumnHeadersVisible);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRowHeadersVisible() throws Throwable {
        try {
            return (boolean)classInstance.Get("RowHeadersVisible");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRowHeadersVisible(boolean RowHeadersVisible) throws Throwable {
        try {
            classInstance.Set("RowHeadersVisible", RowHeadersVisible);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getRowHeaderWidth() throws Throwable {
        try {
            return (int)classInstance.Get("RowHeaderWidth");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRowHeaderWidth(int RowHeaderWidth) throws Throwable {
        try {
            classInstance.Set("RowHeaderWidth", RowHeaderWidth);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getSelectionBackColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SelectionBackColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSelectionBackColor(Color SelectionBackColor) throws Throwable {
        try {
            classInstance.Set("SelectionBackColor", (Object)SelectionBackColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getSelectionForeColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SelectionForeColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSelectionForeColor(Color SelectionForeColor) throws Throwable {
        try {
            classInstance.Set("SelectionForeColor", (Object)SelectionForeColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getMappingName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("MappingName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMappingName(java.lang.String MappingName) throws Throwable {
        try {
            classInstance.Set("MappingName", (Object)MappingName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public GridColumnStylesCollection getGridColumnStyles() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("GridColumnStyles");
            return new GridColumnStylesCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGrid getDataGrid() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DataGrid");
            return new DataGrid(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDataGrid(DataGrid DataGrid) throws Throwable {
        try {
            classInstance.Set("DataGrid", (Object)DataGrid.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getReadOnly() throws Throwable {
        try {
            return (boolean)classInstance.Get("ReadOnly");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReadOnly(boolean ReadOnly) throws Throwable {
        try {
            classInstance.Set("ReadOnly", ReadOnly);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
    public void addAllowSortingChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("AllowSortingChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeAllowSortingChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("AllowSortingChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addAlternatingBackColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("AlternatingBackColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeAlternatingBackColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("AlternatingBackColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addBackColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("BackColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeBackColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("BackColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addForeColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ForeColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeForeColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ForeColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addGridLineColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("GridLineColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeGridLineColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("GridLineColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addGridLineStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("GridLineStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeGridLineStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("GridLineStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addHeaderBackColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("HeaderBackColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeHeaderBackColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("HeaderBackColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addHeaderFontChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("HeaderFontChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeHeaderFontChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("HeaderFontChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addHeaderForeColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("HeaderForeColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeHeaderForeColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("HeaderForeColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addLinkColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("LinkColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeLinkColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("LinkColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addLinkHoverColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("LinkHoverColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeLinkHoverColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("LinkHoverColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addPreferredColumnWidthChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("PreferredColumnWidthChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removePreferredColumnWidthChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("PreferredColumnWidthChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addPreferredRowHeightChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("PreferredRowHeightChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removePreferredRowHeightChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("PreferredRowHeightChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnHeadersVisibleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnHeadersVisibleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnHeadersVisibleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnHeadersVisibleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowHeadersVisibleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowHeadersVisibleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowHeadersVisibleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowHeadersVisibleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowHeaderWidthChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowHeaderWidthChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowHeaderWidthChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowHeaderWidthChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addSelectionBackColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("SelectionBackColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeSelectionBackColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("SelectionBackColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addSelectionForeColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("SelectionForeColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeSelectionForeColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("SelectionForeColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addMappingNameChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("MappingNameChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeMappingNameChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("MappingNameChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addReadOnlyChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ReadOnlyChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeReadOnlyChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ReadOnlyChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


}