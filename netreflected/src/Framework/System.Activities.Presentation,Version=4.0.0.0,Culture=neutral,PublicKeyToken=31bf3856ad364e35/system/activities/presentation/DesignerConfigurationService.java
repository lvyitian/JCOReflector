/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.activities.presentation;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.runtime.versioning.FrameworkName;


/**
 * The base .NET class managing System.Activities.Presentation.DesignerConfigurationService, System.Activities.Presentation, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35. Extends {@link NetObject}.
 */
public class DesignerConfigurationService extends NetObject  {
    public static final String assemblyFullName = "System.Activities.Presentation, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
	public static final String assemblyShortName = "System.Activities.Presentation";
    public static final String className = "System.Activities.Presentation.DesignerConfigurationService";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DesignerConfigurationService(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static DesignerConfigurationService castFrom(IJCOBridgeReflected from) throws Throwable {
        return new DesignerConfigurationService(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    

    
    // Properties section
    
    
    public boolean getAnnotationEnabled() throws Throwable {
        try {
            return (boolean)classInstance.Get("AnnotationEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAnnotationEnabled(boolean AnnotationEnabled) throws Throwable {
        try {
            classInstance.Set("AnnotationEnabled", AnnotationEnabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAutoConnectEnabled() throws Throwable {
        try {
            return (boolean)classInstance.Get("AutoConnectEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutoConnectEnabled(boolean AutoConnectEnabled) throws Throwable {
        try {
            classInstance.Set("AutoConnectEnabled", AutoConnectEnabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAutoSplitEnabled() throws Throwable {
        try {
            return (boolean)classInstance.Get("AutoSplitEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutoSplitEnabled(boolean AutoSplitEnabled) throws Throwable {
        try {
            classInstance.Set("AutoSplitEnabled", AutoSplitEnabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAutoSurroundWithSequenceEnabled() throws Throwable {
        try {
            return (boolean)classInstance.Get("AutoSurroundWithSequenceEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutoSurroundWithSequenceEnabled(boolean AutoSurroundWithSequenceEnabled) throws Throwable {
        try {
            classInstance.Set("AutoSurroundWithSequenceEnabled", AutoSurroundWithSequenceEnabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getBackgroundValidationEnabled() throws Throwable {
        try {
            return (boolean)classInstance.Get("BackgroundValidationEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBackgroundValidationEnabled(boolean BackgroundValidationEnabled) throws Throwable {
        try {
            classInstance.Set("BackgroundValidationEnabled", BackgroundValidationEnabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getLoadingFromUntrustedSourceEnabled() throws Throwable {
        try {
            return (boolean)classInstance.Get("LoadingFromUntrustedSourceEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLoadingFromUntrustedSourceEnabled(boolean LoadingFromUntrustedSourceEnabled) throws Throwable {
        try {
            classInstance.Set("LoadingFromUntrustedSourceEnabled", LoadingFromUntrustedSourceEnabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getMultipleItemsContextMenuEnabled() throws Throwable {
        try {
            return (boolean)classInstance.Get("MultipleItemsContextMenuEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMultipleItemsContextMenuEnabled(boolean MultipleItemsContextMenuEnabled) throws Throwable {
        try {
            classInstance.Set("MultipleItemsContextMenuEnabled", MultipleItemsContextMenuEnabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getMultipleItemsDragDropEnabled() throws Throwable {
        try {
            return (boolean)classInstance.Get("MultipleItemsDragDropEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMultipleItemsDragDropEnabled(boolean MultipleItemsDragDropEnabled) throws Throwable {
        try {
            classInstance.Set("MultipleItemsDragDropEnabled", MultipleItemsDragDropEnabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getNamespaceConversionEnabled() throws Throwable {
        try {
            return (boolean)classInstance.Get("NamespaceConversionEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setNamespaceConversionEnabled(boolean NamespaceConversionEnabled) throws Throwable {
        try {
            classInstance.Set("NamespaceConversionEnabled", NamespaceConversionEnabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getPanModeEnabled() throws Throwable {
        try {
            return (boolean)classInstance.Get("PanModeEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPanModeEnabled(boolean PanModeEnabled) throws Throwable {
        try {
            classInstance.Set("PanModeEnabled", PanModeEnabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRubberBandSelectionEnabled() throws Throwable {
        try {
            return (boolean)classInstance.Get("RubberBandSelectionEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRubberBandSelectionEnabled(boolean RubberBandSelectionEnabled) throws Throwable {
        try {
            classInstance.Set("RubberBandSelectionEnabled", RubberBandSelectionEnabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public FrameworkName getTargetFrameworkName() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("TargetFrameworkName");
            return new FrameworkName(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTargetFrameworkName(FrameworkName TargetFrameworkName) throws Throwable {
        try {
            classInstance.Set("TargetFrameworkName", (Object)TargetFrameworkName.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}