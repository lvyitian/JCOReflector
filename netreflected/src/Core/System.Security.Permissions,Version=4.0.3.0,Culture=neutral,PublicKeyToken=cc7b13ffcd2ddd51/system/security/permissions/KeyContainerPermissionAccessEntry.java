/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.security.permissions;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.security.permissions.KeyContainerPermissionFlags;
import system.security.cryptography.CspParameters;


/**
 * The base .NET class managing System.Security.Permissions.KeyContainerPermissionAccessEntry, System.Security.Permissions, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51. Extends {@link NetObject}.
 */
public class KeyContainerPermissionAccessEntry extends NetObject  {
    public static final String assemblyFullName = "System.Security.Permissions, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51";
	public static final String assemblyShortName = "System.Security.Permissions";
    public static final String className = "System.Security.Permissions.KeyContainerPermissionAccessEntry";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public KeyContainerPermissionAccessEntry(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static KeyContainerPermissionAccessEntry castFrom(IJCOBridgeReflected from) throws Throwable {
        return new KeyContainerPermissionAccessEntry(from.getJCOInstance());
    }

    // Constructors section
    
    
    public KeyContainerPermissionAccessEntry(java.lang.String keyContainerName, KeyContainerPermissionFlags flags) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)keyContainerName, (Object)flags.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public KeyContainerPermissionAccessEntry(CspParameters parameters, KeyContainerPermissionFlags flags) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)parameters.getJCOInstance(), (Object)flags.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public KeyContainerPermissionAccessEntry(java.lang.String keyStore, java.lang.String providerName, int providerType, java.lang.String keyContainerName, int keySpec, KeyContainerPermissionFlags flags) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)keyStore, (Object)providerName, providerType, (Object)keyContainerName, keySpec, (Object)flags.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    

    
    // Properties section
    
    
    public java.lang.String getKeyStore() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("KeyStore");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setKeyStore(java.lang.String KeyStore) throws Throwable {
        try {
            classInstance.Set("KeyStore", (Object)KeyStore);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getProviderName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ProviderName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setProviderName(java.lang.String ProviderName) throws Throwable {
        try {
            classInstance.Set("ProviderName", (Object)ProviderName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getProviderType() throws Throwable {
        try {
            return (int)classInstance.Get("ProviderType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setProviderType(int ProviderType) throws Throwable {
        try {
            classInstance.Set("ProviderType", ProviderType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getKeyContainerName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("KeyContainerName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setKeyContainerName(java.lang.String KeyContainerName) throws Throwable {
        try {
            classInstance.Set("KeyContainerName", (Object)KeyContainerName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getKeySpec() throws Throwable {
        try {
            return (int)classInstance.Get("KeySpec");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setKeySpec(int KeySpec) throws Throwable {
        try {
            classInstance.Set("KeySpec", KeySpec);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public KeyContainerPermissionFlags getFlags() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Flags");
            return new KeyContainerPermissionFlags(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFlags(KeyContainerPermissionFlags Flags) throws Throwable {
        try {
            classInstance.Set("Flags", (Object)Flags.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}