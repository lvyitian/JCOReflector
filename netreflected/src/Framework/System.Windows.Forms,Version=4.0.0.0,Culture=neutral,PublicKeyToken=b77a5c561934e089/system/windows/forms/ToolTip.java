/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.windows.forms;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.windows.forms.Control;
import system.runtime.remoting.ObjRef;
import system.drawing.Color;
import system.windows.forms.ToolTipIcon;
import system.windows.forms.DrawToolTipEventHandler;
import system.windows.forms.PopupEventHandler;
import system.EventHandler;


/**
 * The base .NET class managing System.Windows.Forms.ToolTip, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class ToolTip extends NetObject  {
    public static final String assemblyFullName = "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "System.Windows.Forms";
    public static final String className = "System.Windows.Forms.ToolTip";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ToolTip(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static ToolTip castFrom(IJCOBridgeReflected from) throws Throwable {
        return new ToolTip(from.getJCOInstance());
    }

    // Constructors section
    
    
    public ToolTip() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.FormatException, system.configuration.ConfigurationErrorsException, system.NotSupportedException, system.resources.MissingManifestResourceException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public void SetToolTip(Control control, java.lang.String caption) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException, system.InvalidOperationException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.NotSupportedException, system.collections.generic.KeyNotFoundException, system.MulticastNotSupportedException, system.OverflowException {
        try {
            classInstance.Invoke("SetToolTip", (Object)control.getJCOInstance(), (Object)caption);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanExtend(NetObject target) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("CanExtend", (Object)target.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetToolTip(Control control) throws Throwable, system.ArgumentNullException, system.ObjectDisposedException, system.threading.AbandonedMutexException {
        try {
            return (java.lang.String)classInstance.Invoke("GetToolTip", (Object)control.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RemoveAll() throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.NotSupportedException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("RemoveAll");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.runtime.remoting.RemotingException, system.ObjectDisposedException, system.InvalidOperationException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            JCObject objGetLifetimeService = (JCObject)classInstance.Invoke("GetLifetimeService");
            return new NetObject(objGetLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject InitializeLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.runtime.remoting.RemotingException, system.ObjectDisposedException, system.InvalidOperationException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            JCObject objInitializeLifetimeService = (JCObject)classInstance.Invoke("InitializeLifetimeService");
            return new NetObject(objInitializeLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ObjRef CreateObjRef(NetType requestedType) throws Throwable, system.runtime.remoting.RemotingException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        try {
            JCObject objCreateObjRef = (JCObject)classInstance.Invoke("CreateObjRef", (Object)requestedType.getJCOInstance());
            return new ObjRef(objCreateObjRef);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public boolean getActive() throws Throwable {
        try {
            return (boolean)classInstance.Get("Active");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setActive(boolean Active) throws Throwable {
        try {
            classInstance.Set("Active", Active);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getAutomaticDelay() throws Throwable {
        try {
            return (int)classInstance.Get("AutomaticDelay");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutomaticDelay(int AutomaticDelay) throws Throwable {
        try {
            classInstance.Set("AutomaticDelay", AutomaticDelay);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getAutoPopDelay() throws Throwable {
        try {
            return (int)classInstance.Get("AutoPopDelay");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutoPopDelay(int AutoPopDelay) throws Throwable {
        try {
            classInstance.Set("AutoPopDelay", AutoPopDelay);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getBackColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("BackColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBackColor(Color BackColor) throws Throwable {
        try {
            classInstance.Set("BackColor", (Object)BackColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getForeColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ForeColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setForeColor(Color ForeColor) throws Throwable {
        try {
            classInstance.Set("ForeColor", (Object)ForeColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsBalloon() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsBalloon");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIsBalloon(boolean IsBalloon) throws Throwable {
        try {
            classInstance.Set("IsBalloon", IsBalloon);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getInitialDelay() throws Throwable {
        try {
            return (int)classInstance.Get("InitialDelay");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInitialDelay(int InitialDelay) throws Throwable {
        try {
            classInstance.Set("InitialDelay", InitialDelay);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getOwnerDraw() throws Throwable {
        try {
            return (boolean)classInstance.Get("OwnerDraw");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setOwnerDraw(boolean OwnerDraw) throws Throwable {
        try {
            classInstance.Set("OwnerDraw", OwnerDraw);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getReshowDelay() throws Throwable {
        try {
            return (int)classInstance.Get("ReshowDelay");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReshowDelay(int ReshowDelay) throws Throwable {
        try {
            classInstance.Set("ReshowDelay", ReshowDelay);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getShowAlways() throws Throwable {
        try {
            return (boolean)classInstance.Get("ShowAlways");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setShowAlways(boolean ShowAlways) throws Throwable {
        try {
            classInstance.Set("ShowAlways", ShowAlways);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getStripAmpersands() throws Throwable {
        try {
            return (boolean)classInstance.Get("StripAmpersands");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStripAmpersands(boolean StripAmpersands) throws Throwable {
        try {
            classInstance.Set("StripAmpersands", StripAmpersands);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getTag() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Tag");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTag(NetObject Tag) throws Throwable {
        try {
            classInstance.Set("Tag", (Object)Tag.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ToolTipIcon getToolTipIcon() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ToolTipIcon");
            return new ToolTipIcon(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setToolTipIcon(ToolTipIcon ToolTipIcon) throws Throwable {
        try {
            classInstance.Set("ToolTipIcon", (Object)ToolTipIcon.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getToolTipTitle() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ToolTipTitle");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setToolTipTitle(java.lang.String ToolTipTitle) throws Throwable {
        try {
            classInstance.Set("ToolTipTitle", (Object)ToolTipTitle);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseAnimation() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseAnimation");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseAnimation(boolean UseAnimation) throws Throwable {
        try {
            classInstance.Set("UseAnimation", UseAnimation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseFading() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseFading");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseFading(boolean UseFading) throws Throwable {
        try {
            classInstance.Set("UseFading", UseFading);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
    public void addDraw(DrawToolTipEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Draw", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDraw(DrawToolTipEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Draw", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addPopup(PopupEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Popup", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removePopup(PopupEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Popup", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


}