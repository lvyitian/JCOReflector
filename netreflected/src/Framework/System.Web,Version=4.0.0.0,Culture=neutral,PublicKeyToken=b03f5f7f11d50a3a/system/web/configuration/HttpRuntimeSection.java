/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.web.configuration;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.web.configuration.AsyncPreloadModeFlags;
import system.web.configuration.FcnMode;
import system.TimeSpan;
import system.Version;
import system.configuration.SectionInformation;
import system.configuration.ConfigurationLockCollection;
import system.configuration.ElementInformation;
import system.configuration.Configuration;


/**
 * The base .NET class managing System.Web.Configuration.HttpRuntimeSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class HttpRuntimeSection extends NetObject  {
    public static final String assemblyFullName = "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Web";
    public static final String className = "System.Web.Configuration.HttpRuntimeSection";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HttpRuntimeSection(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static HttpRuntimeSection castFrom(IJCOBridgeReflected from) throws Throwable {
        return new HttpRuntimeSection(from.getJCOInstance());
    }

    // Constructors section
    
    
    public HttpRuntimeSection() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.collections.generic.KeyNotFoundException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public boolean IsReadOnly() throws Throwable {
        try {
            return (boolean)classInstance.Invoke("IsReadOnly");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public AsyncPreloadModeFlags getAsyncPreloadMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AsyncPreloadMode");
            return new AsyncPreloadModeFlags(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAsyncPreloadMode(AsyncPreloadModeFlags AsyncPreloadMode) throws Throwable {
        try {
            classInstance.Set("AsyncPreloadMode", (Object)AsyncPreloadMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public FcnMode getFcnMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("FcnMode");
            return new FcnMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFcnMode(FcnMode FcnMode) throws Throwable {
        try {
            classInstance.Set("FcnMode", (Object)FcnMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getExecutionTimeout() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ExecutionTimeout");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExecutionTimeout(TimeSpan ExecutionTimeout) throws Throwable {
        try {
            classInstance.Set("ExecutionTimeout", (Object)ExecutionTimeout.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMaxRequestLength() throws Throwable {
        try {
            return (int)classInstance.Get("MaxRequestLength");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaxRequestLength(int MaxRequestLength) throws Throwable {
        try {
            classInstance.Set("MaxRequestLength", MaxRequestLength);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getRequestLengthDiskThreshold() throws Throwable {
        try {
            return (int)classInstance.Get("RequestLengthDiskThreshold");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRequestLengthDiskThreshold(int RequestLengthDiskThreshold) throws Throwable {
        try {
            classInstance.Set("RequestLengthDiskThreshold", RequestLengthDiskThreshold);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseFullyQualifiedRedirectUrl() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseFullyQualifiedRedirectUrl");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseFullyQualifiedRedirectUrl(boolean UseFullyQualifiedRedirectUrl) throws Throwable {
        try {
            classInstance.Set("UseFullyQualifiedRedirectUrl", UseFullyQualifiedRedirectUrl);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMinFreeThreads() throws Throwable {
        try {
            return (int)classInstance.Get("MinFreeThreads");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMinFreeThreads(int MinFreeThreads) throws Throwable {
        try {
            classInstance.Set("MinFreeThreads", MinFreeThreads);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMinLocalRequestFreeThreads() throws Throwable {
        try {
            return (int)classInstance.Get("MinLocalRequestFreeThreads");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMinLocalRequestFreeThreads(int MinLocalRequestFreeThreads) throws Throwable {
        try {
            classInstance.Set("MinLocalRequestFreeThreads", MinLocalRequestFreeThreads);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getAppRequestQueueLimit() throws Throwable {
        try {
            return (int)classInstance.Get("AppRequestQueueLimit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAppRequestQueueLimit(int AppRequestQueueLimit) throws Throwable {
        try {
            classInstance.Set("AppRequestQueueLimit", AppRequestQueueLimit);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnableKernelOutputCache() throws Throwable {
        try {
            return (boolean)classInstance.Get("EnableKernelOutputCache");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnableKernelOutputCache(boolean EnableKernelOutputCache) throws Throwable {
        try {
            classInstance.Set("EnableKernelOutputCache", EnableKernelOutputCache);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnableVersionHeader() throws Throwable {
        try {
            return (boolean)classInstance.Get("EnableVersionHeader");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnableVersionHeader(boolean EnableVersionHeader) throws Throwable {
        try {
            classInstance.Set("EnableVersionHeader", EnableVersionHeader);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getApartmentThreading() throws Throwable {
        try {
            return (boolean)classInstance.Get("ApartmentThreading");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setApartmentThreading(boolean ApartmentThreading) throws Throwable {
        try {
            classInstance.Set("ApartmentThreading", ApartmentThreading);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRequireRootedSaveAsPath() throws Throwable {
        try {
            return (boolean)classInstance.Get("RequireRootedSaveAsPath");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRequireRootedSaveAsPath(boolean RequireRootedSaveAsPath) throws Throwable {
        try {
            classInstance.Set("RequireRootedSaveAsPath", RequireRootedSaveAsPath);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnable() throws Throwable {
        try {
            return (boolean)classInstance.Get("Enable");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnable(boolean Enable) throws Throwable {
        try {
            classInstance.Set("Enable", Enable);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTargetFramework() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TargetFramework");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTargetFramework(java.lang.String TargetFramework) throws Throwable {
        try {
            classInstance.Set("TargetFramework", (Object)TargetFramework);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSendCacheControlHeader() throws Throwable {
        try {
            return (boolean)classInstance.Get("SendCacheControlHeader");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSendCacheControlHeader(boolean SendCacheControlHeader) throws Throwable {
        try {
            classInstance.Set("SendCacheControlHeader", SendCacheControlHeader);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getDefaultRegexMatchTimeout() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DefaultRegexMatchTimeout");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDefaultRegexMatchTimeout(TimeSpan DefaultRegexMatchTimeout) throws Throwable {
        try {
            classInstance.Set("DefaultRegexMatchTimeout", (Object)DefaultRegexMatchTimeout.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getShutdownTimeout() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ShutdownTimeout");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setShutdownTimeout(TimeSpan ShutdownTimeout) throws Throwable {
        try {
            classInstance.Set("ShutdownTimeout", (Object)ShutdownTimeout.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getDelayNotificationTimeout() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DelayNotificationTimeout");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDelayNotificationTimeout(TimeSpan DelayNotificationTimeout) throws Throwable {
        try {
            classInstance.Set("DelayNotificationTimeout", (Object)DelayNotificationTimeout.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getWaitChangeNotification() throws Throwable {
        try {
            return (int)classInstance.Get("WaitChangeNotification");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setWaitChangeNotification(int WaitChangeNotification) throws Throwable {
        try {
            classInstance.Set("WaitChangeNotification", WaitChangeNotification);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMaxWaitChangeNotification() throws Throwable {
        try {
            return (int)classInstance.Get("MaxWaitChangeNotification");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaxWaitChangeNotification(int MaxWaitChangeNotification) throws Throwable {
        try {
            classInstance.Set("MaxWaitChangeNotification", MaxWaitChangeNotification);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnableHeaderChecking() throws Throwable {
        try {
            return (boolean)classInstance.Get("EnableHeaderChecking");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnableHeaderChecking(boolean EnableHeaderChecking) throws Throwable {
        try {
            classInstance.Set("EnableHeaderChecking", EnableHeaderChecking);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getEncoderType() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("EncoderType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEncoderType(java.lang.String EncoderType) throws Throwable {
        try {
            classInstance.Set("EncoderType", (Object)EncoderType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Version getRequestValidationMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RequestValidationMode");
            return new Version(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRequestValidationMode(Version RequestValidationMode) throws Throwable {
        try {
            classInstance.Set("RequestValidationMode", (Object)RequestValidationMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getRequestValidationType() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("RequestValidationType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRequestValidationType(java.lang.String RequestValidationType) throws Throwable {
        try {
            classInstance.Set("RequestValidationType", (Object)RequestValidationType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getRequestPathInvalidCharacters() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("RequestPathInvalidCharacters");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRequestPathInvalidCharacters(java.lang.String RequestPathInvalidCharacters) throws Throwable {
        try {
            classInstance.Set("RequestPathInvalidCharacters", (Object)RequestPathInvalidCharacters);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMaxUrlLength() throws Throwable {
        try {
            return (int)classInstance.Get("MaxUrlLength");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaxUrlLength(int MaxUrlLength) throws Throwable {
        try {
            classInstance.Set("MaxUrlLength", MaxUrlLength);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMaxQueryStringLength() throws Throwable {
        try {
            return (int)classInstance.Get("MaxQueryStringLength");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaxQueryStringLength(int MaxQueryStringLength) throws Throwable {
        try {
            classInstance.Set("MaxQueryStringLength", MaxQueryStringLength);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRelaxedUrlToFileSystemMapping() throws Throwable {
        try {
            return (boolean)classInstance.Get("RelaxedUrlToFileSystemMapping");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRelaxedUrlToFileSystemMapping(boolean RelaxedUrlToFileSystemMapping) throws Throwable {
        try {
            classInstance.Set("RelaxedUrlToFileSystemMapping", RelaxedUrlToFileSystemMapping);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowDynamicModuleRegistration() throws Throwable {
        try {
            return (boolean)classInstance.Get("AllowDynamicModuleRegistration");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowDynamicModuleRegistration(boolean AllowDynamicModuleRegistration) throws Throwable {
        try {
            classInstance.Set("AllowDynamicModuleRegistration", AllowDynamicModuleRegistration);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SectionInformation getSectionInformation() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SectionInformation");
            return new SectionInformation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConfigurationLockCollection getLockAttributes() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LockAttributes");
            return new ConfigurationLockCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConfigurationLockCollection getLockAllAttributesExcept() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LockAllAttributesExcept");
            return new ConfigurationLockCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConfigurationLockCollection getLockElements() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LockElements");
            return new ConfigurationLockCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConfigurationLockCollection getLockAllElementsExcept() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LockAllElementsExcept");
            return new ConfigurationLockCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getLockItem() throws Throwable {
        try {
            return (boolean)classInstance.Get("LockItem");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLockItem(boolean LockItem) throws Throwable {
        try {
            classInstance.Set("LockItem", LockItem);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ElementInformation getElementInformation() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ElementInformation");
            return new ElementInformation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Configuration getCurrentConfiguration() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CurrentConfiguration");
            return new Configuration(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}