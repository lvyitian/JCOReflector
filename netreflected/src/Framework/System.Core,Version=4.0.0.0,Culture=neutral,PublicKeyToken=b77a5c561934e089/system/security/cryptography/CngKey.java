/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.security.cryptography;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.security.cryptography.CngKey;
import system.security.cryptography.CngAlgorithm;
import system.security.cryptography.CngKeyCreationParameters;
import system.security.cryptography.CngProvider;
import system.security.cryptography.CngKeyOpenOptions;
import system.security.cryptography.CngKeyBlobFormat;
import system.security.cryptography.CngProperty;
import system.security.cryptography.CngPropertyOptions;
import microsoft.win32.safehandles.SafeNCryptKeyHandle;
import system.security.cryptography.CngKeyHandleOpenOptions;
import system.security.cryptography.CngAlgorithmGroup;
import system.security.cryptography.CngExportPolicies;
import system.security.cryptography.CngKeyUsages;
import microsoft.win32.safehandles.SafeNCryptProviderHandle;
import system.security.cryptography.CngUIPolicy;


/**
 * The base .NET class managing System.Security.Cryptography.CngKey, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class CngKey extends NetObject  {
    public static final String assemblyFullName = "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "System.Core";
    public static final String className = "System.Security.Cryptography.CngKey";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CngKey(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static CngKey castFrom(IJCOBridgeReflected from) throws Throwable {
        return new CngKey(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public static CngKey Create(CngAlgorithm algorithm) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.RankException, system.security.cryptography.CryptographicException {
        try {
            JCObject objCreate = (JCObject)classType.Invoke("Create", (Object)algorithm.getJCOInstance());
            return new CngKey(objCreate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static CngKey Create(CngAlgorithm algorithm, java.lang.String keyName) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.RankException, system.security.cryptography.CryptographicException {
        try {
            JCObject objCreate = (JCObject)classType.Invoke("Create", (Object)algorithm.getJCOInstance(), (Object)keyName);
            return new CngKey(objCreate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static CngKey Create(CngAlgorithm algorithm, java.lang.String keyName, CngKeyCreationParameters creationParameters) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.PlatformNotSupportedException, system.RankException, system.security.cryptography.CryptographicException {
        try {
            JCObject objCreate = (JCObject)classType.Invoke("Create", (Object)algorithm.getJCOInstance(), (Object)keyName, (Object)creationParameters.getJCOInstance());
            return new CngKey(objCreate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Delete() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.security.cryptography.CryptographicException, system.ArgumentException, system.RankException {
        try {
            classInstance.Invoke("Delete");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Dispose() throws Throwable {
        try {
            classInstance.Invoke("Dispose");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean Exists(java.lang.String keyName) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException {
        try {
            return (boolean)classType.Invoke("Exists", (Object)keyName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean Exists(java.lang.String keyName, CngProvider provider) throws Throwable, system.ArgumentNullException, system.NullReferenceException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException {
        try {
            return (boolean)classType.Invoke("Exists", (Object)keyName, (Object)provider.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean Exists(java.lang.String keyName, CngProvider provider, CngKeyOpenOptions options) throws Throwable, system.ArgumentNullException, system.NullReferenceException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException {
        try {
            return (boolean)classType.Invoke("Exists", (Object)keyName, (Object)provider.getJCOInstance(), (Object)options.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static CngKey Import(byte[] keyBlob, CngKeyBlobFormat format) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OutOfMemoryException {
        try {
            JCObject objImport = (JCObject)classType.Invoke("Import", keyBlob, (Object)format.getJCOInstance());
            return new CngKey(objImport);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static CngKey Import(byte[] keyBlob, CngKeyBlobFormat format, CngProvider provider) throws Throwable, system.ArgumentNullException, system.NullReferenceException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.security.cryptography.CryptographicException, system.OutOfMemoryException {
        try {
            JCObject objImport = (JCObject)classType.Invoke("Import", keyBlob, (Object)format.getJCOInstance(), (Object)provider.getJCOInstance());
            return new CngKey(objImport);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] Export(CngKeyBlobFormat format) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.security.cryptography.CryptographicException, system.ArgumentException, system.RankException {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("Export", (Object)format.getJCOInstance());
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexExport = 0; indexExport < resultingArrayList.size(); indexExport++ ) {
				resultingArray[indexExport] = (byte)resultingArrayList.get(indexExport);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CngProperty GetProperty(java.lang.String name, CngPropertyOptions options) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.security.cryptography.CryptographicException {
        try {
            JCObject objGetProperty = (JCObject)classInstance.Invoke("GetProperty", (Object)name, (Object)options.getJCOInstance());
            return new CngProperty(objGetProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean HasProperty(java.lang.String name, CngPropertyOptions options) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.security.cryptography.CryptographicException {
        try {
            return (boolean)classInstance.Invoke("HasProperty", (Object)name, (Object)options.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static CngKey Open(java.lang.String keyName) throws Throwable, system.NullReferenceException, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.PlatformNotSupportedException, system.RankException, system.security.cryptography.CryptographicException {
        try {
            JCObject objOpen = (JCObject)classType.Invoke("Open", (Object)keyName);
            return new CngKey(objOpen);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static CngKey Open(java.lang.String keyName, CngProvider provider) throws Throwable, system.ArgumentNullException, system.NullReferenceException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.PlatformNotSupportedException, system.RankException, system.security.cryptography.CryptographicException {
        try {
            JCObject objOpen = (JCObject)classType.Invoke("Open", (Object)keyName, (Object)provider.getJCOInstance());
            return new CngKey(objOpen);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static CngKey Open(java.lang.String keyName, CngProvider provider, CngKeyOpenOptions openOptions) throws Throwable, system.ArgumentNullException, system.NullReferenceException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.PlatformNotSupportedException, system.RankException, system.security.cryptography.CryptographicException {
        try {
            JCObject objOpen = (JCObject)classType.Invoke("Open", (Object)keyName, (Object)provider.getJCOInstance(), (Object)openOptions.getJCOInstance());
            return new CngKey(objOpen);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetProperty(CngProperty property) throws Throwable, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.ArgumentNullException, system.security.cryptography.CryptographicException {
        try {
            classInstance.Invoke("SetProperty", (Object)property.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static CngKey Open(SafeNCryptKeyHandle keyHandle, CngKeyHandleOpenOptions keyHandleOpenOptions) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.security.cryptography.CryptographicException {
        try {
            JCObject objOpen = (JCObject)classType.Invoke("Open", (Object)keyHandle.getJCOInstance(), (Object)keyHandleOpenOptions.getJCOInstance());
            return new CngKey(objOpen);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public CngAlgorithmGroup getAlgorithmGroup() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AlgorithmGroup");
            return new CngAlgorithmGroup(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CngAlgorithm getAlgorithm() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Algorithm");
            return new CngAlgorithm(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CngExportPolicies getExportPolicy() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ExportPolicy");
            return new CngExportPolicies(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExportPolicy(CngExportPolicies ExportPolicy) throws Throwable {
        try {
            classInstance.Set("ExportPolicy", (Object)ExportPolicy.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SafeNCryptKeyHandle getHandle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Handle");
            return new SafeNCryptKeyHandle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsEphemeral() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsEphemeral");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIsEphemeral(boolean IsEphemeral) throws Throwable {
        try {
            classInstance.Set("IsEphemeral", IsEphemeral);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsMachineKey() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsMachineKey");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getKeyName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("KeyName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getKeySize() throws Throwable {
        try {
            return (int)classInstance.Get("KeySize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CngKeyUsages getKeyUsage() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("KeyUsage");
            return new CngKeyUsages(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CngProvider getProvider() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Provider");
            return new CngProvider(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SafeNCryptProviderHandle getProviderHandle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ProviderHandle");
            return new SafeNCryptProviderHandle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getUniqueName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("UniqueName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CngUIPolicy getUIPolicy() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("UIPolicy");
            return new CngUIPolicy(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}