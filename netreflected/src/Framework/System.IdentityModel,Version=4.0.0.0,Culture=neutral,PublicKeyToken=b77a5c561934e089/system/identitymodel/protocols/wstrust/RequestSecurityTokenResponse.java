/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.identitymodel.protocols.wstrust;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.identitymodel.protocols.wstrust.WSTrustMessage;
import system.identitymodel.tokens.SecurityKeyIdentifierClause;
import system.identitymodel.protocols.wstrust.RequestedSecurityToken;
import system.identitymodel.protocols.wstrust.RequestedProofToken;
import system.identitymodel.protocols.wstrust.Status;
import system.identitymodel.protocols.wstrust.EndpointReference;
import system.identitymodel.protocols.wstrust.BinaryExchange;
import system.identitymodel.protocols.wstrust.Entropy;
import system.identitymodel.protocols.wstrust.Lifetime;
import system.identitymodel.protocols.wstrust.UseKey;


/**
 * The base .NET class managing System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class RequestSecurityTokenResponse extends NetObject  {
    public static final String assemblyFullName = "System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "System.IdentityModel";
    public static final String className = "System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RequestSecurityTokenResponse(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static RequestSecurityTokenResponse castFrom(IJCOBridgeReflected from) throws Throwable {
        return new RequestSecurityTokenResponse(from.getJCOInstance());
    }

    // Constructors section
    
    
    public RequestSecurityTokenResponse() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RequestSecurityTokenResponse(WSTrustMessage message) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.OverflowException, system.OutOfMemoryException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)message.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    

    
    // Properties section
    
    
    public boolean getIsFinal() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsFinal");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIsFinal(boolean IsFinal) throws Throwable {
        try {
            classInstance.Set("IsFinal", IsFinal);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SecurityKeyIdentifierClause getRequestedAttachedReference() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RequestedAttachedReference");
            return new SecurityKeyIdentifierClause(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRequestedAttachedReference(SecurityKeyIdentifierClause RequestedAttachedReference) throws Throwable {
        try {
            classInstance.Set("RequestedAttachedReference", (Object)RequestedAttachedReference.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RequestedSecurityToken getRequestedSecurityToken() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RequestedSecurityToken");
            return new RequestedSecurityToken(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRequestedSecurityToken(RequestedSecurityToken RequestedSecurityToken) throws Throwable {
        try {
            classInstance.Set("RequestedSecurityToken", (Object)RequestedSecurityToken.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RequestedProofToken getRequestedProofToken() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RequestedProofToken");
            return new RequestedProofToken(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRequestedProofToken(RequestedProofToken RequestedProofToken) throws Throwable {
        try {
            classInstance.Set("RequestedProofToken", (Object)RequestedProofToken.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SecurityKeyIdentifierClause getRequestedUnattachedReference() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RequestedUnattachedReference");
            return new SecurityKeyIdentifierClause(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRequestedUnattachedReference(SecurityKeyIdentifierClause RequestedUnattachedReference) throws Throwable {
        try {
            classInstance.Set("RequestedUnattachedReference", (Object)RequestedUnattachedReference.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRequestedTokenCancelled() throws Throwable {
        try {
            return (boolean)classInstance.Get("RequestedTokenCancelled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRequestedTokenCancelled(boolean RequestedTokenCancelled) throws Throwable {
        try {
            classInstance.Set("RequestedTokenCancelled", RequestedTokenCancelled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Status getStatus() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Status");
            return new Status(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStatus(Status Status) throws Throwable {
        try {
            classInstance.Set("Status", (Object)Status.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowPostdating() throws Throwable {
        try {
            return (boolean)classInstance.Get("AllowPostdating");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowPostdating(boolean AllowPostdating) throws Throwable {
        try {
            classInstance.Set("AllowPostdating", AllowPostdating);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EndpointReference getAppliesTo() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AppliesTo");
            return new EndpointReference(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAppliesTo(EndpointReference AppliesTo) throws Throwable {
        try {
            classInstance.Set("AppliesTo", (Object)AppliesTo.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BinaryExchange getBinaryExchange() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("BinaryExchange");
            return new BinaryExchange(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBinaryExchange(BinaryExchange BinaryExchange) throws Throwable {
        try {
            classInstance.Set("BinaryExchange", (Object)BinaryExchange.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getReplyTo() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ReplyTo");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReplyTo(java.lang.String ReplyTo) throws Throwable {
        try {
            classInstance.Set("ReplyTo", (Object)ReplyTo);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getAuthenticationType() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("AuthenticationType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAuthenticationType(java.lang.String AuthenticationType) throws Throwable {
        try {
            classInstance.Set("AuthenticationType", (Object)AuthenticationType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getCanonicalizationAlgorithm() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("CanonicalizationAlgorithm");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCanonicalizationAlgorithm(java.lang.String CanonicalizationAlgorithm) throws Throwable {
        try {
            classInstance.Set("CanonicalizationAlgorithm", (Object)CanonicalizationAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getContext() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Context");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setContext(java.lang.String Context) throws Throwable {
        try {
            classInstance.Set("Context", (Object)Context);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getEncryptionAlgorithm() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("EncryptionAlgorithm");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEncryptionAlgorithm(java.lang.String EncryptionAlgorithm) throws Throwable {
        try {
            classInstance.Set("EncryptionAlgorithm", (Object)EncryptionAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Entropy getEntropy() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Entropy");
            return new Entropy(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEntropy(Entropy Entropy) throws Throwable {
        try {
            classInstance.Set("Entropy", (Object)Entropy.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getEncryptWith() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("EncryptWith");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEncryptWith(java.lang.String EncryptWith) throws Throwable {
        try {
            classInstance.Set("EncryptWith", (Object)EncryptWith);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSignWith() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("SignWith");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSignWith(java.lang.String SignWith) throws Throwable {
        try {
            classInstance.Set("SignWith", (Object)SignWith);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getKeyType() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("KeyType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setKeyType(java.lang.String KeyType) throws Throwable {
        try {
            classInstance.Set("KeyType", (Object)KeyType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getKeyWrapAlgorithm() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("KeyWrapAlgorithm");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setKeyWrapAlgorithm(java.lang.String KeyWrapAlgorithm) throws Throwable {
        try {
            classInstance.Set("KeyWrapAlgorithm", (Object)KeyWrapAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Lifetime getLifetime() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Lifetime");
            return new Lifetime(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLifetime(Lifetime Lifetime) throws Throwable {
        try {
            classInstance.Set("Lifetime", (Object)Lifetime.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getRequestType() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("RequestType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRequestType(java.lang.String RequestType) throws Throwable {
        try {
            classInstance.Set("RequestType", (Object)RequestType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSignatureAlgorithm() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("SignatureAlgorithm");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSignatureAlgorithm(java.lang.String SignatureAlgorithm) throws Throwable {
        try {
            classInstance.Set("SignatureAlgorithm", (Object)SignatureAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTokenType() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TokenType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTokenType(java.lang.String TokenType) throws Throwable {
        try {
            classInstance.Set("TokenType", (Object)TokenType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UseKey getUseKey() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("UseKey");
            return new UseKey(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseKey(UseKey UseKey) throws Throwable {
        try {
            classInstance.Set("UseKey", (Object)UseKey.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}