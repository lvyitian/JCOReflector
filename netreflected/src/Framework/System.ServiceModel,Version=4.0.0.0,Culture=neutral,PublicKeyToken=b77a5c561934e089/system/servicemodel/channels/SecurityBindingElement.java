/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.servicemodel.channels;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.servicemodel.channels.SecurityBindingElement;
import system.servicemodel.channels.AsymmetricSecurityBindingElement;
import system.servicemodel.MessageSecurityVersion;
import system.servicemodel.channels.SymmetricSecurityBindingElement;
import system.servicemodel.security.tokens.IssuedSecurityTokenParameters;
import system.servicemodel.channels.TransportSecurityBindingElement;
import system.servicemodel.security.ChannelProtectionRequirements;
import system.servicemodel.security.tokens.SupportingTokenParameters;
import system.servicemodel.channels.SecurityHeaderLayout;
import system.servicemodel.security.SecurityAlgorithmSuite;
import system.servicemodel.channels.LocalClientSecuritySettings;
import system.servicemodel.channels.LocalServiceSecuritySettings;
import system.servicemodel.security.SecurityKeyEntropyMode;


/**
 * The base .NET class managing System.ServiceModel.Channels.SecurityBindingElement, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class SecurityBindingElement extends NetObject  {
    public static final String assemblyFullName = "System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "System.ServiceModel";
    public static final String className = "System.ServiceModel.Channels.SecurityBindingElement";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SecurityBindingElement(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static SecurityBindingElement castFrom(IJCOBridgeReflected from) throws Throwable {
        return new SecurityBindingElement(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public void SetKeyDerivation(boolean requireDerivedKeys) throws Throwable {
        try {
            classInstance.Invoke("SetKeyDerivation", requireDerivedKeys);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SecurityBindingElement CreateMutualCertificateBindingElement() throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.OutOfMemoryException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        try {
            JCObject objCreateMutualCertificateBindingElement = (JCObject)classType.Invoke("CreateMutualCertificateBindingElement");
            return new SecurityBindingElement(objCreateMutualCertificateBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AsymmetricSecurityBindingElement CreateCertificateSignatureBindingElement() throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objCreateCertificateSignatureBindingElement = (JCObject)classType.Invoke("CreateCertificateSignatureBindingElement");
            return new AsymmetricSecurityBindingElement(objCreateCertificateSignatureBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SecurityBindingElement CreateMutualCertificateBindingElement(MessageSecurityVersion version) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.NotSupportedException {
        try {
            JCObject objCreateMutualCertificateBindingElement = (JCObject)classType.Invoke("CreateMutualCertificateBindingElement", (Object)version.getJCOInstance());
            return new SecurityBindingElement(objCreateMutualCertificateBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SymmetricSecurityBindingElement CreateAnonymousForCertificateBindingElement() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objCreateAnonymousForCertificateBindingElement = (JCObject)classType.Invoke("CreateAnonymousForCertificateBindingElement");
            return new SymmetricSecurityBindingElement(objCreateAnonymousForCertificateBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AsymmetricSecurityBindingElement CreateMutualCertificateDuplexBindingElement() throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException {
        try {
            JCObject objCreateMutualCertificateDuplexBindingElement = (JCObject)classType.Invoke("CreateMutualCertificateDuplexBindingElement");
            return new AsymmetricSecurityBindingElement(objCreateMutualCertificateDuplexBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SymmetricSecurityBindingElement CreateUserNameForCertificateBindingElement() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.NotSupportedException {
        try {
            JCObject objCreateUserNameForCertificateBindingElement = (JCObject)classType.Invoke("CreateUserNameForCertificateBindingElement");
            return new SymmetricSecurityBindingElement(objCreateUserNameForCertificateBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SymmetricSecurityBindingElement CreateKerberosBindingElement() throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objCreateKerberosBindingElement = (JCObject)classType.Invoke("CreateKerberosBindingElement");
            return new SymmetricSecurityBindingElement(objCreateKerberosBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SymmetricSecurityBindingElement CreateSspiNegotiationBindingElement() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.OutOfMemoryException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException {
        try {
            JCObject objCreateSspiNegotiationBindingElement = (JCObject)classType.Invoke("CreateSspiNegotiationBindingElement");
            return new SymmetricSecurityBindingElement(objCreateSspiNegotiationBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SymmetricSecurityBindingElement CreateSspiNegotiationBindingElement(boolean requireCancellation) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.OutOfMemoryException, system.ArgumentOutOfRangeException {
        try {
            JCObject objCreateSspiNegotiationBindingElement = (JCObject)classType.Invoke("CreateSspiNegotiationBindingElement", requireCancellation);
            return new SymmetricSecurityBindingElement(objCreateSspiNegotiationBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SymmetricSecurityBindingElement CreateSslNegotiationBindingElement(boolean requireClientCertificate) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.OutOfMemoryException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException {
        try {
            JCObject objCreateSslNegotiationBindingElement = (JCObject)classType.Invoke("CreateSslNegotiationBindingElement", requireClientCertificate);
            return new SymmetricSecurityBindingElement(objCreateSslNegotiationBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SymmetricSecurityBindingElement CreateSslNegotiationBindingElement(boolean requireClientCertificate, boolean requireCancellation) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.OutOfMemoryException, system.ArgumentOutOfRangeException {
        try {
            JCObject objCreateSslNegotiationBindingElement = (JCObject)classType.Invoke("CreateSslNegotiationBindingElement", requireClientCertificate, requireCancellation);
            return new SymmetricSecurityBindingElement(objCreateSslNegotiationBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SymmetricSecurityBindingElement CreateIssuedTokenForSslBindingElement(IssuedSecurityTokenParameters issuedTokenParameters) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.NotSupportedException {
        try {
            JCObject objCreateIssuedTokenForSslBindingElement = (JCObject)classType.Invoke("CreateIssuedTokenForSslBindingElement", (Object)issuedTokenParameters.getJCOInstance());
            return new SymmetricSecurityBindingElement(objCreateIssuedTokenForSslBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SymmetricSecurityBindingElement CreateUserNameForSslBindingElement() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.OutOfMemoryException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException {
        try {
            JCObject objCreateUserNameForSslBindingElement = (JCObject)classType.Invoke("CreateUserNameForSslBindingElement");
            return new SymmetricSecurityBindingElement(objCreateUserNameForSslBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SymmetricSecurityBindingElement CreateUserNameForSslBindingElement(boolean requireCancellation) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.OutOfMemoryException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        try {
            JCObject objCreateUserNameForSslBindingElement = (JCObject)classType.Invoke("CreateUserNameForSslBindingElement", requireCancellation);
            return new SymmetricSecurityBindingElement(objCreateUserNameForSslBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static TransportSecurityBindingElement CreateUserNameOverTransportBindingElement() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.OutOfMemoryException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        try {
            JCObject objCreateUserNameOverTransportBindingElement = (JCObject)classType.Invoke("CreateUserNameOverTransportBindingElement");
            return new TransportSecurityBindingElement(objCreateUserNameOverTransportBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static TransportSecurityBindingElement CreateCertificateOverTransportBindingElement() throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.NotSupportedException {
        try {
            JCObject objCreateCertificateOverTransportBindingElement = (JCObject)classType.Invoke("CreateCertificateOverTransportBindingElement");
            return new TransportSecurityBindingElement(objCreateCertificateOverTransportBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static TransportSecurityBindingElement CreateKerberosOverTransportBindingElement() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.OutOfMemoryException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        try {
            JCObject objCreateKerberosOverTransportBindingElement = (JCObject)classType.Invoke("CreateKerberosOverTransportBindingElement");
            return new TransportSecurityBindingElement(objCreateKerberosOverTransportBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static TransportSecurityBindingElement CreateSspiNegotiationOverTransportBindingElement() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.OutOfMemoryException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException {
        try {
            JCObject objCreateSspiNegotiationOverTransportBindingElement = (JCObject)classType.Invoke("CreateSspiNegotiationOverTransportBindingElement");
            return new TransportSecurityBindingElement(objCreateSspiNegotiationOverTransportBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static TransportSecurityBindingElement CreateSspiNegotiationOverTransportBindingElement(boolean requireCancellation) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.OutOfMemoryException, system.ArgumentOutOfRangeException, system.NotSupportedException {
        try {
            JCObject objCreateSspiNegotiationOverTransportBindingElement = (JCObject)classType.Invoke("CreateSspiNegotiationOverTransportBindingElement", requireCancellation);
            return new TransportSecurityBindingElement(objCreateSspiNegotiationOverTransportBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SecurityBindingElement CreateSecureConversationBindingElement(SecurityBindingElement bootstrapSecurity) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.NotSupportedException {
        try {
            JCObject objCreateSecureConversationBindingElement = (JCObject)classType.Invoke("CreateSecureConversationBindingElement", (Object)bootstrapSecurity.getJCOInstance());
            return new SecurityBindingElement(objCreateSecureConversationBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SecurityBindingElement CreateSecureConversationBindingElement(SecurityBindingElement bootstrapSecurity, boolean requireCancellation) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.NotSupportedException {
        try {
            JCObject objCreateSecureConversationBindingElement = (JCObject)classType.Invoke("CreateSecureConversationBindingElement", (Object)bootstrapSecurity.getJCOInstance(), requireCancellation);
            return new SecurityBindingElement(objCreateSecureConversationBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SecurityBindingElement CreateMutualCertificateBindingElement(MessageSecurityVersion version, boolean allowSerializedSigningTokenOnReply) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.NotSupportedException {
        try {
            JCObject objCreateMutualCertificateBindingElement = (JCObject)classType.Invoke("CreateMutualCertificateBindingElement", (Object)version.getJCOInstance(), allowSerializedSigningTokenOnReply);
            return new SecurityBindingElement(objCreateMutualCertificateBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AsymmetricSecurityBindingElement CreateMutualCertificateDuplexBindingElement(MessageSecurityVersion version) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException {
        try {
            JCObject objCreateMutualCertificateDuplexBindingElement = (JCObject)classType.Invoke("CreateMutualCertificateDuplexBindingElement", (Object)version.getJCOInstance());
            return new AsymmetricSecurityBindingElement(objCreateMutualCertificateDuplexBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SymmetricSecurityBindingElement CreateIssuedTokenBindingElement(IssuedSecurityTokenParameters issuedTokenParameters) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException {
        try {
            JCObject objCreateIssuedTokenBindingElement = (JCObject)classType.Invoke("CreateIssuedTokenBindingElement", (Object)issuedTokenParameters.getJCOInstance());
            return new SymmetricSecurityBindingElement(objCreateIssuedTokenBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SymmetricSecurityBindingElement CreateIssuedTokenForCertificateBindingElement(IssuedSecurityTokenParameters issuedTokenParameters) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.NotSupportedException {
        try {
            JCObject objCreateIssuedTokenForCertificateBindingElement = (JCObject)classType.Invoke("CreateIssuedTokenForCertificateBindingElement", (Object)issuedTokenParameters.getJCOInstance());
            return new SymmetricSecurityBindingElement(objCreateIssuedTokenForCertificateBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SymmetricSecurityBindingElement CreateIssuedTokenForSslBindingElement(IssuedSecurityTokenParameters issuedTokenParameters, boolean requireCancellation) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.NotSupportedException {
        try {
            JCObject objCreateIssuedTokenForSslBindingElement = (JCObject)classType.Invoke("CreateIssuedTokenForSslBindingElement", (Object)issuedTokenParameters.getJCOInstance(), requireCancellation);
            return new SymmetricSecurityBindingElement(objCreateIssuedTokenForSslBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static TransportSecurityBindingElement CreateCertificateOverTransportBindingElement(MessageSecurityVersion version) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.NotSupportedException {
        try {
            JCObject objCreateCertificateOverTransportBindingElement = (JCObject)classType.Invoke("CreateCertificateOverTransportBindingElement", (Object)version.getJCOInstance());
            return new TransportSecurityBindingElement(objCreateCertificateOverTransportBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static TransportSecurityBindingElement CreateIssuedTokenOverTransportBindingElement(IssuedSecurityTokenParameters issuedTokenParameters) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.NotSupportedException {
        try {
            JCObject objCreateIssuedTokenOverTransportBindingElement = (JCObject)classType.Invoke("CreateIssuedTokenOverTransportBindingElement", (Object)issuedTokenParameters.getJCOInstance());
            return new TransportSecurityBindingElement(objCreateIssuedTokenOverTransportBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SecurityBindingElement CreateSecureConversationBindingElement(SecurityBindingElement bootstrapSecurity, boolean requireCancellation, ChannelProtectionRequirements bootstrapProtectionRequirements) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.ArgumentNullException, system.FormatException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.NotSupportedException {
        try {
            JCObject objCreateSecureConversationBindingElement = (JCObject)classType.Invoke("CreateSecureConversationBindingElement", (Object)bootstrapSecurity.getJCOInstance(), requireCancellation, (Object)bootstrapProtectionRequirements.getJCOInstance());
            return new SecurityBindingElement(objCreateSecureConversationBindingElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public SupportingTokenParameters getEndpointSupportingTokenParameters() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("EndpointSupportingTokenParameters");
            return new SupportingTokenParameters(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SupportingTokenParameters getOptionalEndpointSupportingTokenParameters() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("OptionalEndpointSupportingTokenParameters");
            return new SupportingTokenParameters(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SecurityHeaderLayout getSecurityHeaderLayout() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SecurityHeaderLayout");
            return new SecurityHeaderLayout(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSecurityHeaderLayout(SecurityHeaderLayout SecurityHeaderLayout) throws Throwable {
        try {
            classInstance.Set("SecurityHeaderLayout", (Object)SecurityHeaderLayout.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MessageSecurityVersion getMessageSecurityVersion() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("MessageSecurityVersion");
            return new MessageSecurityVersion(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMessageSecurityVersion(MessageSecurityVersion MessageSecurityVersion) throws Throwable {
        try {
            classInstance.Set("MessageSecurityVersion", (Object)MessageSecurityVersion.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnableUnsecuredResponse() throws Throwable {
        try {
            return (boolean)classInstance.Get("EnableUnsecuredResponse");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnableUnsecuredResponse(boolean EnableUnsecuredResponse) throws Throwable {
        try {
            classInstance.Set("EnableUnsecuredResponse", EnableUnsecuredResponse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIncludeTimestamp() throws Throwable {
        try {
            return (boolean)classInstance.Get("IncludeTimestamp");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIncludeTimestamp(boolean IncludeTimestamp) throws Throwable {
        try {
            classInstance.Set("IncludeTimestamp", IncludeTimestamp);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowInsecureTransport() throws Throwable {
        try {
            return (boolean)classInstance.Get("AllowInsecureTransport");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowInsecureTransport(boolean AllowInsecureTransport) throws Throwable {
        try {
            classInstance.Set("AllowInsecureTransport", AllowInsecureTransport);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SecurityAlgorithmSuite getDefaultAlgorithmSuite() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DefaultAlgorithmSuite");
            return new SecurityAlgorithmSuite(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDefaultAlgorithmSuite(SecurityAlgorithmSuite DefaultAlgorithmSuite) throws Throwable {
        try {
            classInstance.Set("DefaultAlgorithmSuite", (Object)DefaultAlgorithmSuite.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getProtectTokens() throws Throwable {
        try {
            return (boolean)classInstance.Get("ProtectTokens");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setProtectTokens(boolean ProtectTokens) throws Throwable {
        try {
            classInstance.Set("ProtectTokens", ProtectTokens);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LocalClientSecuritySettings getLocalClientSettings() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LocalClientSettings");
            return new LocalClientSecuritySettings(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LocalServiceSecuritySettings getLocalServiceSettings() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LocalServiceSettings");
            return new LocalServiceSecuritySettings(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SecurityKeyEntropyMode getKeyEntropyMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("KeyEntropyMode");
            return new SecurityKeyEntropyMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setKeyEntropyMode(SecurityKeyEntropyMode KeyEntropyMode) throws Throwable {
        try {
            classInstance.Set("KeyEntropyMode", (Object)KeyEntropyMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}