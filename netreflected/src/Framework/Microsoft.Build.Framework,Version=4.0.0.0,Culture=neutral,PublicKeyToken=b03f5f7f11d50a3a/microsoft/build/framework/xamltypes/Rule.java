/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.build.framework.xamltypes;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.collections.specialized.OrderedDictionary;
import microsoft.build.framework.xamltypes.BaseProperty;
import microsoft.build.framework.xamltypes.DataSource;
import microsoft.build.framework.xamltypes.RuleOverrideMode;


/**
 * The base .NET class managing Microsoft.Build.Framework.XamlTypes.Rule, Microsoft.Build.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class Rule extends NetObject  {
    public static final String assemblyFullName = "Microsoft.Build.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "Microsoft.Build.Framework";
    public static final String className = "Microsoft.Build.Framework.XamlTypes.Rule";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Rule(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static Rule castFrom(IJCOBridgeReflected from) throws Throwable {
        return new Rule(from.getJCOInstance());
    }

    // Constructors section
    
    
    public Rule() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public OrderedDictionary GetPropertiesByCategory() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.NotSupportedException {
        try {
            JCObject objGetPropertiesByCategory = (JCObject)classInstance.Invoke("GetPropertiesByCategory");
            return new OrderedDictionary(objGetPropertiesByCategory);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BaseProperty GetProperty(java.lang.String propertyName) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException {
        try {
            JCObject objGetProperty = (JCObject)classInstance.Invoke("GetProperty", (Object)propertyName);
            return new BaseProperty(objGetProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public java.lang.String getName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Name");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setName(java.lang.String Name) throws Throwable {
        try {
            classInstance.Set("Name", (Object)Name);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDisplayName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("DisplayName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDisplayName(java.lang.String DisplayName) throws Throwable {
        try {
            classInstance.Set("DisplayName", (Object)DisplayName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getToolName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ToolName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setToolName(java.lang.String ToolName) throws Throwable {
        try {
            classInstance.Set("ToolName", (Object)ToolName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDescription() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Description");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDescription(java.lang.String Description) throws Throwable {
        try {
            classInstance.Set("Description", (Object)Description);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getHelpString() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("HelpString");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHelpString(java.lang.String HelpString) throws Throwable {
        try {
            classInstance.Set("HelpString", (Object)HelpString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSwitchPrefix() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("SwitchPrefix");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSwitchPrefix(java.lang.String SwitchPrefix) throws Throwable {
        try {
            classInstance.Set("SwitchPrefix", (Object)SwitchPrefix);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSeparator() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Separator");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSeparator(java.lang.String Separator) throws Throwable {
        try {
            classInstance.Set("Separator", (Object)Separator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getPageTemplate() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("PageTemplate");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPageTemplate(java.lang.String PageTemplate) throws Throwable {
        try {
            classInstance.Set("PageTemplate", (Object)PageTemplate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataSource getDataSource() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DataSource");
            return new DataSource(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDataSource(DataSource DataSource) throws Throwable {
        try {
            classInstance.Set("DataSource", (Object)DataSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getOrder() throws Throwable {
        try {
            return (int)classInstance.Get("Order");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setOrder(int Order) throws Throwable {
        try {
            classInstance.Set("Order", Order);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSupportsFileBatching() throws Throwable {
        try {
            return (boolean)classInstance.Get("SupportsFileBatching");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSupportsFileBatching(boolean SupportsFileBatching) throws Throwable {
        try {
            classInstance.Set("SupportsFileBatching", SupportsFileBatching);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getShowOnlyRuleProperties() throws Throwable {
        try {
            return (boolean)classInstance.Get("ShowOnlyRuleProperties");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setShowOnlyRuleProperties(boolean ShowOnlyRuleProperties) throws Throwable {
        try {
            classInstance.Set("ShowOnlyRuleProperties", ShowOnlyRuleProperties);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getFileExtension() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("FileExtension");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFileExtension(java.lang.String FileExtension) throws Throwable {
        try {
            classInstance.Set("FileExtension", (Object)FileExtension);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getExecutionDescription() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ExecutionDescription");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExecutionDescription(java.lang.String ExecutionDescription) throws Throwable {
        try {
            classInstance.Set("ExecutionDescription", (Object)ExecutionDescription);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getCommandLine() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("CommandLine");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCommandLine(java.lang.String CommandLine) throws Throwable {
        try {
            classInstance.Set("CommandLine", (Object)CommandLine);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getAdditionalInputs() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("AdditionalInputs");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAdditionalInputs(java.lang.String AdditionalInputs) throws Throwable {
        try {
            classInstance.Set("AdditionalInputs", (Object)AdditionalInputs);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getOutputs() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Outputs");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setOutputs(java.lang.String Outputs) throws Throwable {
        try {
            classInstance.Set("Outputs", (Object)Outputs);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RuleOverrideMode getOverrideMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("OverrideMode");
            return new RuleOverrideMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setOverrideMode(RuleOverrideMode OverrideMode) throws Throwable {
        try {
            classInstance.Set("OverrideMode", (Object)OverrideMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getPropertyPagesHidden() throws Throwable {
        try {
            return (boolean)classInstance.Get("PropertyPagesHidden");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPropertyPagesHidden(boolean PropertyPagesHidden) throws Throwable {
        try {
            classInstance.Set("PropertyPagesHidden", PropertyPagesHidden);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}