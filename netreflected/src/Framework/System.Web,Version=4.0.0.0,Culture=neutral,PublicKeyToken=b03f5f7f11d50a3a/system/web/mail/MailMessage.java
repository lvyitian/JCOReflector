/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.web.mail;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.web.mail.MailPriority;
import system.web.mail.MailFormat;
import system.text.Encoding;


/**
 * The base .NET class managing System.Web.Mail.MailMessage, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class MailMessage extends NetObject  {
    public static final String assemblyFullName = "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Web";
    public static final String className = "System.Web.Mail.MailMessage";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MailMessage(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static MailMessage castFrom(IJCOBridgeReflected from) throws Throwable {
        return new MailMessage(from.getJCOInstance());
    }

    // Constructors section
    
    
    public MailMessage() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.FormatException, system.NotSupportedException, system.ObjectDisposedException, system.threading.AbandonedMutexException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    

    
    // Properties section
    
    
    public java.lang.String getFrom() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("From");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFrom(java.lang.String From) throws Throwable {
        try {
            classInstance.Set("From", (Object)From);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTo() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("To");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTo(java.lang.String To) throws Throwable {
        try {
            classInstance.Set("To", (Object)To);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getCc() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Cc");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCc(java.lang.String Cc) throws Throwable {
        try {
            classInstance.Set("Cc", (Object)Cc);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getBcc() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Bcc");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBcc(java.lang.String Bcc) throws Throwable {
        try {
            classInstance.Set("Bcc", (Object)Bcc);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSubject() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Subject");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSubject(java.lang.String Subject) throws Throwable {
        try {
            classInstance.Set("Subject", (Object)Subject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MailPriority getPriority() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Priority");
            return new MailPriority(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPriority(MailPriority Priority) throws Throwable {
        try {
            classInstance.Set("Priority", (Object)Priority.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getUrlContentBase() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("UrlContentBase");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUrlContentBase(java.lang.String UrlContentBase) throws Throwable {
        try {
            classInstance.Set("UrlContentBase", (Object)UrlContentBase);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getUrlContentLocation() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("UrlContentLocation");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUrlContentLocation(java.lang.String UrlContentLocation) throws Throwable {
        try {
            classInstance.Set("UrlContentLocation", (Object)UrlContentLocation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getBody() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Body");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBody(java.lang.String Body) throws Throwable {
        try {
            classInstance.Set("Body", (Object)Body);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MailFormat getBodyFormat() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("BodyFormat");
            return new MailFormat(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBodyFormat(MailFormat BodyFormat) throws Throwable {
        try {
            classInstance.Set("BodyFormat", (Object)BodyFormat.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Encoding getBodyEncoding() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("BodyEncoding");
            return new Encoding(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBodyEncoding(Encoding BodyEncoding) throws Throwable {
        try {
            classInstance.Set("BodyEncoding", (Object)BodyEncoding.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}