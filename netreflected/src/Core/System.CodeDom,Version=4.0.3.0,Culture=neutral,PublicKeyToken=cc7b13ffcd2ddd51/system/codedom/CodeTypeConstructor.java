/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.codedom;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.codedom.CodeTypeReference;
import system.codedom.CodeStatementCollection;
import system.codedom.CodeParameterDeclarationExpressionCollection;
import system.codedom.CodeTypeReferenceCollection;
import system.codedom.CodeAttributeDeclarationCollection;
import system.codedom.CodeTypeParameterCollection;
import system.codedom.MemberAttributes;
import system.codedom.CodeLinePragma;
import system.codedom.CodeCommentStatementCollection;
import system.codedom.CodeDirectiveCollection;
import system.EventHandler;


/**
 * The base .NET class managing System.CodeDom.CodeTypeConstructor, System.CodeDom, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51. Extends {@link NetObject}.
 */
public class CodeTypeConstructor extends NetObject  {
    public static final String assemblyFullName = "System.CodeDom, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51";
	public static final String assemblyShortName = "System.CodeDom";
    public static final String className = "System.CodeDom.CodeTypeConstructor";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeTypeConstructor(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static CodeTypeConstructor castFrom(IJCOBridgeReflected from) throws Throwable {
        return new CodeTypeConstructor(from.getJCOInstance());
    }

    // Constructors section
    
    
    public CodeTypeConstructor() throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    

    
    // Properties section
    
    
    public CodeTypeReference getReturnType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ReturnType");
            return new CodeTypeReference(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReturnType(CodeTypeReference ReturnType) throws Throwable {
        try {
            classInstance.Set("ReturnType", (Object)ReturnType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeStatementCollection getStatements() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Statements");
            return new CodeStatementCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeParameterDeclarationExpressionCollection getParameters() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Parameters");
            return new CodeParameterDeclarationExpressionCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeTypeReference getPrivateImplementationType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PrivateImplementationType");
            return new CodeTypeReference(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPrivateImplementationType(CodeTypeReference PrivateImplementationType) throws Throwable {
        try {
            classInstance.Set("PrivateImplementationType", (Object)PrivateImplementationType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeTypeReferenceCollection getImplementationTypes() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ImplementationTypes");
            return new CodeTypeReferenceCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeAttributeDeclarationCollection getReturnTypeCustomAttributes() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ReturnTypeCustomAttributes");
            return new CodeAttributeDeclarationCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeTypeParameterCollection getTypeParameters() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("TypeParameters");
            return new CodeTypeParameterCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Name");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setName(java.lang.String Name) throws Throwable {
        try {
            classInstance.Set("Name", (Object)Name);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MemberAttributes getAttributes() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Attributes");
            return new MemberAttributes(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAttributes(MemberAttributes Attributes) throws Throwable {
        try {
            classInstance.Set("Attributes", (Object)Attributes.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeAttributeDeclarationCollection getCustomAttributes() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CustomAttributes");
            return new CodeAttributeDeclarationCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCustomAttributes(CodeAttributeDeclarationCollection CustomAttributes) throws Throwable {
        try {
            classInstance.Set("CustomAttributes", (Object)CustomAttributes.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeLinePragma getLinePragma() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LinePragma");
            return new CodeLinePragma(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLinePragma(CodeLinePragma LinePragma) throws Throwable {
        try {
            classInstance.Set("LinePragma", (Object)LinePragma.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeCommentStatementCollection getComments() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Comments");
            return new CodeCommentStatementCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeDirectiveCollection getStartDirectives() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("StartDirectives");
            return new CodeDirectiveCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeDirectiveCollection getEndDirectives() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("EndDirectives");
            return new CodeDirectiveCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
    public void addPopulateParameters(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("PopulateParameters", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removePopulateParameters(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("PopulateParameters", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addPopulateStatements(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("PopulateStatements", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removePopulateStatements(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("PopulateStatements", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addPopulateImplementationTypes(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("PopulateImplementationTypes", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removePopulateImplementationTypes(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("PopulateImplementationTypes", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


}