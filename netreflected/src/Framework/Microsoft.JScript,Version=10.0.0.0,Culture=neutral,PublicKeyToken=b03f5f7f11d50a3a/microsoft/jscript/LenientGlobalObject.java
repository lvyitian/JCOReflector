/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.jscript;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section


/**
 * The base .NET class managing Microsoft.JScript.LenientGlobalObject, Microsoft.JScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class LenientGlobalObject extends NetObject  {
    public static final String assemblyFullName = "Microsoft.JScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "Microsoft.JScript";
    public static final String className = "Microsoft.JScript.LenientGlobalObject";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LenientGlobalObject(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static LenientGlobalObject castFrom(IJCOBridgeReflected from) throws Throwable {
        return new LenientGlobalObject(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    

    
    // Properties section
    
    
    public NetObject getActiveXObject() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ActiveXObject");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setActiveXObject(NetObject ActiveXObject) throws Throwable {
        try {
            classInstance.Set("ActiveXObject", (Object)ActiveXObject.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getArray() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Array");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setArray(NetObject Array) throws Throwable {
        try {
            classInstance.Set("Array", (Object)Array.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getBoolean() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Boolean");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBoolean(NetObject Boolean) throws Throwable {
        try {
            classInstance.Set("Boolean", (Object)Boolean.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getDate() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Date");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDate(NetObject Date) throws Throwable {
        try {
            classInstance.Set("Date", (Object)Date.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getEnumerator() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Enumerator");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnumerator(NetObject Enumerator) throws Throwable {
        try {
            classInstance.Set("Enumerator", (Object)Enumerator.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getError() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Error");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setError(NetObject Error) throws Throwable {
        try {
            classInstance.Set("Error", (Object)Error.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getEvalError() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("EvalError");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEvalError(NetObject EvalError) throws Throwable {
        try {
            classInstance.Set("EvalError", (Object)EvalError.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getFunction() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Function");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFunction(NetObject Function) throws Throwable {
        try {
            classInstance.Set("Function", (Object)Function.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getMath() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Math");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMath(NetObject Math) throws Throwable {
        try {
            classInstance.Set("Math", (Object)Math.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getNumber() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Number");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setNumber(NetObject Number) throws Throwable {
        try {
            classInstance.Set("Number", (Object)Number.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getObject() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Object");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setObject(NetObject Object) throws Throwable {
        try {
            classInstance.Set("Object", (Object)Object.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getRangeError() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RangeError");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRangeError(NetObject RangeError) throws Throwable {
        try {
            classInstance.Set("RangeError", (Object)RangeError.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getReferenceError() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ReferenceError");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReferenceError(NetObject ReferenceError) throws Throwable {
        try {
            classInstance.Set("ReferenceError", (Object)ReferenceError.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getRegExp() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RegExp");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRegExp(NetObject RegExp) throws Throwable {
        try {
            classInstance.Set("RegExp", (Object)RegExp.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getString() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("String");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setString(NetObject String) throws Throwable {
        try {
            classInstance.Set("String", (Object)String.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getSyntaxError() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SyntaxError");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSyntaxError(NetObject SyntaxError) throws Throwable {
        try {
            classInstance.Set("SyntaxError", (Object)SyntaxError.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getTypeError() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("TypeError");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTypeError(NetObject TypeError) throws Throwable {
        try {
            classInstance.Set("TypeError", (Object)TypeError.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getURIError() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("URIError");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setURIError(NetObject URIError) throws Throwable {
        try {
            classInstance.Set("URIError", (Object)URIError.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getVBArray() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("VBArray");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setVBArray(NetObject VBArray) throws Throwable {
        try {
            classInstance.Set("VBArray", (Object)VBArray.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}