/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.data.common;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.data.common.DbCommand;
import system.data.ConflictOption;
import system.data.common.CatalogLocation;
import system.data.common.DbDataAdapter;
import system.EventHandler;


/**
 * The base .NET class managing System.Data.Common.DbCommandBuilder, System.Data.Common, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class DbCommandBuilder extends NetObject  {
    public static final String assemblyFullName = "System.Data.Common, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Data.Common";
    public static final String className = "System.Data.Common.DbCommandBuilder";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbCommandBuilder(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static DbCommandBuilder castFrom(IJCOBridgeReflected from) throws Throwable {
        return new DbCommandBuilder(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public DbCommand GetInsertCommand() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.PlatformNotSupportedException, system.NotSupportedException, system.FormatException, system.ArgumentOutOfRangeException, system.threading.SynchronizationLockException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.collections.generic.KeyNotFoundException {
        try {
            JCObject objGetInsertCommand = (JCObject)classInstance.Invoke("GetInsertCommand");
            return new DbCommand(objGetInsertCommand);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbCommand GetInsertCommand(boolean useColumnsForParameterNames) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.PlatformNotSupportedException, system.NotSupportedException, system.FormatException, system.ArgumentOutOfRangeException, system.threading.SynchronizationLockException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.collections.generic.KeyNotFoundException {
        try {
            JCObject objGetInsertCommand = (JCObject)classInstance.Invoke("GetInsertCommand", useColumnsForParameterNames);
            return new DbCommand(objGetInsertCommand);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbCommand GetUpdateCommand() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.PlatformNotSupportedException, system.NotSupportedException, system.FormatException, system.ArgumentOutOfRangeException, system.threading.SynchronizationLockException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.collections.generic.KeyNotFoundException {
        try {
            JCObject objGetUpdateCommand = (JCObject)classInstance.Invoke("GetUpdateCommand");
            return new DbCommand(objGetUpdateCommand);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbCommand GetUpdateCommand(boolean useColumnsForParameterNames) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.PlatformNotSupportedException, system.NotSupportedException, system.FormatException, system.ArgumentOutOfRangeException, system.threading.SynchronizationLockException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.collections.generic.KeyNotFoundException {
        try {
            JCObject objGetUpdateCommand = (JCObject)classInstance.Invoke("GetUpdateCommand", useColumnsForParameterNames);
            return new DbCommand(objGetUpdateCommand);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbCommand GetDeleteCommand() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.PlatformNotSupportedException, system.NotSupportedException, system.FormatException, system.ArgumentOutOfRangeException, system.threading.SynchronizationLockException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.collections.generic.KeyNotFoundException {
        try {
            JCObject objGetDeleteCommand = (JCObject)classInstance.Invoke("GetDeleteCommand");
            return new DbCommand(objGetDeleteCommand);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbCommand GetDeleteCommand(boolean useColumnsForParameterNames) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.PlatformNotSupportedException, system.NotSupportedException, system.FormatException, system.ArgumentOutOfRangeException, system.threading.SynchronizationLockException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.collections.generic.KeyNotFoundException {
        try {
            JCObject objGetDeleteCommand = (JCObject)classInstance.Invoke("GetDeleteCommand", useColumnsForParameterNames);
            return new DbCommand(objGetDeleteCommand);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String QuoteIdentifier(java.lang.String unquotedIdentifier) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException {
        try {
            return (java.lang.String)classInstance.Invoke("QuoteIdentifier", (Object)unquotedIdentifier);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RefreshSchema() throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException {
        try {
            classInstance.Invoke("RefreshSchema");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String UnquoteIdentifier(java.lang.String quotedIdentifier) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException {
        try {
            return (java.lang.String)classInstance.Invoke("UnquoteIdentifier", (Object)quotedIdentifier);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Dispose() throws Throwable, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException {
        try {
            classInstance.Invoke("Dispose");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.NotSupportedException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            JCObject objGetLifetimeService = (JCObject)classInstance.Invoke("GetLifetimeService");
            return new NetObject(objGetLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject InitializeLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.NotSupportedException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            JCObject objInitializeLifetimeService = (JCObject)classInstance.Invoke("InitializeLifetimeService");
            return new NetObject(objInitializeLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public ConflictOption getConflictOption() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ConflictOption");
            return new ConflictOption(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConflictOption(ConflictOption ConflictOption) throws Throwable {
        try {
            classInstance.Set("ConflictOption", (Object)ConflictOption.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CatalogLocation getCatalogLocation() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CatalogLocation");
            return new CatalogLocation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCatalogLocation(CatalogLocation CatalogLocation) throws Throwable {
        try {
            classInstance.Set("CatalogLocation", (Object)CatalogLocation.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getCatalogSeparator() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("CatalogSeparator");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCatalogSeparator(java.lang.String CatalogSeparator) throws Throwable {
        try {
            classInstance.Set("CatalogSeparator", (Object)CatalogSeparator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbDataAdapter getDataAdapter() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DataAdapter");
            return new DbDataAdapter(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDataAdapter(DbDataAdapter DataAdapter) throws Throwable {
        try {
            classInstance.Set("DataAdapter", (Object)DataAdapter.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getQuotePrefix() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("QuotePrefix");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setQuotePrefix(java.lang.String QuotePrefix) throws Throwable {
        try {
            classInstance.Set("QuotePrefix", (Object)QuotePrefix);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getQuoteSuffix() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("QuoteSuffix");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setQuoteSuffix(java.lang.String QuoteSuffix) throws Throwable {
        try {
            classInstance.Set("QuoteSuffix", (Object)QuoteSuffix);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSchemaSeparator() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("SchemaSeparator");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSchemaSeparator(java.lang.String SchemaSeparator) throws Throwable {
        try {
            classInstance.Set("SchemaSeparator", (Object)SchemaSeparator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSetAllValues() throws Throwable {
        try {
            return (boolean)classInstance.Get("SetAllValues");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSetAllValues(boolean SetAllValues) throws Throwable {
        try {
            classInstance.Set("SetAllValues", SetAllValues);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
    public void addDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


}