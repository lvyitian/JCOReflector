/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.windows.forms;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.windows.forms.HtmlElement;
import system.drawing.Point;
import system.windows.forms.HtmlElementCollection;
import system.EventHandler;
import system.windows.forms.HtmlDocument;
import system.Uri;
import system.windows.forms.HtmlWindow;
import system.drawing.Color;
import system.windows.forms.HtmlElementEventHandler;


/**
 * The base .NET class managing System.Windows.Forms.HtmlDocument, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class HtmlDocument extends NetObject  {
    public static final String assemblyFullName = "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "System.Windows.Forms";
    public static final String className = "System.Windows.Forms.HtmlDocument";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HtmlDocument(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static HtmlDocument castFrom(IJCOBridgeReflected from) throws Throwable {
        return new HtmlDocument(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public void ExecCommand(java.lang.String command, boolean showUI, NetObject value) throws Throwable {
        try {
            classInstance.Invoke("ExecCommand", (Object)command, showUI, (Object)value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Focus() throws Throwable {
        try {
            classInstance.Invoke("Focus");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HtmlElement GetElementById(java.lang.String id) throws Throwable {
        try {
            JCObject objGetElementById = (JCObject)classInstance.Invoke("GetElementById", (Object)id);
            return new HtmlElement(objGetElementById);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HtmlElement GetElementFromPoint(Point point) throws Throwable {
        try {
            JCObject objGetElementFromPoint = (JCObject)classInstance.Invoke("GetElementFromPoint", (Object)point.getJCOInstance());
            return new HtmlElement(objGetElementFromPoint);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HtmlElementCollection GetElementsByTagName(java.lang.String tagName) throws Throwable {
        try {
            JCObject objGetElementsByTagName = (JCObject)classInstance.Invoke("GetElementsByTagName", (Object)tagName);
            return new HtmlElementCollection(objGetElementsByTagName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HtmlElement CreateElement(java.lang.String elementTag) throws Throwable {
        try {
            JCObject objCreateElement = (JCObject)classInstance.Invoke("CreateElement", (Object)elementTag);
            return new HtmlElement(objCreateElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject InvokeScript(java.lang.String scriptName) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.RankException, system.InvalidOperationException, system.OutOfMemoryException {
        try {
            JCObject objInvokeScript = (JCObject)classInstance.Invoke("InvokeScript", (Object)scriptName);
            return new NetObject(objInvokeScript);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AttachEventHandler(java.lang.String eventName, EventHandler eventHandler) throws Throwable, system.ArgumentNullException, system.collections.generic.KeyNotFoundException, system.ArgumentOutOfRangeException, system.ArgumentException {
        try {
            classInstance.Invoke("AttachEventHandler", (Object)eventName, eventHandler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DetachEventHandler(java.lang.String eventName, EventHandler eventHandler) throws Throwable, system.ArgumentNullException, system.collections.generic.KeyNotFoundException, system.ArgumentOutOfRangeException, system.ArgumentException {
        try {
            classInstance.Invoke("DetachEventHandler", (Object)eventName, eventHandler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Write(java.lang.String text) throws Throwable {
        try {
            classInstance.Invoke("Write", (Object)text);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HtmlDocument OpenNew(boolean replaceInHistory) throws Throwable {
        try {
            JCObject objOpenNew = (JCObject)classInstance.Invoke("OpenNew", replaceInHistory);
            return new HtmlDocument(objOpenNew);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject InvokeScript(java.lang.String scriptName, NetObject[] args) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.RankException, system.InvalidOperationException, system.OutOfMemoryException {
        try {
            JCObject objInvokeScript = (JCObject)classInstance.Invoke("InvokeScript", (Object)scriptName, (Object)toObjectFromArray(args));
            return new NetObject(objInvokeScript);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public HtmlElement getActiveElement() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ActiveElement");
            return new HtmlElement(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HtmlElement getBody() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Body");
            return new HtmlElement(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDomain() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Domain");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDomain(java.lang.String Domain) throws Throwable {
        try {
            classInstance.Set("Domain", (Object)Domain);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTitle() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Title");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTitle(java.lang.String Title) throws Throwable {
        try {
            classInstance.Set("Title", (Object)Title);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Uri getUrl() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Url");
            return new Uri(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HtmlWindow getWindow() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Window");
            return new HtmlWindow(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getBackColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("BackColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBackColor(Color BackColor) throws Throwable {
        try {
            classInstance.Set("BackColor", (Object)BackColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getForeColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ForeColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setForeColor(Color ForeColor) throws Throwable {
        try {
            classInstance.Set("ForeColor", (Object)ForeColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getLinkColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LinkColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLinkColor(Color LinkColor) throws Throwable {
        try {
            classInstance.Set("LinkColor", (Object)LinkColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getActiveLinkColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ActiveLinkColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setActiveLinkColor(Color ActiveLinkColor) throws Throwable {
        try {
            classInstance.Set("ActiveLinkColor", (Object)ActiveLinkColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getVisitedLinkColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("VisitedLinkColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setVisitedLinkColor(Color VisitedLinkColor) throws Throwable {
        try {
            classInstance.Set("VisitedLinkColor", (Object)VisitedLinkColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getFocused() throws Throwable {
        try {
            return (boolean)classInstance.Get("Focused");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getDomDocument() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DomDocument");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getCookie() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Cookie");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCookie(java.lang.String Cookie) throws Throwable {
        try {
            classInstance.Set("Cookie", (Object)Cookie);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRightToLeft() throws Throwable {
        try {
            return (boolean)classInstance.Get("RightToLeft");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRightToLeft(boolean RightToLeft) throws Throwable {
        try {
            classInstance.Set("RightToLeft", RightToLeft);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getEncoding() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Encoding");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEncoding(java.lang.String Encoding) throws Throwable {
        try {
            classInstance.Set("Encoding", (Object)Encoding);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDefaultEncoding() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("DefaultEncoding");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HtmlElementCollection getAll() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("All");
            return new HtmlElementCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HtmlElementCollection getLinks() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Links");
            return new HtmlElementCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HtmlElementCollection getImages() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Images");
            return new HtmlElementCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HtmlElementCollection getForms() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Forms");
            return new HtmlElementCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
    public void addClick(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Click", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeClick(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Click", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addContextMenuShowing(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ContextMenuShowing", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeContextMenuShowing(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ContextMenuShowing", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addFocusing(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Focusing", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeFocusing(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Focusing", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addLosingFocus(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("LosingFocus", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeLosingFocus(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("LosingFocus", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addMouseDown(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("MouseDown", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeMouseDown(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("MouseDown", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addMouseLeave(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("MouseLeave", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeMouseLeave(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("MouseLeave", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addMouseMove(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("MouseMove", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeMouseMove(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("MouseMove", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addMouseOver(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("MouseOver", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeMouseOver(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("MouseOver", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addMouseUp(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("MouseUp", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeMouseUp(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("MouseUp", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addStop(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Stop", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeStop(HtmlElementEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Stop", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


}