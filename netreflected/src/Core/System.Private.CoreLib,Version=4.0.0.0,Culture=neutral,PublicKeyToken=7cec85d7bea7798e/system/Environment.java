/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.EnvironmentVariableTarget;
import system.OperatingSystem;
import system.Version;


/**
 * The base .NET class managing System.Environment, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e. Extends {@link NetObject}.
 */
public class Environment extends NetObject  {
    public static final String assemblyFullName = "System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e";
	public static final String assemblyShortName = "System.Private.CoreLib";
    public static final String className = "System.Environment";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Environment(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static Environment castFrom(IJCOBridgeReflected from) throws Throwable {
        return new Environment(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public static void FailFast(java.lang.String message) throws Throwable {
        try {
            classType.Invoke("FailFast", (Object)message);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void FailFast(java.lang.String message, NetException exception) throws Throwable {
        try {
            classType.Invoke("FailFast", (Object)message, (Object)exception.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void FailFast(java.lang.String message, NetException exception, java.lang.String errorMessage) throws Throwable {
        try {
            classType.Invoke("FailFast", (Object)message, (Object)exception.getJCOInstance(), (Object)errorMessage);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Exit(int exitCode) throws Throwable {
        try {
            classType.Invoke("Exit", exitCode);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String[] GetCommandLineArgs() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetCommandLineArgs");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
            for(int indexGetCommandLineArgs = 0; indexGetCommandLineArgs < resultingArrayList.size(); indexGetCommandLineArgs++ ) {
				resultingArray[indexGetCommandLineArgs] = (java.lang.String)resultingArrayList.get(indexGetCommandLineArgs);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String GetEnvironmentVariable(java.lang.String variable) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.ArrayTypeMismatchException {
        try {
            return (java.lang.String)classType.Invoke("GetEnvironmentVariable", (Object)variable);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String GetEnvironmentVariable(java.lang.String variable, EnvironmentVariableTarget target) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.security.SecurityException, system.io.IOException {
        try {
            return (java.lang.String)classType.Invoke("GetEnvironmentVariable", (Object)variable, (Object)target.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SetEnvironmentVariable(java.lang.String variable, java.lang.String value) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.OutOfMemoryException {
        try {
            classType.Invoke("SetEnvironmentVariable", (Object)variable, (Object)value);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SetEnvironmentVariable(java.lang.String variable, java.lang.String value, EnvironmentVariableTarget target) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.OutOfMemoryException, system.security.SecurityException, system.UnauthorizedAccessException, system.io.IOException {
        try {
            classType.Invoke("SetEnvironmentVariable", (Object)variable, (Object)value, (Object)target.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String ExpandEnvironmentVariables(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.NotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.ArrayTypeMismatchException {
        try {
            return (java.lang.String)classType.Invoke("ExpandEnvironmentVariables", (Object)name);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String[] GetLogicalDrives() throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetLogicalDrives");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
            for(int indexGetLogicalDrives = 0; indexGetLogicalDrives < resultingArrayList.size(); indexGetLogicalDrives++ ) {
				resultingArray[indexGetLogicalDrives] = (java.lang.String)resultingArrayList.get(indexGetLogicalDrives);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public static int getCurrentManagedThreadId() throws Throwable {
        try {
            return (int)classType.Get("CurrentManagedThreadId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int getExitCode() throws Throwable {
        try {
            return (int)classType.Get("ExitCode");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setExitCode(int ExitCode) throws Throwable {
        try {
            classType.Set("ExitCode", ExitCode);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getHasShutdownStarted() throws Throwable {
        try {
            return (boolean)classType.Get("HasShutdownStarted");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int getProcessorCount() throws Throwable {
        try {
            return (int)classType.Get("ProcessorCount");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String getStackTrace() throws Throwable {
        try {
            return (java.lang.String)classType.Get("StackTrace");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int getTickCount() throws Throwable {
        try {
            return (int)classType.Get("TickCount");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static long getTickCount64() throws Throwable {
        try {
            return (long)classType.Get("TickCount64");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String getCommandLine() throws Throwable {
        try {
            return (java.lang.String)classType.Get("CommandLine");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String getCurrentDirectory() throws Throwable {
        try {
            return (java.lang.String)classType.Get("CurrentDirectory");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setCurrentDirectory(java.lang.String CurrentDirectory) throws Throwable {
        try {
            classType.Set("CurrentDirectory", (Object)CurrentDirectory);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getIs64BitProcess() throws Throwable {
        try {
            return (boolean)classType.Get("Is64BitProcess");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getIs64BitOperatingSystem() throws Throwable {
        try {
            return (boolean)classType.Get("Is64BitOperatingSystem");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static OperatingSystem getOSVersion() throws Throwable {
        try {
            JCObject val = (JCObject)classType.Get("OSVersion");
            return new OperatingSystem(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getUserInteractive() throws Throwable {
        try {
            return (boolean)classType.Get("UserInteractive");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Version getVersion() throws Throwable {
        try {
            JCObject val = (JCObject)classType.Get("Version");
            return new Version(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String getNewLine() throws Throwable {
        try {
            return (java.lang.String)classType.Get("NewLine");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int getSystemPageSize() throws Throwable {
        try {
            return (int)classType.Get("SystemPageSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String getMachineName() throws Throwable {
        try {
            return (java.lang.String)classType.Get("MachineName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String getSystemDirectory() throws Throwable {
        try {
            return (java.lang.String)classType.Get("SystemDirectory");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static long getWorkingSet() throws Throwable {
        try {
            return (long)classType.Get("WorkingSet");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String getUserName() throws Throwable {
        try {
            return (java.lang.String)classType.Get("UserName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String getUserDomainName() throws Throwable {
        try {
            return (java.lang.String)classType.Get("UserDomainName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}