/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.runtime.remoting;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.runtime.remoting.ActivatedServiceTypeEntry;
import system.runtime.remoting.WellKnownObjectMode;
import system.runtime.remoting.WellKnownServiceTypeEntry;
import system.runtime.remoting.ActivatedClientTypeEntry;
import system.runtime.remoting.WellKnownClientTypeEntry;
import system.runtime.remoting.CustomErrorsModes;


/**
 * The base .NET class managing System.Runtime.Remoting.RemotingConfiguration, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class RemotingConfiguration extends NetObject  {
    public static final String assemblyFullName = "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "mscorlib";
    public static final String className = "System.Runtime.Remoting.RemotingConfiguration";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RemotingConfiguration(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static RemotingConfiguration castFrom(IJCOBridgeReflected from) throws Throwable {
        return new RemotingConfiguration(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public static void Configure(java.lang.String filename) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.ArgumentNullException, system.FormatException, system.runtime.remoting.RemotingException, system.NullReferenceException, system.NotSupportedException, system.security.SecurityException, system.NotImplementedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ApplicationException {
        try {
            classType.Invoke("Configure", (Object)filename);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Configure(java.lang.String filename, boolean ensureSecurity) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.ArgumentNullException, system.FormatException, system.runtime.remoting.RemotingException, system.NullReferenceException, system.OverflowException, system.IndexOutOfRangeException, system.NotSupportedException, system.security.SecurityException, system.MissingMethodException, system.NotImplementedException, system.ApplicationException {
        try {
            classType.Invoke("Configure", (Object)filename, ensureSecurity);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean CustomErrorsEnabled(boolean isLocalRequest) throws Throwable {
        try {
            return (boolean)classType.Invoke("CustomErrorsEnabled", isLocalRequest);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void RegisterActivatedServiceType(NetType type) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.FormatException, system.runtime.remoting.RemotingException, system.MissingMethodException, system.reflection.TargetInvocationException {
        try {
            classType.Invoke("RegisterActivatedServiceType", (Object)type.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void RegisterActivatedServiceType(ActivatedServiceTypeEntry entry) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.ArgumentException, system.FormatException, system.runtime.remoting.RemotingException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException {
        try {
            classType.Invoke("RegisterActivatedServiceType", (Object)entry.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void RegisterWellKnownServiceType(NetType type, java.lang.String objectUri, WellKnownObjectMode mode) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.FormatException, system.runtime.remoting.RemotingException, system.InvalidOperationException {
        try {
            classType.Invoke("RegisterWellKnownServiceType", (Object)type.getJCOInstance(), (Object)objectUri, (Object)mode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void RegisterWellKnownServiceType(WellKnownServiceTypeEntry entry) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.FormatException, system.runtime.remoting.RemotingException, system.InvalidOperationException {
        try {
            classType.Invoke("RegisterWellKnownServiceType", (Object)entry.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void RegisterActivatedClientType(NetType type, java.lang.String appUrl) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.FormatException, system.runtime.remoting.RemotingException {
        try {
            classType.Invoke("RegisterActivatedClientType", (Object)type.getJCOInstance(), (Object)appUrl);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void RegisterActivatedClientType(ActivatedClientTypeEntry entry) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.ArgumentException, system.FormatException, system.runtime.remoting.RemotingException, system.InvalidOperationException {
        try {
            classType.Invoke("RegisterActivatedClientType", (Object)entry.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void RegisterWellKnownClientType(NetType type, java.lang.String objectUrl) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.FormatException, system.runtime.remoting.RemotingException {
        try {
            classType.Invoke("RegisterWellKnownClientType", (Object)type.getJCOInstance(), (Object)objectUrl);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void RegisterWellKnownClientType(WellKnownClientTypeEntry entry) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.ArgumentException, system.FormatException, system.runtime.remoting.RemotingException, system.InvalidOperationException {
        try {
            classType.Invoke("RegisterWellKnownClientType", (Object)entry.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ActivatedServiceTypeEntry[] GetRegisteredActivatedServiceTypes() throws Throwable {
        try {
            ArrayList<ActivatedServiceTypeEntry> resultingArrayList = new ArrayList<ActivatedServiceTypeEntry>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetRegisteredActivatedServiceTypes");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new ActivatedServiceTypeEntry(resultingObject));
            }
            ActivatedServiceTypeEntry[] resultingArray = new ActivatedServiceTypeEntry[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static WellKnownServiceTypeEntry[] GetRegisteredWellKnownServiceTypes() throws Throwable, system.ArgumentNullException {
        try {
            ArrayList<WellKnownServiceTypeEntry> resultingArrayList = new ArrayList<WellKnownServiceTypeEntry>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetRegisteredWellKnownServiceTypes");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new WellKnownServiceTypeEntry(resultingObject));
            }
            WellKnownServiceTypeEntry[] resultingArray = new WellKnownServiceTypeEntry[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ActivatedClientTypeEntry[] GetRegisteredActivatedClientTypes() throws Throwable, system.ArgumentNullException {
        try {
            ArrayList<ActivatedClientTypeEntry> resultingArrayList = new ArrayList<ActivatedClientTypeEntry>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetRegisteredActivatedClientTypes");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new ActivatedClientTypeEntry(resultingObject));
            }
            ActivatedClientTypeEntry[] resultingArray = new ActivatedClientTypeEntry[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static WellKnownClientTypeEntry[] GetRegisteredWellKnownClientTypes() throws Throwable, system.ArgumentNullException {
        try {
            ArrayList<WellKnownClientTypeEntry> resultingArrayList = new ArrayList<WellKnownClientTypeEntry>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetRegisteredWellKnownClientTypes");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new WellKnownClientTypeEntry(resultingObject));
            }
            WellKnownClientTypeEntry[] resultingArray = new WellKnownClientTypeEntry[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ActivatedClientTypeEntry IsRemotelyActivatedClientType(NetType svrType) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.runtime.remoting.RemotingException, system.NotImplementedException {
        try {
            JCObject objIsRemotelyActivatedClientType = (JCObject)classType.Invoke("IsRemotelyActivatedClientType", (Object)svrType.getJCOInstance());
            return new ActivatedClientTypeEntry(objIsRemotelyActivatedClientType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ActivatedClientTypeEntry IsRemotelyActivatedClientType(java.lang.String typeName, java.lang.String assemblyName) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.runtime.remoting.RemotingException {
        try {
            JCObject objIsRemotelyActivatedClientType = (JCObject)classType.Invoke("IsRemotelyActivatedClientType", (Object)typeName, (Object)assemblyName);
            return new ActivatedClientTypeEntry(objIsRemotelyActivatedClientType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static WellKnownClientTypeEntry IsWellKnownClientType(NetType svrType) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.ObjectDisposedException, system.threading.AbandonedMutexException {
        try {
            JCObject objIsWellKnownClientType = (JCObject)classType.Invoke("IsWellKnownClientType", (Object)svrType.getJCOInstance());
            return new WellKnownClientTypeEntry(objIsWellKnownClientType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static WellKnownClientTypeEntry IsWellKnownClientType(java.lang.String typeName, java.lang.String assemblyName) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ObjectDisposedException, system.threading.AbandonedMutexException {
        try {
            JCObject objIsWellKnownClientType = (JCObject)classType.Invoke("IsWellKnownClientType", (Object)typeName, (Object)assemblyName);
            return new WellKnownClientTypeEntry(objIsWellKnownClientType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsActivationAllowed(NetType svrType) throws Throwable, system.ArgumentException, system.InvalidOperationException, system.ArgumentNullException {
        try {
            return (boolean)classType.Invoke("IsActivationAllowed", (Object)svrType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public static java.lang.String getApplicationName() throws Throwable {
        try {
            return (java.lang.String)classType.Get("ApplicationName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setApplicationName(java.lang.String ApplicationName) throws Throwable {
        try {
            classType.Set("ApplicationName", (Object)ApplicationName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String getApplicationId() throws Throwable {
        try {
            return (java.lang.String)classType.Get("ApplicationId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String getProcessId() throws Throwable {
        try {
            return (java.lang.String)classType.Get("ProcessId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static CustomErrorsModes getCustomErrorsMode() throws Throwable {
        try {
            JCObject val = (JCObject)classType.Get("CustomErrorsMode");
            return new CustomErrorsModes(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setCustomErrorsMode(CustomErrorsModes CustomErrorsMode) throws Throwable {
        try {
            classType.Set("CustomErrorsMode", (Object)CustomErrorsMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}