/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.build.tasks;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.build.utilities.TaskLoggingHelper;


/**
 * The base .NET class managing Microsoft.Build.Tasks.ResolveAssemblyReference, Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class ResolveAssemblyReference extends NetObject  {
    public static final String assemblyFullName = "Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "Microsoft.Build.Tasks.v4.0";
    public static final String className = "Microsoft.Build.Tasks.ResolveAssemblyReference";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ResolveAssemblyReference(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static ResolveAssemblyReference castFrom(IJCOBridgeReflected from) throws Throwable {
        return new ResolveAssemblyReference(from.getJCOInstance());
    }

    // Constructors section
    
    
    public ResolveAssemblyReference() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public boolean Execute() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.InvalidOperationException, system.NullReferenceException, system.OutOfMemoryException, system.MissingMethodException, system.reflection.TargetInvocationException, system.AccessViolationException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.security.SecurityException, system.io.EndOfStreamException, system.collections.generic.KeyNotFoundException, system.runtime.serialization.SerializationException, system.RankException, system.BadImageFormatException {
        try {
            return (boolean)classInstance.Invoke("Execute");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public java.lang.String getWarnOrErrorOnTargetArchitectureMismatch() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("WarnOrErrorOnTargetArchitectureMismatch");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setWarnOrErrorOnTargetArchitectureMismatch(java.lang.String WarnOrErrorOnTargetArchitectureMismatch) throws Throwable {
        try {
            classInstance.Set("WarnOrErrorOnTargetArchitectureMismatch", (Object)WarnOrErrorOnTargetArchitectureMismatch);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getLatestTargetFrameworkDirectories() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("LatestTargetFrameworkDirectories");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexLatestTargetFrameworkDirectories = 0; indexLatestTargetFrameworkDirectories < resultingArrayList.size(); indexLatestTargetFrameworkDirectories++ ) {
				resultingArray[indexLatestTargetFrameworkDirectories] = (java.lang.String)resultingArrayList.get(indexLatestTargetFrameworkDirectories);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLatestTargetFrameworkDirectories(java.lang.String[] LatestTargetFrameworkDirectories) throws Throwable {
        try {
            classInstance.Set("LatestTargetFrameworkDirectories", (Object)LatestTargetFrameworkDirectories);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIgnoreTargetFrameworkAttributeVersionMismatch() throws Throwable {
        try {
            return (boolean)classInstance.Get("IgnoreTargetFrameworkAttributeVersionMismatch");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIgnoreTargetFrameworkAttributeVersionMismatch(boolean IgnoreTargetFrameworkAttributeVersionMismatch) throws Throwable {
        try {
            classInstance.Set("IgnoreTargetFrameworkAttributeVersionMismatch", IgnoreTargetFrameworkAttributeVersionMismatch);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getTargetFrameworkSubsets() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("TargetFrameworkSubsets");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexTargetFrameworkSubsets = 0; indexTargetFrameworkSubsets < resultingArrayList.size(); indexTargetFrameworkSubsets++ ) {
				resultingArray[indexTargetFrameworkSubsets] = (java.lang.String)resultingArrayList.get(indexTargetFrameworkSubsets);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTargetFrameworkSubsets(java.lang.String[] TargetFrameworkSubsets) throws Throwable {
        try {
            classInstance.Set("TargetFrameworkSubsets", (Object)TargetFrameworkSubsets);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getCandidateAssemblyFiles() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("CandidateAssemblyFiles");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexCandidateAssemblyFiles = 0; indexCandidateAssemblyFiles < resultingArrayList.size(); indexCandidateAssemblyFiles++ ) {
				resultingArray[indexCandidateAssemblyFiles] = (java.lang.String)resultingArrayList.get(indexCandidateAssemblyFiles);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCandidateAssemblyFiles(java.lang.String[] CandidateAssemblyFiles) throws Throwable {
        try {
            classInstance.Set("CandidateAssemblyFiles", (Object)CandidateAssemblyFiles);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getTargetFrameworkDirectories() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("TargetFrameworkDirectories");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexTargetFrameworkDirectories = 0; indexTargetFrameworkDirectories < resultingArrayList.size(); indexTargetFrameworkDirectories++ ) {
				resultingArray[indexTargetFrameworkDirectories] = (java.lang.String)resultingArrayList.get(indexTargetFrameworkDirectories);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTargetFrameworkDirectories(java.lang.String[] TargetFrameworkDirectories) throws Throwable {
        try {
            classInstance.Set("TargetFrameworkDirectories", (Object)TargetFrameworkDirectories);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIgnoreDefaultInstalledAssemblyTables() throws Throwable {
        try {
            return (boolean)classInstance.Get("IgnoreDefaultInstalledAssemblyTables");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIgnoreDefaultInstalledAssemblyTables(boolean IgnoreDefaultInstalledAssemblyTables) throws Throwable {
        try {
            classInstance.Set("IgnoreDefaultInstalledAssemblyTables", IgnoreDefaultInstalledAssemblyTables);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIgnoreDefaultInstalledAssemblySubsetTables() throws Throwable {
        try {
            return (boolean)classInstance.Get("IgnoreDefaultInstalledAssemblySubsetTables");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIgnoreDefaultInstalledAssemblySubsetTables(boolean IgnoreDefaultInstalledAssemblySubsetTables) throws Throwable {
        try {
            classInstance.Set("IgnoreDefaultInstalledAssemblySubsetTables", IgnoreDefaultInstalledAssemblySubsetTables);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIgnoreVersionForFrameworkReferences() throws Throwable {
        try {
            return (boolean)classInstance.Get("IgnoreVersionForFrameworkReferences");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIgnoreVersionForFrameworkReferences(boolean IgnoreVersionForFrameworkReferences) throws Throwable {
        try {
            classInstance.Set("IgnoreVersionForFrameworkReferences", IgnoreVersionForFrameworkReferences);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTargetProcessorArchitecture() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TargetProcessorArchitecture");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTargetProcessorArchitecture(java.lang.String TargetProcessorArchitecture) throws Throwable {
        try {
            classInstance.Set("TargetProcessorArchitecture", (Object)TargetProcessorArchitecture);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTargetedRuntimeVersion() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TargetedRuntimeVersion");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTargetedRuntimeVersion(java.lang.String TargetedRuntimeVersion) throws Throwable {
        try {
            classInstance.Set("TargetedRuntimeVersion", (Object)TargetedRuntimeVersion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getSearchPaths() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("SearchPaths");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexSearchPaths = 0; indexSearchPaths < resultingArrayList.size(); indexSearchPaths++ ) {
				resultingArray[indexSearchPaths] = (java.lang.String)resultingArrayList.get(indexSearchPaths);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSearchPaths(java.lang.String[] SearchPaths) throws Throwable {
        try {
            classInstance.Set("SearchPaths", (Object)SearchPaths);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getAllowedAssemblyExtensions() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("AllowedAssemblyExtensions");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexAllowedAssemblyExtensions = 0; indexAllowedAssemblyExtensions < resultingArrayList.size(); indexAllowedAssemblyExtensions++ ) {
				resultingArray[indexAllowedAssemblyExtensions] = (java.lang.String)resultingArrayList.get(indexAllowedAssemblyExtensions);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowedAssemblyExtensions(java.lang.String[] AllowedAssemblyExtensions) throws Throwable {
        try {
            classInstance.Set("AllowedAssemblyExtensions", (Object)AllowedAssemblyExtensions);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getAllowedRelatedFileExtensions() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("AllowedRelatedFileExtensions");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexAllowedRelatedFileExtensions = 0; indexAllowedRelatedFileExtensions < resultingArrayList.size(); indexAllowedRelatedFileExtensions++ ) {
				resultingArray[indexAllowedRelatedFileExtensions] = (java.lang.String)resultingArrayList.get(indexAllowedRelatedFileExtensions);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowedRelatedFileExtensions(java.lang.String[] AllowedRelatedFileExtensions) throws Throwable {
        try {
            classInstance.Set("AllowedRelatedFileExtensions", (Object)AllowedRelatedFileExtensions);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getAppConfigFile() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("AppConfigFile");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAppConfigFile(java.lang.String AppConfigFile) throws Throwable {
        try {
            classInstance.Set("AppConfigFile", (Object)AppConfigFile);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAutoUnify() throws Throwable {
        try {
            return (boolean)classInstance.Get("AutoUnify");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutoUnify(boolean AutoUnify) throws Throwable {
        try {
            classInstance.Set("AutoUnify", AutoUnify);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getCopyLocalDependenciesWhenParentReferenceInGac() throws Throwable {
        try {
            return (boolean)classInstance.Get("CopyLocalDependenciesWhenParentReferenceInGac");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCopyLocalDependenciesWhenParentReferenceInGac(boolean CopyLocalDependenciesWhenParentReferenceInGac) throws Throwable {
        try {
            classInstance.Set("CopyLocalDependenciesWhenParentReferenceInGac", CopyLocalDependenciesWhenParentReferenceInGac);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getStateFile() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("StateFile");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStateFile(java.lang.String StateFile) throws Throwable {
        try {
            classInstance.Set("StateFile", (Object)StateFile);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getFindDependencies() throws Throwable {
        try {
            return (boolean)classInstance.Get("FindDependencies");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFindDependencies(boolean FindDependencies) throws Throwable {
        try {
            classInstance.Set("FindDependencies", FindDependencies);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getFindSatellites() throws Throwable {
        try {
            return (boolean)classInstance.Get("FindSatellites");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFindSatellites(boolean FindSatellites) throws Throwable {
        try {
            classInstance.Set("FindSatellites", FindSatellites);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getFindSerializationAssemblies() throws Throwable {
        try {
            return (boolean)classInstance.Get("FindSerializationAssemblies");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFindSerializationAssemblies(boolean FindSerializationAssemblies) throws Throwable {
        try {
            classInstance.Set("FindSerializationAssemblies", FindSerializationAssemblies);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getFindRelatedFiles() throws Throwable {
        try {
            return (boolean)classInstance.Get("FindRelatedFiles");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFindRelatedFiles(boolean FindRelatedFiles) throws Throwable {
        try {
            classInstance.Set("FindRelatedFiles", FindRelatedFiles);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSilent() throws Throwable {
        try {
            return (boolean)classInstance.Get("Silent");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSilent(boolean Silent) throws Throwable {
        try {
            classInstance.Set("Silent", Silent);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTargetFrameworkVersion() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TargetFrameworkVersion");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTargetFrameworkVersion(java.lang.String TargetFrameworkVersion) throws Throwable {
        try {
            classInstance.Set("TargetFrameworkVersion", (Object)TargetFrameworkVersion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTargetFrameworkMoniker() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TargetFrameworkMoniker");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTargetFrameworkMoniker(java.lang.String TargetFrameworkMoniker) throws Throwable {
        try {
            classInstance.Set("TargetFrameworkMoniker", (Object)TargetFrameworkMoniker);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTargetFrameworkMonikerDisplayName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TargetFrameworkMonikerDisplayName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTargetFrameworkMonikerDisplayName(java.lang.String TargetFrameworkMonikerDisplayName) throws Throwable {
        try {
            classInstance.Set("TargetFrameworkMonikerDisplayName", (Object)TargetFrameworkMonikerDisplayName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getFullTargetFrameworkSubsetNames() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("FullTargetFrameworkSubsetNames");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexFullTargetFrameworkSubsetNames = 0; indexFullTargetFrameworkSubsetNames < resultingArrayList.size(); indexFullTargetFrameworkSubsetNames++ ) {
				resultingArray[indexFullTargetFrameworkSubsetNames] = (java.lang.String)resultingArrayList.get(indexFullTargetFrameworkSubsetNames);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFullTargetFrameworkSubsetNames(java.lang.String[] FullTargetFrameworkSubsetNames) throws Throwable {
        try {
            classInstance.Set("FullTargetFrameworkSubsetNames", (Object)FullTargetFrameworkSubsetNames);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getProfileName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ProfileName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setProfileName(java.lang.String ProfileName) throws Throwable {
        try {
            classInstance.Set("ProfileName", (Object)ProfileName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getFullFrameworkFolders() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("FullFrameworkFolders");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexFullFrameworkFolders = 0; indexFullFrameworkFolders < resultingArrayList.size(); indexFullFrameworkFolders++ ) {
				resultingArray[indexFullFrameworkFolders] = (java.lang.String)resultingArrayList.get(indexFullFrameworkFolders);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFullFrameworkFolders(java.lang.String[] FullFrameworkFolders) throws Throwable {
        try {
            classInstance.Set("FullFrameworkFolders", (Object)FullFrameworkFolders);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TaskLoggingHelper getLog() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Log");
            return new TaskLoggingHelper(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}