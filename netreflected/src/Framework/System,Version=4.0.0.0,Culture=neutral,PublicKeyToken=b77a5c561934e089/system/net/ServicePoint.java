/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.net;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.net.BindIPEndPoint;
import system.Uri;
import system.DateTime;
import system.Version;
import system.security.cryptography.x509certificates.X509Certificate;


/**
 * The base .NET class managing System.Net.ServicePoint, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class ServicePoint extends NetObject  {
    public static final String assemblyFullName = "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "System";
    public static final String className = "System.Net.ServicePoint";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ServicePoint(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static ServicePoint castFrom(IJCOBridgeReflected from) throws Throwable {
        return new ServicePoint(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public void SetTcpKeepAlive(boolean enabled, int keepAliveTime, int keepAliveInterval) throws Throwable, system.ArgumentOutOfRangeException {
        try {
            classInstance.Invoke("SetTcpKeepAlive", enabled, keepAliveTime, keepAliveInterval);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CloseConnectionGroup(java.lang.String connectionGroupName) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.configuration.ConfigurationException, system.configuration.ConfigurationErrorsException, system.OverflowException, system.MulticastNotSupportedException, system.InvalidOperationException, system.OutOfMemoryException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.net.sockets.SocketException, system.IndexOutOfRangeException, system.FormatException, system.net.networkinformation.NetworkInformationException, system.threading.WaitHandleCannotBeOpenedException {
        try {
            return (boolean)classInstance.Invoke("CloseConnectionGroup", (Object)connectionGroupName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public BindIPEndPoint getBindIPEndPointDelegate() throws Throwable {
        try {
            return (BindIPEndPoint)classInstance.Get("BindIPEndPointDelegate");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBindIPEndPointDelegate(BindIPEndPoint BindIPEndPointDelegate) throws Throwable {
        try {
            classInstance.Set("BindIPEndPointDelegate", BindIPEndPointDelegate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getConnectionLeaseTimeout() throws Throwable {
        try {
            return (int)classInstance.Get("ConnectionLeaseTimeout");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConnectionLeaseTimeout(int ConnectionLeaseTimeout) throws Throwable {
        try {
            classInstance.Set("ConnectionLeaseTimeout", ConnectionLeaseTimeout);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Uri getAddress() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Address");
            return new Uri(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMaxIdleTime() throws Throwable {
        try {
            return (int)classInstance.Get("MaxIdleTime");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaxIdleTime(int MaxIdleTime) throws Throwable {
        try {
            classInstance.Set("MaxIdleTime", MaxIdleTime);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseNagleAlgorithm() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseNagleAlgorithm");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseNagleAlgorithm(boolean UseNagleAlgorithm) throws Throwable {
        try {
            classInstance.Set("UseNagleAlgorithm", UseNagleAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getReceiveBufferSize() throws Throwable {
        try {
            return (int)classInstance.Get("ReceiveBufferSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReceiveBufferSize(int ReceiveBufferSize) throws Throwable {
        try {
            classInstance.Set("ReceiveBufferSize", ReceiveBufferSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getExpect100Continue() throws Throwable {
        try {
            return (boolean)classInstance.Get("Expect100Continue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExpect100Continue(boolean Expect100Continue) throws Throwable {
        try {
            classInstance.Set("Expect100Continue", Expect100Continue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DateTime getIdleSince() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("IdleSince");
            return new DateTime(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Version getProtocolVersion() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ProtocolVersion");
            return new Version(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getConnectionName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ConnectionName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getConnectionLimit() throws Throwable {
        try {
            return (int)classInstance.Get("ConnectionLimit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConnectionLimit(int ConnectionLimit) throws Throwable {
        try {
            classInstance.Set("ConnectionLimit", ConnectionLimit);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getCurrentConnections() throws Throwable {
        try {
            return (int)classInstance.Get("CurrentConnections");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public X509Certificate getCertificate() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Certificate");
            return new X509Certificate(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public X509Certificate getClientCertificate() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ClientCertificate");
            return new X509Certificate(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSupportsPipelining() throws Throwable {
        try {
            return (boolean)classInstance.Get("SupportsPipelining");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}