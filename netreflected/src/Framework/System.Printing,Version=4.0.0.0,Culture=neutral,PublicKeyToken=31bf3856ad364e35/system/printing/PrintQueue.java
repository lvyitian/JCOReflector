/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.printing;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.printing.PrintServer;
import system.printing.PrintQueueIndexedProperty;
import system.printing.PrintSystemDesiredAccess;
import system.windows.xps.XpsDocumentWriter;
import system.printing.PrintQueue;
import system.printing.PrintCapabilities;
import system.printing.PrintTicket;
import system.io.MemoryStream;
import system.printing.ValidationResult;
import system.printing.PrintTicketScope;
import system.printing.PrintSystemJobInfo;
import system.printing.PrintJobInfoCollection;
import system.printing.PrintQueueAttributes;
import system.printing.PrintQueueStatus;
import system.printing.PrintProcessor;
import system.printing.PrintPort;
import system.printing.PrintDriver;
import system.printing.PrintJobSettings;
import system.printing.PrintSystemObject;
import system.printing.indexedproperties.PrintPropertyDictionary;


/**
 * The base .NET class managing System.Printing.PrintQueue, System.Printing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35. Extends {@link NetObject}.
 */
public class PrintQueue extends NetObject  {
    public static final String assemblyFullName = "System.Printing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
	public static final String assemblyShortName = "System.Printing";
    public static final String className = "System.Printing.PrintQueue";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintQueue(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static PrintQueue castFrom(IJCOBridgeReflected from) throws Throwable {
        return new PrintQueue(from.getJCOInstance());
    }

    // Constructors section
    
    
    public PrintQueue(PrintServer printServer, java.lang.String printQueueName, PrintQueueIndexedProperty[] propertyFilter, PrintSystemDesiredAccess desiredAccess) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.NotImplementedException, system.MemberAccessException, system.reflection.TargetException, system.reflection.TargetParameterCountException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.resources.MissingManifestResourceException, system.NullReferenceException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)printServer.getJCOInstance(), (Object)printQueueName, (Object)toObjectFromArray(propertyFilter), (Object)desiredAccess.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintQueue(PrintServer printServer, java.lang.String printQueueName, java.lang.String[] propertyFilter, PrintSystemDesiredAccess desiredAccess) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.NotImplementedException, system.MemberAccessException, system.reflection.TargetException, system.reflection.TargetParameterCountException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.resources.MissingManifestResourceException, system.NullReferenceException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)printServer.getJCOInstance(), (Object)printQueueName, (Object)propertyFilter, (Object)desiredAccess.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintQueue(PrintServer printServer, java.lang.String printQueueName, int printSchemaVersion, PrintSystemDesiredAccess desiredAccess) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.NotImplementedException, system.MemberAccessException, system.reflection.TargetException, system.reflection.TargetParameterCountException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.resources.MissingManifestResourceException, system.NullReferenceException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)printServer.getJCOInstance(), (Object)printQueueName, printSchemaVersion, (Object)desiredAccess.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintQueue(PrintServer printServer, java.lang.String printQueueName, PrintSystemDesiredAccess desiredAccess) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.NotImplementedException, system.MemberAccessException, system.reflection.TargetException, system.reflection.TargetParameterCountException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.resources.MissingManifestResourceException, system.NullReferenceException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)printServer.getJCOInstance(), (Object)printQueueName, (Object)desiredAccess.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintQueue(PrintServer printServer, java.lang.String printQueueName, PrintQueueIndexedProperty[] propertyFilter) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.NotImplementedException, system.MemberAccessException, system.reflection.TargetException, system.reflection.TargetParameterCountException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.componentmodel.Win32Exception, system.resources.MissingManifestResourceException, system.NullReferenceException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)printServer.getJCOInstance(), (Object)printQueueName, (Object)toObjectFromArray(propertyFilter));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintQueue(PrintServer printServer, java.lang.String printQueueName, java.lang.String[] propertyFilter) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.NotImplementedException, system.MemberAccessException, system.reflection.TargetException, system.reflection.TargetParameterCountException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.componentmodel.Win32Exception, system.resources.MissingManifestResourceException, system.NullReferenceException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)printServer.getJCOInstance(), (Object)printQueueName, (Object)propertyFilter);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintQueue(PrintServer printServer, java.lang.String printQueueName, int printSchemaVersion) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.NotImplementedException, system.MemberAccessException, system.reflection.TargetException, system.reflection.TargetParameterCountException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.componentmodel.Win32Exception, system.resources.MissingManifestResourceException, system.NullReferenceException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)printServer.getJCOInstance(), (Object)printQueueName, printSchemaVersion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintQueue(PrintServer printServer, java.lang.String printQueueName) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.NotImplementedException, system.MemberAccessException, system.reflection.TargetException, system.reflection.TargetParameterCountException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.componentmodel.Win32Exception, system.resources.MissingManifestResourceException, system.NullReferenceException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)printServer.getJCOInstance(), (Object)printQueueName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public static XpsDocumentWriter CreateXpsDocumentWriter(PrintQueue printQueue) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException {
        try {
            JCObject objCreateXpsDocumentWriter = (JCObject)classType.Invoke("CreateXpsDocumentWriter", (Object)printQueue.getJCOInstance());
            return new XpsDocumentWriter(objCreateXpsDocumentWriter);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintCapabilities GetPrintCapabilities() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException, system.AccessViolationException, system.OutOfMemoryException, system.ObjectDisposedException, system.OverflowException, system.FormatException, system.xml.XmlException {
        try {
            JCObject objGetPrintCapabilities = (JCObject)classInstance.Invoke("GetPrintCapabilities");
            return new PrintCapabilities(objGetPrintCapabilities);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintCapabilities GetPrintCapabilities(PrintTicket printTicket) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException, system.AccessViolationException, system.OutOfMemoryException, system.ObjectDisposedException, system.OverflowException, system.FormatException, system.xml.XmlException {
        try {
            JCObject objGetPrintCapabilities = (JCObject)classInstance.Invoke("GetPrintCapabilities", (Object)printTicket.getJCOInstance());
            return new PrintCapabilities(objGetPrintCapabilities);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MemoryStream GetPrintCapabilitiesAsXml() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException, system.AccessViolationException, system.OutOfMemoryException, system.ObjectDisposedException {
        try {
            JCObject objGetPrintCapabilitiesAsXml = (JCObject)classInstance.Invoke("GetPrintCapabilitiesAsXml");
            return new MemoryStream(objGetPrintCapabilitiesAsXml);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public MemoryStream GetPrintCapabilitiesAsXml(PrintTicket printTicket) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException, system.AccessViolationException, system.OutOfMemoryException, system.ObjectDisposedException {
        try {
            JCObject objGetPrintCapabilitiesAsXml = (JCObject)classInstance.Invoke("GetPrintCapabilitiesAsXml", (Object)printTicket.getJCOInstance());
            return new MemoryStream(objGetPrintCapabilitiesAsXml);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ValidationResult MergeAndValidatePrintTicket(PrintTicket basePrintTicket, PrintTicket deltaPrintTicket, PrintTicketScope scope) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException, system.AccessViolationException, system.OutOfMemoryException, system.ObjectDisposedException {
        try {
            JCObject objMergeAndValidatePrintTicket = (JCObject)classInstance.Invoke("MergeAndValidatePrintTicket", (Object)basePrintTicket.getJCOInstance(), (Object)deltaPrintTicket.getJCOInstance(), (Object)scope.getJCOInstance());
            return new ValidationResult(objMergeAndValidatePrintTicket);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ValidationResult MergeAndValidatePrintTicket(PrintTicket basePrintTicket, PrintTicket deltaPrintTicket) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException, system.AccessViolationException, system.OutOfMemoryException, system.ObjectDisposedException {
        try {
            JCObject objMergeAndValidatePrintTicket = (JCObject)classInstance.Invoke("MergeAndValidatePrintTicket", (Object)basePrintTicket.getJCOInstance(), (Object)deltaPrintTicket.getJCOInstance());
            return new ValidationResult(objMergeAndValidatePrintTicket);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Pause() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("Pause");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Resume() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("Resume");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintSystemJobInfo AddJob(java.lang.String jobName, java.lang.String documentPath, boolean fastCopy, PrintTicket printTicket) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.NotImplementedException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.IndexOutOfRangeException, system.NullReferenceException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException, system.AccessViolationException, system.OutOfMemoryException, system.xml.XmlException, system.FormatException, system.reflection.TargetParameterCountException, system.io.PathTooLongException, system.io.IOException, system.io.EndOfStreamException, system.threading.SemaphoreFullException, system.io.FileFormatException, system.UnauthorizedAccessException, system.collections.generic.KeyNotFoundException, system.windows.xps.XpsPackagingException, system.io.InvalidDataException, system.windows.xps.XpsWriterException, system.printing.PrintingCanceledException {
        try {
            JCObject objAddJob = (JCObject)classInstance.Invoke("AddJob", (Object)jobName, (Object)documentPath, fastCopy, (Object)printTicket.getJCOInstance());
            return new PrintSystemJobInfo(objAddJob);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintSystemJobInfo AddJob(java.lang.String jobName, java.lang.String documentPath, boolean fastCopy) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.IndexOutOfRangeException, system.NullReferenceException, system.OutOfMemoryException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException, system.AccessViolationException, system.xml.XmlException, system.FormatException, system.reflection.TargetParameterCountException, system.io.PathTooLongException, system.io.IOException, system.io.EndOfStreamException, system.threading.SemaphoreFullException, system.io.FileFormatException, system.UnauthorizedAccessException, system.collections.generic.KeyNotFoundException, system.windows.xps.XpsPackagingException, system.io.InvalidDataException, system.windows.xps.XpsWriterException, system.printing.PrintingCanceledException {
        try {
            JCObject objAddJob = (JCObject)classInstance.Invoke("AddJob", (Object)jobName, (Object)documentPath, fastCopy);
            return new PrintSystemJobInfo(objAddJob);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintSystemJobInfo AddJob(java.lang.String jobName, PrintTicket printTicket) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.NotImplementedException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.IndexOutOfRangeException, system.NullReferenceException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException, system.AccessViolationException, system.OutOfMemoryException, system.xml.XmlException, system.FormatException, system.reflection.TargetParameterCountException {
        try {
            JCObject objAddJob = (JCObject)classInstance.Invoke("AddJob", (Object)jobName, (Object)printTicket.getJCOInstance());
            return new PrintSystemJobInfo(objAddJob);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintSystemJobInfo AddJob(java.lang.String jobName) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.NotImplementedException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.IndexOutOfRangeException, system.NullReferenceException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException, system.AccessViolationException, system.OutOfMemoryException, system.xml.XmlException, system.FormatException, system.reflection.TargetParameterCountException {
        try {
            JCObject objAddJob = (JCObject)classInstance.Invoke("AddJob", (Object)jobName);
            return new PrintSystemJobInfo(objAddJob);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintSystemJobInfo AddJob() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.NotImplementedException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.IndexOutOfRangeException, system.NullReferenceException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException, system.AccessViolationException, system.OutOfMemoryException, system.xml.XmlException, system.FormatException {
        try {
            JCObject objAddJob = (JCObject)classInstance.Invoke("AddJob");
            return new PrintSystemJobInfo(objAddJob);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintSystemJobInfo GetJob(int jobId) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.reflection.TargetParameterCountException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.NotImplementedException, system.globalization.CultureNotFoundException {
        try {
            JCObject objGetJob = (JCObject)classInstance.Invoke("GetJob", jobId);
            return new PrintSystemJobInfo(objGetJob);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintJobInfoCollection GetPrintJobInfoCollection() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.IndexOutOfRangeException, system.NullReferenceException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.OutOfMemoryException {
        try {
            JCObject objGetPrintJobInfoCollection = (JCObject)classInstance.Invoke("GetPrintJobInfoCollection");
            return new PrintJobInfoCollection(objGetPrintJobInfoCollection);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Purge() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("Purge");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Commit() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.IndexOutOfRangeException, system.NullReferenceException, system.OutOfMemoryException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.printing.PrintingNotSupportedException, system.printing.PrintQueueException, system.AccessViolationException, system.printing.PrintCommitAttributesException {
        try {
            classInstance.Invoke("Commit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Refresh() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.IndexOutOfRangeException, system.NullReferenceException, system.OutOfMemoryException, system.NotImplementedException, system.globalization.CultureNotFoundException {
        try {
            classInstance.Invoke("Refresh");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Dispose() throws Throwable, system.ArgumentNullException {
        try {
            classInstance.Invoke("Dispose");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public boolean getInPartialTrust() throws Throwable {
        try {
            return (boolean)classInstance.Get("InPartialTrust");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInPartialTrust(boolean InPartialTrust) throws Throwable {
        try {
            classInstance.Set("InPartialTrust", InPartialTrust);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getClientPrintSchemaVersion() throws Throwable {
        try {
            return (int)classInstance.Get("ClientPrintSchemaVersion");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsXpsDevice() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsXpsDevice");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIsXpsDevice(boolean IsXpsDevice) throws Throwable {
        try {
            classInstance.Set("IsXpsDevice", IsXpsDevice);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsPublished() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsPublished");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsRawOnlyEnabled() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsRawOnlyEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsBidiEnabled() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsBidiEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getScheduleCompletedJobsFirst() throws Throwable {
        try {
            return (boolean)classInstance.Get("ScheduleCompletedJobsFirst");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getKeepPrintedJobs() throws Throwable {
        try {
            return (boolean)classInstance.Get("KeepPrintedJobs");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsDevQueryEnabled() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsDevQueryEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsHidden() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsHidden");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsShared() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsShared");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsDirect() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsDirect");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsQueued() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsQueued");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsPowerSaveOn() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsPowerSaveOn");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsServerUnknown() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsServerUnknown");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsDoorOpened() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsDoorOpened");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsOutOfMemory() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsOutOfMemory");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getNeedUserIntervention() throws Throwable {
        try {
            return (boolean)classInstance.Get("NeedUserIntervention");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getPagePunt() throws Throwable {
        try {
            return (boolean)classInstance.Get("PagePunt");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getHasToner() throws Throwable {
        try {
            return (boolean)classInstance.Get("HasToner");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsTonerLow() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsTonerLow");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsWarmingUp() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsWarmingUp");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsInitializing() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsInitializing");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsProcessing() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsProcessing");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsWaiting() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsWaiting");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsNotAvailable() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsNotAvailable");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsOutputBinFull() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsOutputBinFull");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsPrinting() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsPrinting");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsBusy() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsBusy");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsIOActive() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsIOActive");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsOffline() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsOffline");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getHasPaperProblem() throws Throwable {
        try {
            return (boolean)classInstance.Get("HasPaperProblem");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsManualFeedRequired() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsManualFeedRequired");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsOutOfPaper() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsOutOfPaper");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsPaperJammed() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsPaperJammed");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsPendingDeletion() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsPendingDeletion");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsInError() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsInError");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsPaused() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsPaused");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintQueueAttributes getQueueAttributes() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("QueueAttributes");
            return new PrintQueueAttributes(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintQueueStatus getQueueStatus() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("QueueStatus");
            return new PrintQueueStatus(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getFullName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("FullName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintServer getHostingPrintServer() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("HostingPrintServer");
            return new PrintServer(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHostingPrintServer(PrintServer HostingPrintServer) throws Throwable {
        try {
            classInstance.Set("HostingPrintServer", (Object)HostingPrintServer.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintProcessor getQueuePrintProcessor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("QueuePrintProcessor");
            return new PrintProcessor(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setQueuePrintProcessor(PrintProcessor QueuePrintProcessor) throws Throwable {
        try {
            classInstance.Set("QueuePrintProcessor", (Object)QueuePrintProcessor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintPort getQueuePort() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("QueuePort");
            return new PrintPort(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setQueuePort(PrintPort QueuePort) throws Throwable {
        try {
            classInstance.Set("QueuePort", (Object)QueuePort.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintDriver getQueueDriver() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("QueueDriver");
            return new PrintDriver(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setQueueDriver(PrintDriver QueueDriver) throws Throwable {
        try {
            classInstance.Set("QueueDriver", (Object)QueueDriver.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintTicket getDefaultPrintTicket() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DefaultPrintTicket");
            return new PrintTicket(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDefaultPrintTicket(PrintTicket DefaultPrintTicket) throws Throwable {
        try {
            classInstance.Set("DefaultPrintTicket", (Object)DefaultPrintTicket.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintTicket getUserPrintTicket() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("UserPrintTicket");
            return new PrintTicket(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUserPrintTicket(PrintTicket UserPrintTicket) throws Throwable {
        try {
            classInstance.Set("UserPrintTicket", (Object)UserPrintTicket.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSeparatorFile() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("SeparatorFile");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSeparatorFile(java.lang.String SeparatorFile) throws Throwable {
        try {
            classInstance.Set("SeparatorFile", (Object)SeparatorFile);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDescription() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Description");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDescription(java.lang.String Description) throws Throwable {
        try {
            classInstance.Set("Description", (Object)Description);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getLocation() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Location");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLocation(java.lang.String Location) throws Throwable {
        try {
            classInstance.Set("Location", (Object)Location);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getComment() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Comment");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setComment(java.lang.String Comment) throws Throwable {
        try {
            classInstance.Set("Comment", (Object)Comment);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getShareName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ShareName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setShareName(java.lang.String ShareName) throws Throwable {
        try {
            classInstance.Set("ShareName", (Object)ShareName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getNumberOfJobs() throws Throwable {
        try {
            return (int)classInstance.Get("NumberOfJobs");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setNumberOfJobs(int NumberOfJobs) throws Throwable {
        try {
            classInstance.Set("NumberOfJobs", NumberOfJobs);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getAveragePagesPerMinute() throws Throwable {
        try {
            return (int)classInstance.Get("AveragePagesPerMinute");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getUntilTimeOfDay() throws Throwable {
        try {
            return (int)classInstance.Get("UntilTimeOfDay");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUntilTimeOfDay(int UntilTimeOfDay) throws Throwable {
        try {
            classInstance.Set("UntilTimeOfDay", UntilTimeOfDay);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getStartTimeOfDay() throws Throwable {
        try {
            return (int)classInstance.Get("StartTimeOfDay");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStartTimeOfDay(int StartTimeOfDay) throws Throwable {
        try {
            classInstance.Set("StartTimeOfDay", StartTimeOfDay);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getDefaultPriority() throws Throwable {
        try {
            return (int)classInstance.Get("DefaultPriority");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDefaultPriority(int DefaultPriority) throws Throwable {
        try {
            classInstance.Set("DefaultPriority", DefaultPriority);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Name");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setName(java.lang.String Name) throws Throwable {
        try {
            classInstance.Set("Name", (Object)Name);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getPriority() throws Throwable {
        try {
            return (int)classInstance.Get("Priority");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPriority(int Priority) throws Throwable {
        try {
            classInstance.Set("Priority", Priority);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintJobSettings getCurrentJobSettings() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CurrentJobSettings");
            return new PrintJobSettings(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getPrintingIsCancelled() throws Throwable {
        try {
            return (boolean)classInstance.Get("PrintingIsCancelled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPrintingIsCancelled(boolean PrintingIsCancelled) throws Throwable {
        try {
            classInstance.Set("PrintingIsCancelled", PrintingIsCancelled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintSystemObject getParent() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Parent");
            return new PrintSystemObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintPropertyDictionary getPropertiesCollection() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PropertiesCollection");
            return new PrintPropertyDictionary(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPropertiesCollection(PrintPropertyDictionary PropertiesCollection) throws Throwable {
        try {
            classInstance.Set("PropertiesCollection", (Object)PropertiesCollection.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int getMaxPrintSchemaVersion() throws Throwable {
        try {
            return (int)classType.Get("MaxPrintSchemaVersion");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}