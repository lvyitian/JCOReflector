/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.web.configuration;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.TimeSpan;
import system.web.configuration.CompilerCollection;
import system.web.configuration.AssemblyCollection;
import system.web.configuration.BuildProviderCollection;
import system.web.configuration.FolderLevelBuildProviderCollection;
import system.web.configuration.ExpressionBuilderCollection;
import system.web.configuration.CodeSubDirectoriesCollection;
import system.web.configuration.ProfileGuidedOptimizationsFlags;
import system.configuration.SectionInformation;
import system.configuration.ConfigurationLockCollection;
import system.configuration.ElementInformation;
import system.configuration.Configuration;


/**
 * The base .NET class managing System.Web.Configuration.CompilationSection, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class CompilationSection extends NetObject  {
    public static final String assemblyFullName = "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Web";
    public static final String className = "System.Web.Configuration.CompilationSection";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CompilationSection(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static CompilationSection castFrom(IJCOBridgeReflected from) throws Throwable {
        return new CompilationSection(from.getJCOInstance());
    }

    // Constructors section
    
    
    public CompilationSection() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.collections.generic.KeyNotFoundException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public boolean IsReadOnly() throws Throwable {
        try {
            return (boolean)classInstance.Invoke("IsReadOnly");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public java.lang.String getTempDirectory() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TempDirectory");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTempDirectory(java.lang.String TempDirectory) throws Throwable {
        try {
            classInstance.Set("TempDirectory", (Object)TempDirectory);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getDebug() throws Throwable {
        try {
            return (boolean)classInstance.Get("Debug");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDebug(boolean Debug) throws Throwable {
        try {
            classInstance.Set("Debug", Debug);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getStrict() throws Throwable {
        try {
            return (boolean)classInstance.Get("Strict");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStrict(boolean Strict) throws Throwable {
        try {
            classInstance.Set("Strict", Strict);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getExplicit() throws Throwable {
        try {
            return (boolean)classInstance.Get("Explicit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExplicit(boolean Explicit) throws Throwable {
        try {
            classInstance.Set("Explicit", Explicit);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getBatch() throws Throwable {
        try {
            return (boolean)classInstance.Get("Batch");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBatch(boolean Batch) throws Throwable {
        try {
            classInstance.Set("Batch", Batch);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getOptimizeCompilations() throws Throwable {
        try {
            return (boolean)classInstance.Get("OptimizeCompilations");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setOptimizeCompilations(boolean OptimizeCompilations) throws Throwable {
        try {
            classInstance.Set("OptimizeCompilations", OptimizeCompilations);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUrlLinePragmas() throws Throwable {
        try {
            return (boolean)classInstance.Get("UrlLinePragmas");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUrlLinePragmas(boolean UrlLinePragmas) throws Throwable {
        try {
            classInstance.Set("UrlLinePragmas", UrlLinePragmas);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getBatchTimeout() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("BatchTimeout");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBatchTimeout(TimeSpan BatchTimeout) throws Throwable {
        try {
            classInstance.Set("BatchTimeout", (Object)BatchTimeout.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMaxBatchSize() throws Throwable {
        try {
            return (int)classInstance.Get("MaxBatchSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaxBatchSize(int MaxBatchSize) throws Throwable {
        try {
            classInstance.Set("MaxBatchSize", MaxBatchSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMaxBatchGeneratedFileSize() throws Throwable {
        try {
            return (int)classInstance.Get("MaxBatchGeneratedFileSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaxBatchGeneratedFileSize(int MaxBatchGeneratedFileSize) throws Throwable {
        try {
            classInstance.Set("MaxBatchGeneratedFileSize", MaxBatchGeneratedFileSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getNumRecompilesBeforeAppRestart() throws Throwable {
        try {
            return (int)classInstance.Get("NumRecompilesBeforeAppRestart");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setNumRecompilesBeforeAppRestart(int NumRecompilesBeforeAppRestart) throws Throwable {
        try {
            classInstance.Set("NumRecompilesBeforeAppRestart", NumRecompilesBeforeAppRestart);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDefaultLanguage() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("DefaultLanguage");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDefaultLanguage(java.lang.String DefaultLanguage) throws Throwable {
        try {
            classInstance.Set("DefaultLanguage", (Object)DefaultLanguage);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTargetFramework() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TargetFramework");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTargetFramework(java.lang.String TargetFramework) throws Throwable {
        try {
            classInstance.Set("TargetFramework", (Object)TargetFramework);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CompilerCollection getCompilers() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Compilers");
            return new CompilerCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AssemblyCollection getAssemblies() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Assemblies");
            return new AssemblyCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BuildProviderCollection getBuildProviders() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("BuildProviders");
            return new BuildProviderCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public FolderLevelBuildProviderCollection getFolderLevelBuildProviders() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("FolderLevelBuildProviders");
            return new FolderLevelBuildProviderCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ExpressionBuilderCollection getExpressionBuilders() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ExpressionBuilders");
            return new ExpressionBuilderCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getAssemblyPostProcessorType() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("AssemblyPostProcessorType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAssemblyPostProcessorType(java.lang.String AssemblyPostProcessorType) throws Throwable {
        try {
            classInstance.Set("AssemblyPostProcessorType", (Object)AssemblyPostProcessorType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CodeSubDirectoriesCollection getCodeSubDirectories() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CodeSubDirectories");
            return new CodeSubDirectoriesCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnablePrefetchOptimization() throws Throwable {
        try {
            return (boolean)classInstance.Get("EnablePrefetchOptimization");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnablePrefetchOptimization(boolean EnablePrefetchOptimization) throws Throwable {
        try {
            classInstance.Set("EnablePrefetchOptimization", EnablePrefetchOptimization);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ProfileGuidedOptimizationsFlags getProfileGuidedOptimizations() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ProfileGuidedOptimizations");
            return new ProfileGuidedOptimizationsFlags(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setProfileGuidedOptimizations(ProfileGuidedOptimizationsFlags ProfileGuidedOptimizations) throws Throwable {
        try {
            classInstance.Set("ProfileGuidedOptimizations", (Object)ProfileGuidedOptimizations.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getControlBuilderInterceptorType() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ControlBuilderInterceptorType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setControlBuilderInterceptorType(java.lang.String ControlBuilderInterceptorType) throws Throwable {
        try {
            classInstance.Set("ControlBuilderInterceptorType", (Object)ControlBuilderInterceptorType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getDisableObsoleteWarnings() throws Throwable {
        try {
            return (boolean)classInstance.Get("DisableObsoleteWarnings");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDisableObsoleteWarnings(boolean DisableObsoleteWarnings) throws Throwable {
        try {
            classInstance.Set("DisableObsoleteWarnings", DisableObsoleteWarnings);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMaxConcurrentCompilations() throws Throwable {
        try {
            return (int)classInstance.Get("MaxConcurrentCompilations");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaxConcurrentCompilations(int MaxConcurrentCompilations) throws Throwable {
        try {
            classInstance.Set("MaxConcurrentCompilations", MaxConcurrentCompilations);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SectionInformation getSectionInformation() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SectionInformation");
            return new SectionInformation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConfigurationLockCollection getLockAttributes() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LockAttributes");
            return new ConfigurationLockCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConfigurationLockCollection getLockAllAttributesExcept() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LockAllAttributesExcept");
            return new ConfigurationLockCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConfigurationLockCollection getLockElements() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LockElements");
            return new ConfigurationLockCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConfigurationLockCollection getLockAllElementsExcept() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LockAllElementsExcept");
            return new ConfigurationLockCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getLockItem() throws Throwable {
        try {
            return (boolean)classInstance.Get("LockItem");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLockItem(boolean LockItem) throws Throwable {
        try {
            classInstance.Set("LockItem", LockItem);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ElementInformation getElementInformation() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ElementInformation");
            return new ElementInformation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Configuration getCurrentConfiguration() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CurrentConfiguration");
            return new Configuration(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}