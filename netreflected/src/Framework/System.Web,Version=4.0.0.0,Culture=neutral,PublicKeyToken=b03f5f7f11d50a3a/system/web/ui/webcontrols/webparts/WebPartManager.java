/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.web.ui.webcontrols.webparts;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.web.ui.webcontrols.webparts.WebPart;
import system.web.ui.webcontrols.webparts.WebPartZoneBase;
import system.web.ui.webcontrols.webparts.ProviderConnectionPoint;
import system.web.ui.webcontrols.webparts.ConsumerConnectionPoint;
import system.web.ui.webcontrols.webparts.WebPartTransformer;
import system.web.ui.webcontrols.webparts.WebPartConnection;
import system.web.ui.webcontrols.webparts.GenericWebPart;
import system.web.ui.Control;
import system.web.ui.webcontrols.webparts.ConsumerConnectionPointCollection;
import system.web.ui.webcontrols.webparts.WebPartManager;
import system.web.ui.Page;
import system.web.ui.webcontrols.webparts.ProviderConnectionPointCollection;
import system.xml.XmlWriter;
import system.xml.XmlReader;
import system.web.routing.RouteValueDictionary;
import system.web.ui.HtmlTextWriter;
import system.web.ui.RenderMethod;
import system.web.ui.webcontrols.webparts.TransformerTypeCollection;
import system.web.ui.webcontrols.webparts.WebPartConnectionCollection;
import system.web.ui.ControlCollection;
import system.web.ui.webcontrols.webparts.WebPartDisplayMode;
import system.web.ui.webcontrols.webparts.WebPartDisplayModeCollection;
import system.web.ui.webcontrols.webparts.WebPartPersonalization;
import system.web.ui.webcontrols.webparts.WebPartCollection;
import system.web.ui.webcontrols.webparts.WebPartZoneCollection;
import system.web.ui.ClientIDMode;
import system.web.ui.ViewStateMode;
import system.Version;
import system.web.ui.TemplateControl;
import system.web.ui.ValidateRequestMode;
import system.web.ui.webcontrols.webparts.WebPartAuthorizationEventHandler;
import system.EventHandler;
import system.web.ui.webcontrols.webparts.WebPartDisplayModeEventHandler;
import system.web.ui.webcontrols.webparts.WebPartDisplayModeCancelEventHandler;
import system.web.ui.webcontrols.webparts.WebPartEventHandler;
import system.web.ui.webcontrols.webparts.WebPartCancelEventHandler;
import system.web.ui.webcontrols.webparts.WebPartAddingEventHandler;
import system.web.ui.webcontrols.webparts.WebPartMovingEventHandler;
import system.web.ui.webcontrols.webparts.WebPartConnectionsEventHandler;
import system.web.ui.webcontrols.webparts.WebPartConnectionsCancelEventHandler;


/**
 * The base .NET class managing System.Web.UI.WebControls.WebParts.WebPartManager, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class WebPartManager extends NetObject  {
    public static final String assemblyFullName = "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Web";
    public static final String className = "System.Web.UI.WebControls.WebParts.WebPartManager";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebPartManager(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static WebPartManager castFrom(IJCOBridgeReflected from) throws Throwable {
        return new WebPartManager(from.getJCOInstance());
    }

    // Constructors section
    
    
    public WebPartManager() throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public WebPart AddWebPart(WebPart webPart, WebPartZoneBase zone, int zoneIndex) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.RankException, system.IndexOutOfRangeException, system.web.HttpException, system.OverflowException, system.FormatException, system.reflection.AmbiguousMatchException {
        try {
            JCObject objAddWebPart = (JCObject)classInstance.Invoke("AddWebPart", (Object)webPart.getJCOInstance(), (Object)zone.getJCOInstance(), zoneIndex);
            return new WebPart(objAddWebPart);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BeginWebPartConnecting(WebPart webPart) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("BeginWebPartConnecting", (Object)webPart.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BeginWebPartEditing(WebPart webPart) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("BeginWebPartEditing", (Object)webPart.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanConnectWebParts(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.NotSupportedException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException {
        try {
            return (boolean)classInstance.Invoke("CanConnectWebParts", (Object)provider.getJCOInstance(), (Object)providerConnectionPoint.getJCOInstance(), (Object)consumer.getJCOInstance(), (Object)consumerConnectionPoint.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanConnectWebParts(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint, WebPartTransformer transformer) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.NotSupportedException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.web.HttpException {
        try {
            return (boolean)classInstance.Invoke("CanConnectWebParts", (Object)provider.getJCOInstance(), (Object)providerConnectionPoint.getJCOInstance(), (Object)consumer.getJCOInstance(), (Object)consumerConnectionPoint.getJCOInstance(), (Object)transformer.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void CloseWebPart(WebPart webPart) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.NotSupportedException, system.RankException, system.web.HttpException {
        try {
            classInstance.Invoke("CloseWebPart", (Object)webPart.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebPartConnection ConnectWebParts(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.NotSupportedException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.OverflowException {
        try {
            JCObject objConnectWebParts = (JCObject)classInstance.Invoke("ConnectWebParts", (Object)provider.getJCOInstance(), (Object)providerConnectionPoint.getJCOInstance(), (Object)consumer.getJCOInstance(), (Object)consumerConnectionPoint.getJCOInstance());
            return new WebPartConnection(objConnectWebParts);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebPartConnection ConnectWebParts(WebPart provider, ProviderConnectionPoint providerConnectionPoint, WebPart consumer, ConsumerConnectionPoint consumerConnectionPoint, WebPartTransformer transformer) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.NotSupportedException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.web.HttpException, system.OverflowException {
        try {
            JCObject objConnectWebParts = (JCObject)classInstance.Invoke("ConnectWebParts", (Object)provider.getJCOInstance(), (Object)providerConnectionPoint.getJCOInstance(), (Object)consumer.getJCOInstance(), (Object)consumerConnectionPoint.getJCOInstance(), (Object)transformer.getJCOInstance());
            return new WebPartConnection(objConnectWebParts);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public GenericWebPart CreateWebPart(Control control) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.FormatException, system.InvalidCastException, system.NotSupportedException, system.NullReferenceException, system.web.HttpException {
        try {
            JCObject objCreateWebPart = (JCObject)classInstance.Invoke("CreateWebPart", (Object)control.getJCOInstance());
            return new GenericWebPart(objCreateWebPart);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DeleteWebPart(WebPart webPart) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.NotSupportedException, system.RankException, system.web.HttpException {
        try {
            classInstance.Invoke("DeleteWebPart", (Object)webPart.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DisconnectWebParts(WebPartConnection connection) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.NotSupportedException {
        try {
            classInstance.Invoke("DisconnectWebParts", (Object)connection.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void EndWebPartConnecting() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("EndWebPartConnecting");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void EndWebPartEditing() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("EndWebPartEditing");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ConsumerConnectionPointCollection GetConsumerConnectionPoints(WebPart webPart) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.NotSupportedException {
        try {
            JCObject objGetConsumerConnectionPoints = (JCObject)classInstance.Invoke("GetConsumerConnectionPoints", (Object)webPart.getJCOInstance());
            return new ConsumerConnectionPointCollection(objGetConsumerConnectionPoints);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static WebPartManager GetCurrentWebPartManager(Page page) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objGetCurrentWebPartManager = (JCObject)classType.Invoke("GetCurrentWebPartManager", (Object)page.getJCOInstance());
            return new WebPartManager(objGetCurrentWebPartManager);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public GenericWebPart GetGenericWebPart(Control control) throws Throwable, system.ArgumentNullException {
        try {
            JCObject objGetGenericWebPart = (JCObject)classInstance.Invoke("GetGenericWebPart", (Object)control.getJCOInstance());
            return new GenericWebPart(objGetGenericWebPart);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ProviderConnectionPointCollection GetProviderConnectionPoints(WebPart webPart) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.NotSupportedException {
        try {
            JCObject objGetProviderConnectionPoints = (JCObject)classInstance.Invoke("GetProviderConnectionPoints", (Object)webPart.getJCOInstance());
            return new ProviderConnectionPointCollection(objGetProviderConnectionPoints);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsAuthorized(WebPart webPart) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.web.HttpException {
        try {
            return (boolean)classInstance.Invoke("IsAuthorized", (Object)webPart.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void MoveWebPart(WebPart webPart, WebPartZoneBase zone, int zoneIndex) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.RankException {
        try {
            classInstance.Invoke("MoveWebPart", (Object)webPart.getJCOInstance(), (Object)zone.getJCOInstance(), zoneIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ExportWebPart(WebPart webPart, XmlWriter writer) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.RankException, system.FormatException, system.reflection.AmbiguousMatchException, system.NullReferenceException, system.TypeLoadException, system.security.SecurityException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("ExportWebPart", (Object)webPart.getJCOInstance(), (Object)writer.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Focus() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException {
        try {
            classInstance.Invoke("Focus");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetExportUrl(WebPart webPart) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.NotSupportedException, system.web.HttpRequestValidationException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            return (java.lang.String)classInstance.Invoke("GetExportUrl", (Object)webPart.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsAuthorized(NetType type, java.lang.String path, java.lang.String authorizationFilter, boolean isShared) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException {
        try {
            return (boolean)classInstance.Invoke("IsAuthorized", (Object)type.getJCOInstance(), (Object)path, (Object)authorizationFilter, isShared);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetRouteUrl(RouteValueDictionary routeParameters) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.web.HttpException, system.threading.LockRecursionException {
        try {
            return (java.lang.String)classInstance.Invoke("GetRouteUrl", (Object)routeParameters.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetRouteUrl(java.lang.String routeName, RouteValueDictionary routeParameters) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.web.HttpException, system.threading.LockRecursionException, system.threading.WaitHandleCannotBeOpenedException, system.IndexOutOfRangeException {
        try {
            return (java.lang.String)classInstance.Invoke("GetRouteUrl", (Object)routeName, (Object)routeParameters.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ApplyStyleSheetSkin(Page page) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("ApplyStyleSheetSkin", (Object)page.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DataBind() throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        try {
            classInstance.Invoke("DataBind");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RenderControl(HtmlTextWriter writer) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.web.HttpException, system.configuration.ConfigurationErrorsException, system.TypeLoadException, system.configuration.provider.ProviderException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.OutOfMemoryException, system.OverflowException, system.FormatException, system.IndexOutOfRangeException, system.PlatformNotSupportedException {
        try {
            classInstance.Invoke("RenderControl", (Object)writer.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Dispose() throws Throwable {
        try {
            classInstance.Invoke("Dispose");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String ResolveUrl(java.lang.String relativeUrl) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.web.HttpException, system.ArgumentException, system.web.HttpRequestValidationException {
        try {
            return (java.lang.String)classInstance.Invoke("ResolveUrl", (Object)relativeUrl);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String ResolveClientUrl(java.lang.String relativeUrl) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.web.HttpException, system.OutOfMemoryException, system.threading.ThreadAbortException, system.web.HttpRequestValidationException, system.configuration.ConfigurationErrorsException, system.security.SecurityException, system.MemberAccessException, system.UriFormatException, system.globalization.CultureNotFoundException, system.NotSupportedException {
        try {
            return (java.lang.String)classInstance.Invoke("ResolveClientUrl", (Object)relativeUrl);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Control FindControl(java.lang.String id) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.web.HttpException, system.ArgumentOutOfRangeException, system.configuration.ConfigurationErrorsException, system.MissingMethodException, system.reflection.TargetInvocationException, system.configuration.provider.ProviderException, system.NullReferenceException {
        try {
            JCObject objFindControl = (JCObject)classInstance.Invoke("FindControl", (Object)id);
            return new Control(objFindControl);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean HasControls() throws Throwable {
        try {
            return (boolean)classInstance.Invoke("HasControls");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetTraceData(NetObject traceDataKey, NetObject traceDataValue) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.InvalidOperationException {
        try {
            classInstance.Invoke("SetTraceData", (Object)traceDataKey.getJCOInstance(), (Object)traceDataValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetTraceData(NetObject tracedObject, NetObject traceDataKey, NetObject traceDataValue) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.InvalidOperationException {
        try {
            classInstance.Invoke("SetTraceData", (Object)tracedObject.getJCOInstance(), (Object)traceDataKey.getJCOInstance(), (Object)traceDataValue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetRouteUrl(NetObject routeParameters) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.NotSupportedException, system.RankException, system.NullReferenceException, system.web.HttpException, system.ObjectDisposedException, system.threading.LockRecursionException, system.NotImplementedException, system.globalization.CultureNotFoundException {
        try {
            return (java.lang.String)classInstance.Invoke("GetRouteUrl", (Object)routeParameters.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetRouteUrl(java.lang.String routeName, NetObject routeParameters) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.NotSupportedException, system.RankException, system.NullReferenceException, system.web.HttpException, system.ObjectDisposedException, system.threading.LockRecursionException, system.NotImplementedException, system.globalization.CultureNotFoundException {
        try {
            return (java.lang.String)classInstance.Invoke("GetRouteUrl", (Object)routeName, (Object)routeParameters.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetUniqueIDRelativeTo(Control control) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.web.HttpException {
        try {
            return (java.lang.String)classInstance.Invoke("GetUniqueIDRelativeTo", (Object)control.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetRenderMethodDelegate(RenderMethod renderMethod) throws Throwable, system.ArgumentNullException {
        try {
            classInstance.Invoke("SetRenderMethodDelegate", renderMethod);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public TransformerTypeCollection getAvailableTransformers() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AvailableTransformers");
            return new TransformerTypeCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getCloseProviderWarning() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("CloseProviderWarning");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCloseProviderWarning(java.lang.String CloseProviderWarning) throws Throwable {
        try {
            classInstance.Set("CloseProviderWarning", (Object)CloseProviderWarning);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebPartConnectionCollection getConnections() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Connections");
            return new WebPartConnectionCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ControlCollection getControls() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Controls");
            return new ControlCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDeleteWarning() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("DeleteWarning");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDeleteWarning(java.lang.String DeleteWarning) throws Throwable {
        try {
            classInstance.Set("DeleteWarning", (Object)DeleteWarning);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebPartDisplayMode getDisplayMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DisplayMode");
            return new WebPartDisplayMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDisplayMode(WebPartDisplayMode DisplayMode) throws Throwable {
        try {
            classInstance.Set("DisplayMode", (Object)DisplayMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebPartDisplayModeCollection getDisplayModes() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DisplayModes");
            return new WebPartDisplayModeCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnableClientScript() throws Throwable {
        try {
            return (boolean)classInstance.Get("EnableClientScript");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnableClientScript(boolean EnableClientScript) throws Throwable {
        try {
            classInstance.Set("EnableClientScript", EnableClientScript);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnableTheming() throws Throwable {
        try {
            return (boolean)classInstance.Get("EnableTheming");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnableTheming(boolean EnableTheming) throws Throwable {
        try {
            classInstance.Set("EnableTheming", EnableTheming);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getExportSensitiveDataWarning() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ExportSensitiveDataWarning");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setExportSensitiveDataWarning(java.lang.String ExportSensitiveDataWarning) throws Throwable {
        try {
            classInstance.Set("ExportSensitiveDataWarning", (Object)ExportSensitiveDataWarning);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebPartPersonalization getPersonalization() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Personalization");
            return new WebPartPersonalization(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebPart getSelectedWebPart() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SelectedWebPart");
            return new WebPart(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSkinID() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("SkinID");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSkinID(java.lang.String SkinID) throws Throwable {
        try {
            classInstance.Set("SkinID", (Object)SkinID);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebPartConnectionCollection getStaticConnections() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("StaticConnections");
            return new WebPartConnectionCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebPartDisplayModeCollection getSupportedDisplayModes() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SupportedDisplayModes");
            return new WebPartDisplayModeCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getVisible() throws Throwable {
        try {
            return (boolean)classInstance.Get("Visible");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setVisible(boolean Visible) throws Throwable {
        try {
            classInstance.Set("Visible", Visible);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebPartCollection getWebParts() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("WebParts");
            return new WebPartCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebPartZoneCollection getZones() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Zones");
            return new WebPartZoneCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ClientIDMode getClientIDMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ClientIDMode");
            return new ClientIDMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setClientIDMode(ClientIDMode ClientIDMode) throws Throwable {
        try {
            classInstance.Set("ClientIDMode", (Object)ClientIDMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getClientID() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ClientID");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getID() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ID");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setID(java.lang.String ID) throws Throwable {
        try {
            classInstance.Set("ID", (Object)ID);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnableViewState() throws Throwable {
        try {
            return (boolean)classInstance.Get("EnableViewState");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnableViewState(boolean EnableViewState) throws Throwable {
        try {
            classInstance.Set("EnableViewState", EnableViewState);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ViewStateMode getViewStateMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ViewStateMode");
            return new ViewStateMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setViewStateMode(ViewStateMode ViewStateMode) throws Throwable {
        try {
            classInstance.Set("ViewStateMode", (Object)ViewStateMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Control getNamingContainer() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("NamingContainer");
            return new Control(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Control getBindingContainer() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("BindingContainer");
            return new Control(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Control getDataItemContainer() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DataItemContainer");
            return new Control(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Control getDataKeysContainer() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DataKeysContainer");
            return new Control(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Page getPage() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Page");
            return new Page(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPage(Page Page) throws Throwable {
        try {
            classInstance.Set("Page", (Object)Page.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Version getRenderingCompatibility() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RenderingCompatibility");
            return new Version(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRenderingCompatibility(Version RenderingCompatibility) throws Throwable {
        try {
            classInstance.Set("RenderingCompatibility", (Object)RenderingCompatibility.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TemplateControl getTemplateControl() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("TemplateControl");
            return new TemplateControl(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTemplateControl(TemplateControl TemplateControl) throws Throwable {
        try {
            classInstance.Set("TemplateControl", (Object)TemplateControl.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Control getParent() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Parent");
            return new Control(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTemplateSourceDirectory() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TemplateSourceDirectory");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getAppRelativeTemplateSourceDirectory() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("AppRelativeTemplateSourceDirectory");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAppRelativeTemplateSourceDirectory(java.lang.String AppRelativeTemplateSourceDirectory) throws Throwable {
        try {
            classInstance.Set("AppRelativeTemplateSourceDirectory", (Object)AppRelativeTemplateSourceDirectory);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getUniqueID() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("UniqueID");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ValidateRequestMode getValidateRequestMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ValidateRequestMode");
            return new ValidateRequestMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setValidateRequestMode(ValidateRequestMode ValidateRequestMode) throws Throwable {
        try {
            classInstance.Set("ValidateRequestMode", (Object)ValidateRequestMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
    public void addAuthorizeWebPart(WebPartAuthorizationEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("AuthorizeWebPart", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeAuthorizeWebPart(WebPartAuthorizationEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("AuthorizeWebPart", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addConnectionsActivated(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ConnectionsActivated", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeConnectionsActivated(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ConnectionsActivated", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addConnectionsActivating(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ConnectionsActivating", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeConnectionsActivating(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ConnectionsActivating", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDisplayModeChanged(WebPartDisplayModeEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DisplayModeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDisplayModeChanged(WebPartDisplayModeEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DisplayModeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDisplayModeChanging(WebPartDisplayModeCancelEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DisplayModeChanging", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDisplayModeChanging(WebPartDisplayModeCancelEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DisplayModeChanging", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addSelectedWebPartChanged(WebPartEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("SelectedWebPartChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeSelectedWebPartChanged(WebPartEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("SelectedWebPartChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addSelectedWebPartChanging(WebPartCancelEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("SelectedWebPartChanging", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeSelectedWebPartChanging(WebPartCancelEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("SelectedWebPartChanging", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addWebPartAdded(WebPartEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("WebPartAdded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeWebPartAdded(WebPartEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("WebPartAdded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addWebPartAdding(WebPartAddingEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("WebPartAdding", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeWebPartAdding(WebPartAddingEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("WebPartAdding", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addWebPartClosed(WebPartEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("WebPartClosed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeWebPartClosed(WebPartEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("WebPartClosed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addWebPartClosing(WebPartCancelEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("WebPartClosing", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeWebPartClosing(WebPartCancelEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("WebPartClosing", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addWebPartDeleted(WebPartEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("WebPartDeleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeWebPartDeleted(WebPartEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("WebPartDeleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addWebPartDeleting(WebPartCancelEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("WebPartDeleting", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeWebPartDeleting(WebPartCancelEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("WebPartDeleting", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addWebPartMoved(WebPartEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("WebPartMoved", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeWebPartMoved(WebPartEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("WebPartMoved", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addWebPartMoving(WebPartMovingEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("WebPartMoving", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeWebPartMoving(WebPartMovingEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("WebPartMoving", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addWebPartsConnected(WebPartConnectionsEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("WebPartsConnected", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeWebPartsConnected(WebPartConnectionsEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("WebPartsConnected", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addWebPartsConnecting(WebPartConnectionsCancelEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("WebPartsConnecting", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeWebPartsConnecting(WebPartConnectionsCancelEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("WebPartsConnecting", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addWebPartsDisconnected(WebPartConnectionsEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("WebPartsDisconnected", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeWebPartsDisconnected(WebPartConnectionsEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("WebPartsDisconnected", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addWebPartsDisconnecting(WebPartConnectionsCancelEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("WebPartsDisconnecting", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeWebPartsDisconnecting(WebPartConnectionsCancelEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("WebPartsDisconnecting", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDataBinding(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DataBinding", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDataBinding(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DataBinding", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addInit(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Init", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeInit(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Init", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addLoad(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Load", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeLoad(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Load", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addPreRender(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("PreRender", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removePreRender(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("PreRender", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addUnload(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Unload", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeUnload(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Unload", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


}