/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.windows.forms;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.windows.forms.DataGridViewAdvancedBorderStyle;
import system.windows.forms.DataGridViewColumn;
import system.componentmodel.ListSortDirection;
import system.windows.forms.DataGridViewAutoSizeColumnMode;
import system.windows.forms.DataGridViewAutoSizeColumnsMode;
import system.windows.forms.DataGridViewAutoSizeRowMode;
import system.windows.forms.DataGridViewRowHeadersWidthSizeMode;
import system.windows.forms.DataGridViewAutoSizeRowsMode;
import system.windows.forms.DataGridViewDataErrorContexts;
import system.windows.forms.DataGridViewElementStates;
import system.drawing.Rectangle;
import system.windows.forms.DataObject;
import system.windows.forms.DataGridViewCell;
import system.drawing.Size;
import system.windows.forms.Control;
import system.drawing.Graphics;
import system.windows.forms.DragDropEffects;
import system.drawing.Bitmap;
import system.windows.forms.Form;
import system.drawing.Point;
import system.windows.forms.GetChildAtPointSkip;
import system.drawing.Region;
import system.windows.forms.PreProcessControlState;
import system.Single;
import system.drawing.SizeF;
import system.windows.forms.BoundsSpecified;
import system.runtime.remoting.ObjRef;
import system.windows.forms.DataGridViewCellStyle;
import system.drawing.Color;
import system.drawing.Image;
import system.windows.forms.ImageLayout;
import system.windows.forms.BorderStyle;
import system.windows.forms.DataGridViewCellBorderStyle;
import system.windows.forms.DataGridViewClipboardCopyMode;
import system.windows.forms.DataGridViewHeaderBorderStyle;
import system.windows.forms.DataGridViewColumnHeadersHeightSizeMode;
import system.windows.forms.DataGridViewColumnCollection;
import system.windows.forms.DataGridViewRow;
import system.windows.forms.DataGridViewEditMode;
import system.windows.forms.Panel;
import system.drawing.Font;
import system.windows.forms.Padding;
import system.windows.forms.DataGridViewRowCollection;
import system.windows.forms.ScrollBars;
import system.windows.forms.DataGridViewSelectedCellCollection;
import system.windows.forms.DataGridViewSelectedColumnCollection;
import system.windows.forms.DataGridViewSelectedRowCollection;
import system.windows.forms.DataGridViewSelectionMode;
import system.windows.forms.SortOrder;
import system.windows.forms.DataGridViewHeaderCell;
import system.windows.forms.Cursor;
import system.windows.forms.AccessibleObject;
import system.windows.forms.AccessibleRole;
import system.windows.forms.AnchorStyles;
import system.windows.forms.layout.LayoutEngine;
import system.windows.forms.BindingContext;
import system.windows.forms.ContextMenu;
import system.windows.forms.ContextMenuStrip;
import system.windows.forms.ControlBindingsCollection;
import system.windows.forms.DockStyle;
import system.windows.forms.RightToLeft;
import system.windows.forms.ImeMode;
import system.EventHandler;
import system.windows.forms.DataGridViewAutoSizeColumnsModeEventHandler;
import system.windows.forms.DataGridViewAutoSizeModeEventHandler;
import system.windows.forms.DataGridViewAutoSizeColumnModeEventHandler;
import system.windows.forms.QuestionEventHandler;
import system.windows.forms.DataGridViewCellCancelEventHandler;
import system.windows.forms.DataGridViewCellEventHandler;
import system.windows.forms.DataGridViewCellContextMenuStripNeededEventHandler;
import system.windows.forms.DataGridViewCellErrorTextNeededEventHandler;
import system.windows.forms.DataGridViewCellFormattingEventHandler;
import system.windows.forms.DataGridViewCellMouseEventHandler;
import system.windows.forms.DataGridViewCellPaintingEventHandler;
import system.windows.forms.DataGridViewCellParsingEventHandler;
import system.windows.forms.DataGridViewCellStateChangedEventHandler;
import system.windows.forms.DataGridViewCellStyleContentChangedEventHandler;
import system.windows.forms.DataGridViewCellToolTipTextNeededEventHandler;
import system.windows.forms.DataGridViewCellValidatingEventHandler;
import system.windows.forms.DataGridViewCellValueEventHandler;
import system.windows.forms.DataGridViewColumnEventHandler;
import system.windows.forms.DataGridViewColumnDividerDoubleClickEventHandler;
import system.windows.forms.DataGridViewColumnStateChangedEventHandler;
import system.windows.forms.DataGridViewBindingCompleteEventHandler;
import system.windows.forms.DataGridViewDataErrorEventHandler;
import system.windows.forms.DataGridViewRowEventHandler;
import system.windows.forms.DataGridViewEditingControlShowingEventHandler;
import system.windows.forms.DataGridViewRowContextMenuStripNeededEventHandler;
import system.windows.forms.DataGridViewRowDividerDoubleClickEventHandler;
import system.windows.forms.DataGridViewRowErrorTextNeededEventHandler;
import system.windows.forms.DataGridViewRowHeightInfoNeededEventHandler;
import system.windows.forms.DataGridViewRowHeightInfoPushedEventHandler;
import system.windows.forms.DataGridViewRowPostPaintEventHandler;
import system.windows.forms.DataGridViewRowPrePaintEventHandler;
import system.windows.forms.DataGridViewRowsAddedEventHandler;
import system.windows.forms.DataGridViewRowsRemovedEventHandler;
import system.windows.forms.DataGridViewRowStateChangedEventHandler;
import system.windows.forms.ScrollEventHandler;
import system.windows.forms.DataGridViewSortCompareEventHandler;
import system.windows.forms.DataGridViewRowCancelEventHandler;
import system.windows.forms.ControlEventHandler;
import system.windows.forms.DragEventHandler;
import system.windows.forms.GiveFeedbackEventHandler;
import system.windows.forms.HelpEventHandler;
import system.windows.forms.InvalidateEventHandler;
import system.windows.forms.PaintEventHandler;
import system.windows.forms.QueryContinueDragEventHandler;
import system.windows.forms.QueryAccessibilityHelpEventHandler;
import system.windows.forms.KeyEventHandler;
import system.windows.forms.KeyPressEventHandler;
import system.windows.forms.LayoutEventHandler;
import system.windows.forms.MouseEventHandler;
import system.windows.forms.PreviewKeyDownEventHandler;
import system.windows.forms.UICuesEventHandler;
import system.componentmodel.CancelEventHandler;


/**
 * The base .NET class managing System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class DataGridView extends NetObject  {
    public static final String assemblyFullName = "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "System.Windows.Forms";
    public static final String className = "System.Windows.Forms.DataGridView";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridView(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static DataGridView castFrom(IJCOBridgeReflected from) throws Throwable {
        return new DataGridView(from.getJCOInstance());
    }

    // Constructors section
    
    
    public DataGridView() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.runtime.interopservices.ExternalException, system.configuration.ConfigurationErrorsException, system.NotSupportedException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.security.SecurityException, system.componentmodel.InvalidEnumArgumentException, system.RankException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.MulticastNotSupportedException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public DataGridViewAdvancedBorderStyle AdjustColumnHeaderBorderStyle(DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, boolean isFirstDisplayedColumn, boolean isLastVisibleColumn) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.RankException, system.componentmodel.InvalidEnumArgumentException {
        try {
            JCObject objAdjustColumnHeaderBorderStyle = (JCObject)classInstance.Invoke("AdjustColumnHeaderBorderStyle", (Object)dataGridViewAdvancedBorderStyleInput.getJCOInstance(), (Object)dataGridViewAdvancedBorderStylePlaceholder.getJCOInstance(), isFirstDisplayedColumn, isLastVisibleColumn);
            return new DataGridViewAdvancedBorderStyle(objAdjustColumnHeaderBorderStyle);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean BeginEdit(boolean selectAll) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.componentmodel.InvalidEnumArgumentException, system.NullReferenceException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.InvalidCastException, system.collections.generic.KeyNotFoundException, system.RankException, system.OverflowException, system.MulticastNotSupportedException {
        try {
            return (boolean)classInstance.Invoke("BeginEdit", selectAll);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void NotifyCurrentCellDirty(boolean dirty) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ArgumentException, system.InvalidOperationException, system.ObjectDisposedException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.MissingMethodException, system.reflection.TargetInvocationException, system.IndexOutOfRangeException {
        try {
            classInstance.Invoke("NotifyCurrentCellDirty", dirty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ResetText() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.NotSupportedException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("ResetText");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Sort(DataGridViewColumn dataGridViewColumn, ListSortDirection direction) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.FormatException, system.componentmodel.InvalidEnumArgumentException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.OverflowException, system.InvalidCastException, system.MulticastNotSupportedException {
        try {
            classInstance.Invoke("Sort", (Object)dataGridViewColumn.getJCOInstance(), (Object)direction.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean AreAllCellsSelected(boolean includeInvisibleCells) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.RankException, system.componentmodel.InvalidEnumArgumentException, system.NullReferenceException, system.MulticastNotSupportedException, system.NotSupportedException, system.threading.ThreadStateException, system.componentmodel.Win32Exception, system.OutOfMemoryException {
        try {
            return (boolean)classInstance.Invoke("AreAllCellsSelected", includeInvisibleCells);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AutoResizeColumn(int columnIndex) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.componentmodel.InvalidEnumArgumentException {
        try {
            classInstance.Invoke("AutoResizeColumn", columnIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AutoResizeColumn(int columnIndex, DataGridViewAutoSizeColumnMode autoSizeColumnMode) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.componentmodel.InvalidEnumArgumentException, system.NotSupportedException {
        try {
            classInstance.Invoke("AutoResizeColumn", columnIndex, (Object)autoSizeColumnMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AutoResizeColumnHeadersHeight() throws Throwable, system.configuration.ConfigurationErrorsException, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.componentmodel.InvalidEnumArgumentException {
        try {
            classInstance.Invoke("AutoResizeColumnHeadersHeight");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AutoResizeColumnHeadersHeight(int columnIndex) throws Throwable, system.ArgumentOutOfRangeException, system.configuration.ConfigurationErrorsException, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.componentmodel.InvalidEnumArgumentException {
        try {
            classInstance.Invoke("AutoResizeColumnHeadersHeight", columnIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AutoResizeColumns() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.componentmodel.InvalidEnumArgumentException {
        try {
            classInstance.Invoke("AutoResizeColumns");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AutoResizeColumns(DataGridViewAutoSizeColumnsMode autoSizeColumnsMode) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.componentmodel.InvalidEnumArgumentException {
        try {
            classInstance.Invoke("AutoResizeColumns", (Object)autoSizeColumnsMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AutoResizeRow(int rowIndex) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.componentmodel.InvalidEnumArgumentException, system.NotSupportedException {
        try {
            classInstance.Invoke("AutoResizeRow", rowIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AutoResizeRow(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.IndexOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.componentmodel.InvalidEnumArgumentException, system.NotSupportedException {
        try {
            classInstance.Invoke("AutoResizeRow", rowIndex, (Object)autoSizeRowMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.componentmodel.InvalidEnumArgumentException, system.configuration.ConfigurationErrorsException {
        try {
            classInstance.Invoke("AutoResizeRowHeadersWidth", (Object)rowHeadersWidthSizeMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AutoResizeRowHeadersWidth(int rowIndex, DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.componentmodel.InvalidEnumArgumentException, system.configuration.ConfigurationErrorsException {
        try {
            classInstance.Invoke("AutoResizeRowHeadersWidth", rowIndex, (Object)rowHeadersWidthSizeMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AutoResizeRows() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.ArgumentOutOfRangeException, system.FormatException, system.componentmodel.InvalidEnumArgumentException {
        try {
            classInstance.Invoke("AutoResizeRows");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AutoResizeRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.NotImplementedException, system.IndexOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.componentmodel.InvalidEnumArgumentException, system.NotSupportedException {
        try {
            classInstance.Invoke("AutoResizeRows", (Object)autoSizeRowsMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CancelEdit() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException, system.NullReferenceException, system.NotSupportedException, system.InvalidCastException, system.FormatException, system.RankException, system.componentmodel.InvalidEnumArgumentException {
        try {
            return (boolean)classInstance.Invoke("CancelEdit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ClearSelection() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.FormatException, system.NullReferenceException, system.NotSupportedException, system.componentmodel.InvalidEnumArgumentException, system.InvalidCastException, system.security.SecurityException, system.componentmodel.Win32Exception {
        try {
            classInstance.Invoke("ClearSelection");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CommitEdit(DataGridViewDataErrorContexts context) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.ArgumentException, system.componentmodel.InvalidEnumArgumentException, system.NotSupportedException, system.InvalidCastException, system.FormatException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException {
        try {
            return (boolean)classInstance.Invoke("CommitEdit", (Object)context.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int DisplayedColumnCount(boolean includePartialColumns) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.RankException {
        try {
            return (int)classInstance.Invoke("DisplayedColumnCount", includePartialColumns);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int DisplayedRowCount(boolean includePartialRow) throws Throwable {
        try {
            return (int)classInstance.Invoke("DisplayedRowCount", includePartialRow);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean EndEdit() throws Throwable, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.ObjectDisposedException, system.ArgumentException, system.ArgumentNullException, system.IndexOutOfRangeException, system.FormatException, system.MissingMethodException, system.reflection.TargetInvocationException, system.componentmodel.InvalidEnumArgumentException, system.NotSupportedException, system.InvalidCastException, system.security.SecurityException, system.componentmodel.Win32Exception {
        try {
            return (boolean)classInstance.Invoke("EndEdit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean EndEdit(DataGridViewDataErrorContexts context) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ObjectDisposedException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.ArgumentException, system.NullReferenceException, system.IndexOutOfRangeException, system.NotSupportedException, system.InvalidCastException, system.FormatException, system.MissingMethodException, system.reflection.TargetInvocationException, system.componentmodel.InvalidEnumArgumentException, system.RankException {
        try {
            return (boolean)classInstance.Invoke("EndEdit", (Object)context.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int GetCellCount(DataGridViewElementStates includeFilter) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException {
        try {
            return (int)classInstance.Invoke("GetCellCount", (Object)includeFilter.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Rectangle GetCellDisplayRectangle(int columnIndex, int rowIndex, boolean cutOverflow) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException {
        try {
            JCObject objGetCellDisplayRectangle = (JCObject)classInstance.Invoke("GetCellDisplayRectangle", columnIndex, rowIndex, cutOverflow);
            return new Rectangle(objGetCellDisplayRectangle);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataObject GetClipboardContent() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.RankException, system.componentmodel.InvalidEnumArgumentException, system.NullReferenceException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.InvalidCastException {
        try {
            JCObject objGetClipboardContent = (JCObject)classInstance.Invoke("GetClipboardContent");
            return new DataObject(objGetClipboardContent);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Rectangle GetColumnDisplayRectangle(int columnIndex, boolean cutOverflow) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException {
        try {
            JCObject objGetColumnDisplayRectangle = (JCObject)classInstance.Invoke("GetColumnDisplayRectangle", columnIndex, cutOverflow);
            return new Rectangle(objGetColumnDisplayRectangle);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Rectangle GetRowDisplayRectangle(int rowIndex, boolean cutOverflow) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        try {
            JCObject objGetRowDisplayRectangle = (JCObject)classInstance.Invoke("GetRowDisplayRectangle", rowIndex, cutOverflow);
            return new Rectangle(objGetRowDisplayRectangle);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void InvalidateCell(DataGridViewCell dataGridViewCell) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.componentmodel.Win32Exception, system.OutOfMemoryException {
        try {
            classInstance.Invoke("InvalidateCell", (Object)dataGridViewCell.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void InvalidateCell(int columnIndex, int rowIndex) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.NotSupportedException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("InvalidateCell", columnIndex, rowIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void InvalidateColumn(int columnIndex) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.FormatException, system.RankException, system.componentmodel.Win32Exception, system.NotSupportedException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("InvalidateColumn", columnIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void InvalidateRow(int rowIndex) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.FormatException, system.componentmodel.Win32Exception, system.NotSupportedException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("InvalidateRow", rowIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean RefreshEdit() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.componentmodel.InvalidEnumArgumentException, system.NullReferenceException, system.NotSupportedException, system.security.SecurityException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.InvalidCastException, system.FormatException, system.RankException {
        try {
            return (boolean)classInstance.Invoke("RefreshEdit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SelectAll() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.FormatException, system.componentmodel.InvalidEnumArgumentException, system.NullReferenceException, system.TypeLoadException, system.MulticastNotSupportedException, system.NotSupportedException, system.threading.ThreadStateException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.IndexOutOfRangeException, system.InvalidCastException {
        try {
            classInstance.Invoke("SelectAll");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UpdateCellErrorText(int columnIndex, int rowIndex) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.NotSupportedException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("UpdateCellErrorText", columnIndex, rowIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UpdateCellValue(int columnIndex, int rowIndex) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ArgumentException, system.InvalidOperationException, system.ObjectDisposedException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.componentmodel.InvalidEnumArgumentException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException {
        try {
            classInstance.Invoke("UpdateCellValue", columnIndex, rowIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UpdateRowErrorText(int rowIndex) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.NotSupportedException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("UpdateRowErrorText", rowIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UpdateRowErrorText(int rowIndexStart, int rowIndexEnd) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.RankException, system.componentmodel.Win32Exception, system.NotSupportedException, system.security.SecurityException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("UpdateRowErrorText", rowIndexStart, rowIndexEnd);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UpdateRowHeightInfo(int rowIndex, boolean updateToEnd) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.NotSupportedException, system.componentmodel.InvalidEnumArgumentException, system.ArithmeticException, system.RankException, system.security.SecurityException {
        try {
            classInstance.Invoke("UpdateRowHeightInfo", rowIndex, updateToEnd);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Size GetPreferredSize(Size proposedSize) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.componentmodel.Win32Exception, system.NotSupportedException, system.security.SecurityException, system.OutOfMemoryException {
        try {
            JCObject objGetPreferredSize = (JCObject)classInstance.Invoke("GetPreferredSize", (Object)proposedSize.getJCOInstance());
            return new Size(objGetPreferredSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Contains(Control ctl) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("Contains", (Object)ctl.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Graphics CreateGraphics() throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.NotSupportedException, system.security.SecurityException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            JCObject objCreateGraphics = (JCObject)classInstance.Invoke("CreateGraphics");
            return new Graphics(objCreateGraphics);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void CreateControl() throws Throwable, system.ObjectDisposedException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.FormatException, system.componentmodel.Win32Exception, system.NotSupportedException, system.configuration.ConfigurationErrorsException, system.security.SecurityException, system.NullReferenceException, system.OutOfMemoryException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            classInstance.Invoke("CreateControl");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DragDropEffects DoDragDrop(NetObject data, DragDropEffects allowedEffects) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.FormatException, system.ArgumentException {
        try {
            JCObject objDoDragDrop = (JCObject)classInstance.Invoke("DoDragDrop", (Object)data.getJCOInstance(), (Object)allowedEffects.getJCOInstance());
            return new DragDropEffects(objDoDragDrop);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DrawToBitmap(Bitmap bitmap, Rectangle targetBounds) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ObjectDisposedException, system.ArgumentOutOfRangeException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.NotSupportedException, system.configuration.ConfigurationErrorsException, system.security.SecurityException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("DrawToBitmap", (Object)bitmap.getJCOInstance(), (Object)targetBounds.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Form FindForm() throws Throwable {
        try {
            JCObject objFindForm = (JCObject)classInstance.Invoke("FindForm");
            return new Form(objFindForm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Focus() throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.componentmodel.Win32Exception, system.NotSupportedException, system.security.SecurityException, system.OutOfMemoryException {
        try {
            return (boolean)classInstance.Invoke("Focus");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Control GetChildAtPoint(Point pt, GetChildAtPointSkip skipValue) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.FormatException, system.componentmodel.InvalidEnumArgumentException, system.componentmodel.Win32Exception, system.configuration.ConfigurationErrorsException, system.security.SecurityException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            JCObject objGetChildAtPoint = (JCObject)classInstance.Invoke("GetChildAtPoint", (Object)pt.getJCOInstance(), (Object)skipValue.getJCOInstance());
            return new Control(objGetChildAtPoint);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Control GetChildAtPoint(Point pt) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.NotImplementedException, system.IndexOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException, system.componentmodel.InvalidEnumArgumentException, system.componentmodel.Win32Exception, system.NotSupportedException, system.security.SecurityException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            JCObject objGetChildAtPoint = (JCObject)classInstance.Invoke("GetChildAtPoint", (Object)pt.getJCOInstance());
            return new Control(objGetChildAtPoint);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Control GetNextControl(Control ctl, boolean forward) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.NotImplementedException, system.IndexOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.FormatException {
        try {
            JCObject objGetNextControl = (JCObject)classInstance.Invoke("GetNextControl", (Object)ctl.getJCOInstance(), forward);
            return new Control(objGetNextControl);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Hide() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.NotSupportedException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("Hide");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Invalidate(Region region) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.componentmodel.Win32Exception, system.NotSupportedException, system.security.SecurityException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("Invalidate", (Object)region.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Invalidate(Region region, boolean invalidateChildren) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.NotSupportedException, system.security.SecurityException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("Invalidate", (Object)region.getJCOInstance(), invalidateChildren);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Invalidate() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.NotSupportedException, system.security.SecurityException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("Invalidate");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Invalidate(boolean invalidateChildren) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.NotSupportedException, system.configuration.ConfigurationErrorsException, system.security.SecurityException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("Invalidate", invalidateChildren);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Invalidate(Rectangle rc) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.componentmodel.Win32Exception, system.NotSupportedException, system.security.SecurityException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("Invalidate", (Object)rc.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Invalidate(Rectangle rc, boolean invalidateChildren) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.NotSupportedException, system.security.SecurityException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("Invalidate", (Object)rc.getJCOInstance(), invalidateChildren);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int LogicalToDeviceUnits(int value) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.configuration.ConfigurationErrorsException, system.ArgumentException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.InvalidOperationException, system.ObjectDisposedException {
        try {
            return (int)classInstance.Invoke("LogicalToDeviceUnits", value);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Size LogicalToDeviceUnits(Size value) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.configuration.ConfigurationErrorsException, system.ArgumentException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.InvalidOperationException, system.ObjectDisposedException {
        try {
            JCObject objLogicalToDeviceUnits = (JCObject)classInstance.Invoke("LogicalToDeviceUnits", (Object)value.getJCOInstance());
            return new Size(objLogicalToDeviceUnits);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void PerformLayout(Control affectedControl, java.lang.String affectedProperty) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.NotSupportedException, system.security.SecurityException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("PerformLayout", (Object)affectedControl.getJCOInstance(), (Object)affectedProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Point PointToClient(Point p) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.NotSupportedException, system.security.SecurityException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            JCObject objPointToClient = (JCObject)classInstance.Invoke("PointToClient", (Object)p.getJCOInstance());
            return new Point(objPointToClient);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Point PointToScreen(Point p) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.NotSupportedException, system.configuration.ConfigurationErrorsException, system.security.SecurityException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            JCObject objPointToScreen = (JCObject)classInstance.Invoke("PointToScreen", (Object)p.getJCOInstance());
            return new Point(objPointToScreen);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Rectangle RectangleToClient(Rectangle r) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.NotSupportedException, system.configuration.ConfigurationErrorsException, system.security.SecurityException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            JCObject objRectangleToClient = (JCObject)classInstance.Invoke("RectangleToClient", (Object)r.getJCOInstance());
            return new Rectangle(objRectangleToClient);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Rectangle RectangleToScreen(Rectangle r) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.NotSupportedException, system.configuration.ConfigurationErrorsException, system.security.SecurityException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            JCObject objRectangleToScreen = (JCObject)classInstance.Invoke("RectangleToScreen", (Object)r.getJCOInstance());
            return new Rectangle(objRectangleToScreen);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ResumeLayout() throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.ArgumentException, system.NotSupportedException {
        try {
            classInstance.Invoke("ResumeLayout");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ResumeLayout(boolean performLayout) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.NotSupportedException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("ResumeLayout", performLayout);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Scale(Single ratio) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.NotSupportedException, system.configuration.ConfigurationErrorsException {
        try {
            classInstance.Invoke("Scale", (Object)ratio.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Scale(Single dx, Single dy) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.NotSupportedException, system.configuration.ConfigurationErrorsException {
        try {
            classInstance.Invoke("Scale", (Object)dx.getJCOInstance(), (Object)dy.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Scale(SizeF factor) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.NotSupportedException, system.NullReferenceException, system.OutOfMemoryException, system.configuration.ConfigurationErrorsException, system.globalization.CultureNotFoundException {
        try {
            classInstance.Invoke("Scale", (Object)factor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Select() throws Throwable {
        try {
            classInstance.Invoke("Select");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean SelectNextControl(Control ctl, boolean forward, boolean tabStopOnly, boolean nested, boolean wrap) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException {
        try {
            return (boolean)classInstance.Invoke("SelectNextControl", (Object)ctl.getJCOInstance(), forward, tabStopOnly, nested, wrap);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SendToBack() throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentOutOfRangeException, system.RankException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.NotSupportedException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("SendToBack");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetBounds(int x, int y, int width, int height) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.componentmodel.Win32Exception, system.NullReferenceException, system.OutOfMemoryException, system.NotSupportedException, system.configuration.ConfigurationErrorsException {
        try {
            classInstance.Invoke("SetBounds", x, y, width, height);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetBounds(int x, int y, int width, int height, BoundsSpecified specified) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.componentmodel.Win32Exception, system.NullReferenceException, system.OutOfMemoryException, system.NotSupportedException, system.configuration.ConfigurationErrorsException {
        try {
            classInstance.Invoke("SetBounds", x, y, width, height, (Object)specified.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Show() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception, system.NotSupportedException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("Show");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SuspendLayout() throws Throwable {
        try {
            classInstance.Invoke("SuspendLayout");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Update() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.NotSupportedException, system.security.SecurityException, system.NullReferenceException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("Update");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ResetImeMode() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.ArgumentOutOfRangeException, system.FormatException, system.componentmodel.InvalidEnumArgumentException, system.componentmodel.Win32Exception, system.NotSupportedException, system.security.SecurityException, system.NullReferenceException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException {
        try {
            classInstance.Invoke("ResetImeMode");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Dispose() throws Throwable, system.ArgumentException, system.ArgumentNullException {
        try {
            classInstance.Invoke("Dispose");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.runtime.remoting.RemotingException, system.ObjectDisposedException, system.InvalidOperationException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            JCObject objGetLifetimeService = (JCObject)classInstance.Invoke("GetLifetimeService");
            return new NetObject(objGetLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject InitializeLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.runtime.remoting.RemotingException, system.ObjectDisposedException, system.InvalidOperationException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            JCObject objInitializeLifetimeService = (JCObject)classInstance.Invoke("InitializeLifetimeService");
            return new NetObject(objInitializeLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ObjRef CreateObjRef(NetType requestedType) throws Throwable, system.runtime.remoting.RemotingException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        try {
            JCObject objCreateObjRef = (JCObject)classInstance.Invoke("CreateObjRef", (Object)requestedType.getJCOInstance());
            return new ObjRef(objCreateObjRef);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public DataGridViewAdvancedBorderStyle getAdjustedTopLeftHeaderBorderStyle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AdjustedTopLeftHeaderBorderStyle");
            return new DataGridViewAdvancedBorderStyle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewAdvancedBorderStyle getAdvancedCellBorderStyle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AdvancedCellBorderStyle");
            return new DataGridViewAdvancedBorderStyle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewAdvancedBorderStyle getAdvancedColumnHeadersBorderStyle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AdvancedColumnHeadersBorderStyle");
            return new DataGridViewAdvancedBorderStyle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewAdvancedBorderStyle getAdvancedRowHeadersBorderStyle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AdvancedRowHeadersBorderStyle");
            return new DataGridViewAdvancedBorderStyle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowUserToAddRows() throws Throwable {
        try {
            return (boolean)classInstance.Get("AllowUserToAddRows");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowUserToAddRows(boolean AllowUserToAddRows) throws Throwable {
        try {
            classInstance.Set("AllowUserToAddRows", AllowUserToAddRows);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowUserToDeleteRows() throws Throwable {
        try {
            return (boolean)classInstance.Get("AllowUserToDeleteRows");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowUserToDeleteRows(boolean AllowUserToDeleteRows) throws Throwable {
        try {
            classInstance.Set("AllowUserToDeleteRows", AllowUserToDeleteRows);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowUserToOrderColumns() throws Throwable {
        try {
            return (boolean)classInstance.Get("AllowUserToOrderColumns");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowUserToOrderColumns(boolean AllowUserToOrderColumns) throws Throwable {
        try {
            classInstance.Set("AllowUserToOrderColumns", AllowUserToOrderColumns);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowUserToResizeColumns() throws Throwable {
        try {
            return (boolean)classInstance.Get("AllowUserToResizeColumns");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowUserToResizeColumns(boolean AllowUserToResizeColumns) throws Throwable {
        try {
            classInstance.Set("AllowUserToResizeColumns", AllowUserToResizeColumns);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowUserToResizeRows() throws Throwable {
        try {
            return (boolean)classInstance.Get("AllowUserToResizeRows");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowUserToResizeRows(boolean AllowUserToResizeRows) throws Throwable {
        try {
            classInstance.Set("AllowUserToResizeRows", AllowUserToResizeRows);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewCellStyle getAlternatingRowsDefaultCellStyle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AlternatingRowsDefaultCellStyle");
            return new DataGridViewCellStyle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAlternatingRowsDefaultCellStyle(DataGridViewCellStyle AlternatingRowsDefaultCellStyle) throws Throwable {
        try {
            classInstance.Set("AlternatingRowsDefaultCellStyle", (Object)AlternatingRowsDefaultCellStyle.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAutoGenerateColumns() throws Throwable {
        try {
            return (boolean)classInstance.Get("AutoGenerateColumns");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutoGenerateColumns(boolean AutoGenerateColumns) throws Throwable {
        try {
            classInstance.Set("AutoGenerateColumns", AutoGenerateColumns);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAutoSize() throws Throwable {
        try {
            return (boolean)classInstance.Get("AutoSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutoSize(boolean AutoSize) throws Throwable {
        try {
            classInstance.Set("AutoSize", AutoSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewAutoSizeColumnsMode getAutoSizeColumnsMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AutoSizeColumnsMode");
            return new DataGridViewAutoSizeColumnsMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutoSizeColumnsMode(DataGridViewAutoSizeColumnsMode AutoSizeColumnsMode) throws Throwable {
        try {
            classInstance.Set("AutoSizeColumnsMode", (Object)AutoSizeColumnsMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewAutoSizeRowsMode getAutoSizeRowsMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AutoSizeRowsMode");
            return new DataGridViewAutoSizeRowsMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutoSizeRowsMode(DataGridViewAutoSizeRowsMode AutoSizeRowsMode) throws Throwable {
        try {
            classInstance.Set("AutoSizeRowsMode", (Object)AutoSizeRowsMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getBackColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("BackColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBackColor(Color BackColor) throws Throwable {
        try {
            classInstance.Set("BackColor", (Object)BackColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getBackgroundColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("BackgroundColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBackgroundColor(Color BackgroundColor) throws Throwable {
        try {
            classInstance.Set("BackgroundColor", (Object)BackgroundColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Image getBackgroundImage() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("BackgroundImage");
            return new Image(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBackgroundImage(Image BackgroundImage) throws Throwable {
        try {
            classInstance.Set("BackgroundImage", (Object)BackgroundImage.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ImageLayout getBackgroundImageLayout() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("BackgroundImageLayout");
            return new ImageLayout(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBackgroundImageLayout(ImageLayout BackgroundImageLayout) throws Throwable {
        try {
            classInstance.Set("BackgroundImageLayout", (Object)BackgroundImageLayout.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BorderStyle getBorderStyle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("BorderStyle");
            return new BorderStyle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBorderStyle(BorderStyle BorderStyle) throws Throwable {
        try {
            classInstance.Set("BorderStyle", (Object)BorderStyle.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewCellBorderStyle getCellBorderStyle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CellBorderStyle");
            return new DataGridViewCellBorderStyle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCellBorderStyle(DataGridViewCellBorderStyle CellBorderStyle) throws Throwable {
        try {
            classInstance.Set("CellBorderStyle", (Object)CellBorderStyle.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewClipboardCopyMode getClipboardCopyMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ClipboardCopyMode");
            return new DataGridViewClipboardCopyMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setClipboardCopyMode(DataGridViewClipboardCopyMode ClipboardCopyMode) throws Throwable {
        try {
            classInstance.Set("ClipboardCopyMode", (Object)ClipboardCopyMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getColumnCount() throws Throwable {
        try {
            return (int)classInstance.Get("ColumnCount");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setColumnCount(int ColumnCount) throws Throwable {
        try {
            classInstance.Set("ColumnCount", ColumnCount);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewHeaderBorderStyle getColumnHeadersBorderStyle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ColumnHeadersBorderStyle");
            return new DataGridViewHeaderBorderStyle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setColumnHeadersBorderStyle(DataGridViewHeaderBorderStyle ColumnHeadersBorderStyle) throws Throwable {
        try {
            classInstance.Set("ColumnHeadersBorderStyle", (Object)ColumnHeadersBorderStyle.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewCellStyle getColumnHeadersDefaultCellStyle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ColumnHeadersDefaultCellStyle");
            return new DataGridViewCellStyle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setColumnHeadersDefaultCellStyle(DataGridViewCellStyle ColumnHeadersDefaultCellStyle) throws Throwable {
        try {
            classInstance.Set("ColumnHeadersDefaultCellStyle", (Object)ColumnHeadersDefaultCellStyle.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getColumnHeadersHeight() throws Throwable {
        try {
            return (int)classInstance.Get("ColumnHeadersHeight");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setColumnHeadersHeight(int ColumnHeadersHeight) throws Throwable {
        try {
            classInstance.Set("ColumnHeadersHeight", ColumnHeadersHeight);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewColumnHeadersHeightSizeMode getColumnHeadersHeightSizeMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ColumnHeadersHeightSizeMode");
            return new DataGridViewColumnHeadersHeightSizeMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setColumnHeadersHeightSizeMode(DataGridViewColumnHeadersHeightSizeMode ColumnHeadersHeightSizeMode) throws Throwable {
        try {
            classInstance.Set("ColumnHeadersHeightSizeMode", (Object)ColumnHeadersHeightSizeMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getColumnHeadersVisible() throws Throwable {
        try {
            return (boolean)classInstance.Get("ColumnHeadersVisible");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setColumnHeadersVisible(boolean ColumnHeadersVisible) throws Throwable {
        try {
            classInstance.Set("ColumnHeadersVisible", ColumnHeadersVisible);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewColumnCollection getColumns() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Columns");
            return new DataGridViewColumnCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewCell getCurrentCell() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CurrentCell");
            return new DataGridViewCell(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCurrentCell(DataGridViewCell CurrentCell) throws Throwable {
        try {
            classInstance.Set("CurrentCell", (Object)CurrentCell.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Point getCurrentCellAddress() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CurrentCellAddress");
            return new Point(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewRow getCurrentRow() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CurrentRow");
            return new DataGridViewRow(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDataMember() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("DataMember");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDataMember(java.lang.String DataMember) throws Throwable {
        try {
            classInstance.Set("DataMember", (Object)DataMember);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getDataSource() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DataSource");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDataSource(NetObject DataSource) throws Throwable {
        try {
            classInstance.Set("DataSource", (Object)DataSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewCellStyle getDefaultCellStyle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DefaultCellStyle");
            return new DataGridViewCellStyle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDefaultCellStyle(DataGridViewCellStyle DefaultCellStyle) throws Throwable {
        try {
            classInstance.Set("DefaultCellStyle", (Object)DefaultCellStyle.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Rectangle getDisplayRectangle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DisplayRectangle");
            return new Rectangle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewEditMode getEditMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("EditMode");
            return new DataGridViewEditMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEditMode(DataGridViewEditMode EditMode) throws Throwable {
        try {
            classInstance.Set("EditMode", (Object)EditMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Control getEditingControl() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("EditingControl");
            return new Control(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Panel getEditingPanel() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("EditingPanel");
            return new Panel(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnableHeadersVisualStyles() throws Throwable {
        try {
            return (boolean)classInstance.Get("EnableHeadersVisualStyles");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnableHeadersVisualStyles(boolean EnableHeadersVisualStyles) throws Throwable {
        try {
            classInstance.Set("EnableHeadersVisualStyles", EnableHeadersVisualStyles);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewCell getFirstDisplayedCell() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("FirstDisplayedCell");
            return new DataGridViewCell(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFirstDisplayedCell(DataGridViewCell FirstDisplayedCell) throws Throwable {
        try {
            classInstance.Set("FirstDisplayedCell", (Object)FirstDisplayedCell.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getFirstDisplayedScrollingColumnHiddenWidth() throws Throwable {
        try {
            return (int)classInstance.Get("FirstDisplayedScrollingColumnHiddenWidth");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getFirstDisplayedScrollingColumnIndex() throws Throwable {
        try {
            return (int)classInstance.Get("FirstDisplayedScrollingColumnIndex");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFirstDisplayedScrollingColumnIndex(int FirstDisplayedScrollingColumnIndex) throws Throwable {
        try {
            classInstance.Set("FirstDisplayedScrollingColumnIndex", FirstDisplayedScrollingColumnIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getFirstDisplayedScrollingRowIndex() throws Throwable {
        try {
            return (int)classInstance.Get("FirstDisplayedScrollingRowIndex");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFirstDisplayedScrollingRowIndex(int FirstDisplayedScrollingRowIndex) throws Throwable {
        try {
            classInstance.Set("FirstDisplayedScrollingRowIndex", FirstDisplayedScrollingRowIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getForeColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ForeColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setForeColor(Color ForeColor) throws Throwable {
        try {
            classInstance.Set("ForeColor", (Object)ForeColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Font getFont() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Font");
            return new Font(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFont(Font Font) throws Throwable {
        try {
            classInstance.Set("Font", (Object)Font.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Color getGridColor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("GridColor");
            return new Color(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setGridColor(Color GridColor) throws Throwable {
        try {
            classInstance.Set("GridColor", (Object)GridColor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getHorizontalScrollingOffset() throws Throwable {
        try {
            return (int)classInstance.Get("HorizontalScrollingOffset");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHorizontalScrollingOffset(int HorizontalScrollingOffset) throws Throwable {
        try {
            classInstance.Set("HorizontalScrollingOffset", HorizontalScrollingOffset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsCurrentCellDirty() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsCurrentCellDirty");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsCurrentCellInEditMode() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsCurrentCellInEditMode");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsCurrentRowDirty() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsCurrentRowDirty");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getMultiSelect() throws Throwable {
        try {
            return (boolean)classInstance.Get("MultiSelect");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMultiSelect(boolean MultiSelect) throws Throwable {
        try {
            classInstance.Set("MultiSelect", MultiSelect);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getNewRowIndex() throws Throwable {
        try {
            return (int)classInstance.Get("NewRowIndex");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Padding getPadding() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Padding");
            return new Padding(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPadding(Padding Padding) throws Throwable {
        try {
            classInstance.Set("Padding", (Object)Padding.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getReadOnly() throws Throwable {
        try {
            return (boolean)classInstance.Get("ReadOnly");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReadOnly(boolean ReadOnly) throws Throwable {
        try {
            classInstance.Set("ReadOnly", ReadOnly);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getRowCount() throws Throwable {
        try {
            return (int)classInstance.Get("RowCount");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRowCount(int RowCount) throws Throwable {
        try {
            classInstance.Set("RowCount", RowCount);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewHeaderBorderStyle getRowHeadersBorderStyle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RowHeadersBorderStyle");
            return new DataGridViewHeaderBorderStyle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRowHeadersBorderStyle(DataGridViewHeaderBorderStyle RowHeadersBorderStyle) throws Throwable {
        try {
            classInstance.Set("RowHeadersBorderStyle", (Object)RowHeadersBorderStyle.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewCellStyle getRowHeadersDefaultCellStyle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RowHeadersDefaultCellStyle");
            return new DataGridViewCellStyle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRowHeadersDefaultCellStyle(DataGridViewCellStyle RowHeadersDefaultCellStyle) throws Throwable {
        try {
            classInstance.Set("RowHeadersDefaultCellStyle", (Object)RowHeadersDefaultCellStyle.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRowHeadersVisible() throws Throwable {
        try {
            return (boolean)classInstance.Get("RowHeadersVisible");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRowHeadersVisible(boolean RowHeadersVisible) throws Throwable {
        try {
            classInstance.Set("RowHeadersVisible", RowHeadersVisible);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getRowHeadersWidth() throws Throwable {
        try {
            return (int)classInstance.Get("RowHeadersWidth");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRowHeadersWidth(int RowHeadersWidth) throws Throwable {
        try {
            classInstance.Set("RowHeadersWidth", RowHeadersWidth);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewRowHeadersWidthSizeMode getRowHeadersWidthSizeMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RowHeadersWidthSizeMode");
            return new DataGridViewRowHeadersWidthSizeMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRowHeadersWidthSizeMode(DataGridViewRowHeadersWidthSizeMode RowHeadersWidthSizeMode) throws Throwable {
        try {
            classInstance.Set("RowHeadersWidthSizeMode", (Object)RowHeadersWidthSizeMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewRowCollection getRows() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Rows");
            return new DataGridViewRowCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewCellStyle getRowsDefaultCellStyle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RowsDefaultCellStyle");
            return new DataGridViewCellStyle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRowsDefaultCellStyle(DataGridViewCellStyle RowsDefaultCellStyle) throws Throwable {
        try {
            classInstance.Set("RowsDefaultCellStyle", (Object)RowsDefaultCellStyle.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewRow getRowTemplate() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RowTemplate");
            return new DataGridViewRow(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRowTemplate(DataGridViewRow RowTemplate) throws Throwable {
        try {
            classInstance.Set("RowTemplate", (Object)RowTemplate.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ScrollBars getScrollBars() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ScrollBars");
            return new ScrollBars(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setScrollBars(ScrollBars ScrollBars) throws Throwable {
        try {
            classInstance.Set("ScrollBars", (Object)ScrollBars.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewSelectedCellCollection getSelectedCells() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SelectedCells");
            return new DataGridViewSelectedCellCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewSelectedColumnCollection getSelectedColumns() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SelectedColumns");
            return new DataGridViewSelectedColumnCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewSelectedRowCollection getSelectedRows() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SelectedRows");
            return new DataGridViewSelectedRowCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewSelectionMode getSelectionMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SelectionMode");
            return new DataGridViewSelectionMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSelectionMode(DataGridViewSelectionMode SelectionMode) throws Throwable {
        try {
            classInstance.Set("SelectionMode", (Object)SelectionMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getShowCellErrors() throws Throwable {
        try {
            return (boolean)classInstance.Get("ShowCellErrors");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setShowCellErrors(boolean ShowCellErrors) throws Throwable {
        try {
            classInstance.Set("ShowCellErrors", ShowCellErrors);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getShowCellToolTips() throws Throwable {
        try {
            return (boolean)classInstance.Get("ShowCellToolTips");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setShowCellToolTips(boolean ShowCellToolTips) throws Throwable {
        try {
            classInstance.Set("ShowCellToolTips", ShowCellToolTips);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getShowEditingIcon() throws Throwable {
        try {
            return (boolean)classInstance.Get("ShowEditingIcon");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setShowEditingIcon(boolean ShowEditingIcon) throws Throwable {
        try {
            classInstance.Set("ShowEditingIcon", ShowEditingIcon);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getShowRowErrors() throws Throwable {
        try {
            return (boolean)classInstance.Get("ShowRowErrors");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setShowRowErrors(boolean ShowRowErrors) throws Throwable {
        try {
            classInstance.Set("ShowRowErrors", ShowRowErrors);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewColumn getSortedColumn() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SortedColumn");
            return new DataGridViewColumn(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SortOrder getSortOrder() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SortOrder");
            return new SortOrder(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getStandardTab() throws Throwable {
        try {
            return (boolean)classInstance.Get("StandardTab");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStandardTab(boolean StandardTab) throws Throwable {
        try {
            classInstance.Set("StandardTab", StandardTab);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getText() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Text");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setText(java.lang.String Text) throws Throwable {
        try {
            classInstance.Set("Text", (Object)Text);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DataGridViewHeaderCell getTopLeftHeaderCell() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("TopLeftHeaderCell");
            return new DataGridViewHeaderCell(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTopLeftHeaderCell(DataGridViewHeaderCell TopLeftHeaderCell) throws Throwable {
        try {
            classInstance.Set("TopLeftHeaderCell", (Object)TopLeftHeaderCell.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Cursor getUserSetCursor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("UserSetCursor");
            return new Cursor(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getVerticalScrollingOffset() throws Throwable {
        try {
            return (int)classInstance.Get("VerticalScrollingOffset");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getVirtualMode() throws Throwable {
        try {
            return (boolean)classInstance.Get("VirtualMode");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setVirtualMode(boolean VirtualMode) throws Throwable {
        try {
            classInstance.Set("VirtualMode", VirtualMode);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AccessibleObject getAccessibilityObject() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AccessibilityObject");
            return new AccessibleObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getAccessibleDefaultActionDescription() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("AccessibleDefaultActionDescription");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAccessibleDefaultActionDescription(java.lang.String AccessibleDefaultActionDescription) throws Throwable {
        try {
            classInstance.Set("AccessibleDefaultActionDescription", (Object)AccessibleDefaultActionDescription);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getAccessibleDescription() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("AccessibleDescription");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAccessibleDescription(java.lang.String AccessibleDescription) throws Throwable {
        try {
            classInstance.Set("AccessibleDescription", (Object)AccessibleDescription);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getAccessibleName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("AccessibleName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAccessibleName(java.lang.String AccessibleName) throws Throwable {
        try {
            classInstance.Set("AccessibleName", (Object)AccessibleName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AccessibleRole getAccessibleRole() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AccessibleRole");
            return new AccessibleRole(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAccessibleRole(AccessibleRole AccessibleRole) throws Throwable {
        try {
            classInstance.Set("AccessibleRole", (Object)AccessibleRole.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowDrop() throws Throwable {
        try {
            return (boolean)classInstance.Get("AllowDrop");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowDrop(boolean AllowDrop) throws Throwable {
        try {
            classInstance.Set("AllowDrop", AllowDrop);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AnchorStyles getAnchor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Anchor");
            return new AnchorStyles(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAnchor(AnchorStyles Anchor) throws Throwable {
        try {
            classInstance.Set("Anchor", (Object)Anchor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Point getAutoScrollOffset() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AutoScrollOffset");
            return new Point(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutoScrollOffset(Point AutoScrollOffset) throws Throwable {
        try {
            classInstance.Set("AutoScrollOffset", (Object)AutoScrollOffset.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LayoutEngine getLayoutEngine() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("LayoutEngine");
            return new LayoutEngine(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BindingContext getBindingContext() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("BindingContext");
            return new BindingContext(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBindingContext(BindingContext BindingContext) throws Throwable {
        try {
            classInstance.Set("BindingContext", (Object)BindingContext.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getBottom() throws Throwable {
        try {
            return (int)classInstance.Get("Bottom");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Rectangle getBounds() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Bounds");
            return new Rectangle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBounds(Rectangle Bounds) throws Throwable {
        try {
            classInstance.Set("Bounds", (Object)Bounds.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getCanFocus() throws Throwable {
        try {
            return (boolean)classInstance.Get("CanFocus");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getCanSelect() throws Throwable {
        try {
            return (boolean)classInstance.Get("CanSelect");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getCapture() throws Throwable {
        try {
            return (boolean)classInstance.Get("Capture");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCapture(boolean Capture) throws Throwable {
        try {
            classInstance.Set("Capture", Capture);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getCausesValidation() throws Throwable {
        try {
            return (boolean)classInstance.Get("CausesValidation");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCausesValidation(boolean CausesValidation) throws Throwable {
        try {
            classInstance.Set("CausesValidation", CausesValidation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Rectangle getClientRectangle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ClientRectangle");
            return new Rectangle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Size getClientSize() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ClientSize");
            return new Size(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setClientSize(Size ClientSize) throws Throwable {
        try {
            classInstance.Set("ClientSize", (Object)ClientSize.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getCompanyName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("CompanyName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getContainsFocus() throws Throwable {
        try {
            return (boolean)classInstance.Get("ContainsFocus");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ContextMenu getContextMenu() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ContextMenu");
            return new ContextMenu(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setContextMenu(ContextMenu ContextMenu) throws Throwable {
        try {
            classInstance.Set("ContextMenu", (Object)ContextMenu.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ContextMenuStrip getContextMenuStrip() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ContextMenuStrip");
            return new ContextMenuStrip(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setContextMenuStrip(ContextMenuStrip ContextMenuStrip) throws Throwable {
        try {
            classInstance.Set("ContextMenuStrip", (Object)ContextMenuStrip.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getCreated() throws Throwable {
        try {
            return (boolean)classInstance.Get("Created");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Cursor getCursor() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Cursor");
            return new Cursor(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCursor(Cursor Cursor) throws Throwable {
        try {
            classInstance.Set("Cursor", (Object)Cursor.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ControlBindingsCollection getDataBindings() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("DataBindings");
            return new ControlBindingsCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getDeviceDpi() throws Throwable {
        try {
            return (int)classInstance.Get("DeviceDpi");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsDisposed() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsDisposed");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getDisposing() throws Throwable {
        try {
            return (boolean)classInstance.Get("Disposing");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DockStyle getDock() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Dock");
            return new DockStyle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDock(DockStyle Dock) throws Throwable {
        try {
            classInstance.Set("Dock", (Object)Dock.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnabled() throws Throwable {
        try {
            return (boolean)classInstance.Get("Enabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnabled(boolean Enabled) throws Throwable {
        try {
            classInstance.Set("Enabled", Enabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getFocused() throws Throwable {
        try {
            return (boolean)classInstance.Get("Focused");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getHasChildren() throws Throwable {
        try {
            return (boolean)classInstance.Get("HasChildren");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getHeight() throws Throwable {
        try {
            return (int)classInstance.Get("Height");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHeight(int Height) throws Throwable {
        try {
            classInstance.Set("Height", Height);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsHandleCreated() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsHandleCreated");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getInvokeRequired() throws Throwable {
        try {
            return (boolean)classInstance.Get("InvokeRequired");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsAccessible() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsAccessible");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIsAccessible(boolean IsAccessible) throws Throwable {
        try {
            classInstance.Set("IsAccessible", IsAccessible);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsMirrored() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsMirrored");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getLeft() throws Throwable {
        try {
            return (int)classInstance.Get("Left");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLeft(int Left) throws Throwable {
        try {
            classInstance.Set("Left", Left);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Point getLocation() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Location");
            return new Point(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLocation(Point Location) throws Throwable {
        try {
            classInstance.Set("Location", (Object)Location.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Padding getMargin() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Margin");
            return new Padding(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMargin(Padding Margin) throws Throwable {
        try {
            classInstance.Set("Margin", (Object)Margin.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Size getMaximumSize() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("MaximumSize");
            return new Size(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMaximumSize(Size MaximumSize) throws Throwable {
        try {
            classInstance.Set("MaximumSize", (Object)MaximumSize.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Size getMinimumSize() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("MinimumSize");
            return new Size(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMinimumSize(Size MinimumSize) throws Throwable {
        try {
            classInstance.Set("MinimumSize", (Object)MinimumSize.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Name");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setName(java.lang.String Name) throws Throwable {
        try {
            classInstance.Set("Name", (Object)Name);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Control getParent() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Parent");
            return new Control(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setParent(Control Parent) throws Throwable {
        try {
            classInstance.Set("Parent", (Object)Parent.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getProductName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ProductName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getProductVersion() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ProductVersion");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRecreatingHandle() throws Throwable {
        try {
            return (boolean)classInstance.Get("RecreatingHandle");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Region getRegion() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Region");
            return new Region(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRegion(Region Region) throws Throwable {
        try {
            classInstance.Set("Region", (Object)Region.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getRight() throws Throwable {
        try {
            return (int)classInstance.Get("Right");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RightToLeft getRightToLeft() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("RightToLeft");
            return new RightToLeft(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRightToLeft(RightToLeft RightToLeft) throws Throwable {
        try {
            classInstance.Set("RightToLeft", (Object)RightToLeft.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Size getSize() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Size");
            return new Size(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSize(Size Size) throws Throwable {
        try {
            classInstance.Set("Size", (Object)Size.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getTabIndex() throws Throwable {
        try {
            return (int)classInstance.Get("TabIndex");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTabIndex(int TabIndex) throws Throwable {
        try {
            classInstance.Set("TabIndex", TabIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTabStop() throws Throwable {
        try {
            return (boolean)classInstance.Get("TabStop");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTabStop(boolean TabStop) throws Throwable {
        try {
            classInstance.Set("TabStop", TabStop);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getTag() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Tag");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTag(NetObject Tag) throws Throwable {
        try {
            classInstance.Set("Tag", (Object)Tag.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getTop() throws Throwable {
        try {
            return (int)classInstance.Get("Top");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTop(int Top) throws Throwable {
        try {
            classInstance.Set("Top", Top);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Control getTopLevelControl() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("TopLevelControl");
            return new Control(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseWaitCursor() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseWaitCursor");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseWaitCursor(boolean UseWaitCursor) throws Throwable {
        try {
            classInstance.Set("UseWaitCursor", UseWaitCursor);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getVisible() throws Throwable {
        try {
            return (boolean)classInstance.Get("Visible");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setVisible(boolean Visible) throws Throwable {
        try {
            classInstance.Set("Visible", Visible);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getWidth() throws Throwable {
        try {
            return (int)classInstance.Get("Width");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setWidth(int Width) throws Throwable {
        try {
            classInstance.Set("Width", Width);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Size getPreferredSize() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PreferredSize");
            return new Size(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ImeMode getImeMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ImeMode");
            return new ImeMode(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setImeMode(ImeMode ImeMode) throws Throwable {
        try {
            classInstance.Set("ImeMode", (Object)ImeMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
    public void addAllowUserToAddRowsChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("AllowUserToAddRowsChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeAllowUserToAddRowsChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("AllowUserToAddRowsChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addAllowUserToDeleteRowsChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("AllowUserToDeleteRowsChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeAllowUserToDeleteRowsChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("AllowUserToDeleteRowsChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addAllowUserToOrderColumnsChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("AllowUserToOrderColumnsChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeAllowUserToOrderColumnsChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("AllowUserToOrderColumnsChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addAllowUserToResizeColumnsChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("AllowUserToResizeColumnsChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeAllowUserToResizeColumnsChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("AllowUserToResizeColumnsChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addAllowUserToResizeRowsChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("AllowUserToResizeRowsChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeAllowUserToResizeRowsChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("AllowUserToResizeRowsChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addAlternatingRowsDefaultCellStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("AlternatingRowsDefaultCellStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeAlternatingRowsDefaultCellStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("AlternatingRowsDefaultCellStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addAutoGenerateColumnsChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("AutoGenerateColumnsChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeAutoGenerateColumnsChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("AutoGenerateColumnsChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addAutoSizeColumnsModeChanged(DataGridViewAutoSizeColumnsModeEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("AutoSizeColumnsModeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeAutoSizeColumnsModeChanged(DataGridViewAutoSizeColumnsModeEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("AutoSizeColumnsModeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addAutoSizeRowsModeChanged(DataGridViewAutoSizeModeEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("AutoSizeRowsModeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeAutoSizeRowsModeChanged(DataGridViewAutoSizeModeEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("AutoSizeRowsModeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addBackColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("BackColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeBackColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("BackColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addBackgroundColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("BackgroundColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeBackgroundColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("BackgroundColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addBackgroundImageChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("BackgroundImageChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeBackgroundImageChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("BackgroundImageChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addBackgroundImageLayoutChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("BackgroundImageLayoutChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeBackgroundImageLayoutChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("BackgroundImageLayoutChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addBorderStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("BorderStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeBorderStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("BorderStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellBorderStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellBorderStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellBorderStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellBorderStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnHeadersBorderStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnHeadersBorderStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnHeadersBorderStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnHeadersBorderStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnHeadersDefaultCellStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnHeadersDefaultCellStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnHeadersDefaultCellStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnHeadersDefaultCellStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnHeadersHeightChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnHeadersHeightChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnHeadersHeightChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnHeadersHeightChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnHeadersHeightSizeModeChanged(DataGridViewAutoSizeModeEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnHeadersHeightSizeModeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnHeadersHeightSizeModeChanged(DataGridViewAutoSizeModeEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnHeadersHeightSizeModeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDataMemberChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DataMemberChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDataMemberChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DataMemberChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDataSourceChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DataSourceChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDataSourceChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DataSourceChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDefaultCellStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DefaultCellStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDefaultCellStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DefaultCellStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addEditModeChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("EditModeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeEditModeChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("EditModeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addForeColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ForeColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeForeColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ForeColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addFontChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("FontChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeFontChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("FontChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addGridColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("GridColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeGridColorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("GridColorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addMultiSelectChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("MultiSelectChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeMultiSelectChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("MultiSelectChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addPaddingChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("PaddingChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removePaddingChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("PaddingChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addReadOnlyChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ReadOnlyChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeReadOnlyChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ReadOnlyChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowHeadersBorderStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowHeadersBorderStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowHeadersBorderStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowHeadersBorderStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowHeadersDefaultCellStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowHeadersDefaultCellStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowHeadersDefaultCellStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowHeadersDefaultCellStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowHeadersWidthChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowHeadersWidthChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowHeadersWidthChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowHeadersWidthChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowHeadersWidthSizeModeChanged(DataGridViewAutoSizeModeEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowHeadersWidthSizeModeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowHeadersWidthSizeModeChanged(DataGridViewAutoSizeModeEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowHeadersWidthSizeModeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowsDefaultCellStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowsDefaultCellStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowsDefaultCellStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowsDefaultCellStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addTextChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("TextChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeTextChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("TextChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addAutoSizeColumnModeChanged(DataGridViewAutoSizeColumnModeEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("AutoSizeColumnModeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeAutoSizeColumnModeChanged(DataGridViewAutoSizeColumnModeEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("AutoSizeColumnModeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCancelRowEdit(QuestionEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CancelRowEdit", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCancelRowEdit(QuestionEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CancelRowEdit", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellBeginEdit(DataGridViewCellCancelEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellBeginEdit", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellBeginEdit(DataGridViewCellCancelEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellBeginEdit", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellClick(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellClick(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellContentClick(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellContentClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellContentClick(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellContentClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellContentDoubleClick(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellContentDoubleClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellContentDoubleClick(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellContentDoubleClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellContextMenuStripChanged(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellContextMenuStripChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellContextMenuStripChanged(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellContextMenuStripChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellContextMenuStripNeeded(DataGridViewCellContextMenuStripNeededEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellContextMenuStripNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellContextMenuStripNeeded(DataGridViewCellContextMenuStripNeededEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellContextMenuStripNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellDoubleClick(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellDoubleClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellDoubleClick(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellDoubleClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellEndEdit(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellEndEdit", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellEndEdit(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellEndEdit", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellEnter(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellEnter", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellEnter(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellEnter", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellErrorTextChanged(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellErrorTextChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellErrorTextChanged(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellErrorTextChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellErrorTextNeeded(DataGridViewCellErrorTextNeededEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellErrorTextNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellErrorTextNeeded(DataGridViewCellErrorTextNeededEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellErrorTextNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellFormatting(DataGridViewCellFormattingEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellFormatting", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellFormatting(DataGridViewCellFormattingEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellFormatting", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellLeave(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellLeave", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellLeave(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellLeave", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellMouseClick(DataGridViewCellMouseEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellMouseClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellMouseClick(DataGridViewCellMouseEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellMouseClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellMouseDoubleClick(DataGridViewCellMouseEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellMouseDoubleClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellMouseDoubleClick(DataGridViewCellMouseEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellMouseDoubleClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellMouseDown(DataGridViewCellMouseEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellMouseDown", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellMouseDown(DataGridViewCellMouseEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellMouseDown", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellMouseEnter(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellMouseEnter", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellMouseEnter(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellMouseEnter", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellMouseLeave(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellMouseLeave", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellMouseLeave(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellMouseLeave", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellMouseMove(DataGridViewCellMouseEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellMouseMove", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellMouseMove(DataGridViewCellMouseEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellMouseMove", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellMouseUp(DataGridViewCellMouseEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellMouseUp", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellMouseUp(DataGridViewCellMouseEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellMouseUp", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellPainting(DataGridViewCellPaintingEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellPainting", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellPainting(DataGridViewCellPaintingEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellPainting", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellParsing(DataGridViewCellParsingEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellParsing", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellParsing(DataGridViewCellParsingEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellParsing", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellStateChanged(DataGridViewCellStateChangedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellStateChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellStateChanged(DataGridViewCellStateChangedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellStateChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellStyleChanged(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellStyleChanged(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellStyleContentChanged(DataGridViewCellStyleContentChangedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellStyleContentChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellStyleContentChanged(DataGridViewCellStyleContentChangedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellStyleContentChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellToolTipTextChanged(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellToolTipTextChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellToolTipTextChanged(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellToolTipTextChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellToolTipTextNeeded(DataGridViewCellToolTipTextNeededEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellToolTipTextNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellToolTipTextNeeded(DataGridViewCellToolTipTextNeededEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellToolTipTextNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellValidated(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellValidated", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellValidated(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellValidated", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellValidating(DataGridViewCellValidatingEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellValidating", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellValidating(DataGridViewCellValidatingEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellValidating", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellValueChanged(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellValueChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellValueChanged(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellValueChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellValueNeeded(DataGridViewCellValueEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellValueNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellValueNeeded(DataGridViewCellValueEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellValueNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCellValuePushed(DataGridViewCellValueEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CellValuePushed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCellValuePushed(DataGridViewCellValueEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CellValuePushed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnAdded(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnAdded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnAdded(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnAdded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnContextMenuStripChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnContextMenuStripChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnContextMenuStripChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnContextMenuStripChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnDataPropertyNameChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnDataPropertyNameChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnDataPropertyNameChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnDataPropertyNameChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnDefaultCellStyleChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnDefaultCellStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnDefaultCellStyleChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnDefaultCellStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnDisplayIndexChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnDisplayIndexChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnDisplayIndexChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnDisplayIndexChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnDividerDoubleClick(DataGridViewColumnDividerDoubleClickEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnDividerDoubleClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnDividerDoubleClick(DataGridViewColumnDividerDoubleClickEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnDividerDoubleClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnDividerWidthChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnDividerWidthChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnDividerWidthChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnDividerWidthChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnHeaderMouseClick(DataGridViewCellMouseEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnHeaderMouseClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnHeaderMouseClick(DataGridViewCellMouseEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnHeaderMouseClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnHeaderMouseDoubleClick(DataGridViewCellMouseEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnHeaderMouseDoubleClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnHeaderMouseDoubleClick(DataGridViewCellMouseEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnHeaderMouseDoubleClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnHeaderCellChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnHeaderCellChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnHeaderCellChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnHeaderCellChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnMinimumWidthChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnMinimumWidthChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnMinimumWidthChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnMinimumWidthChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnNameChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnNameChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnNameChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnNameChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnRemoved(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnRemoved", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnRemoved(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnRemoved", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnSortModeChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnSortModeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnSortModeChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnSortModeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnStateChanged(DataGridViewColumnStateChangedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnStateChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnStateChanged(DataGridViewColumnStateChangedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnStateChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnToolTipTextChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnToolTipTextChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnToolTipTextChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnToolTipTextChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addColumnWidthChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ColumnWidthChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeColumnWidthChanged(DataGridViewColumnEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ColumnWidthChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCurrentCellChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CurrentCellChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCurrentCellChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CurrentCellChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCurrentCellDirtyStateChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CurrentCellDirtyStateChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCurrentCellDirtyStateChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CurrentCellDirtyStateChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDataBindingComplete(DataGridViewBindingCompleteEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DataBindingComplete", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDataBindingComplete(DataGridViewBindingCompleteEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DataBindingComplete", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDataError(DataGridViewDataErrorEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DataError", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDataError(DataGridViewDataErrorEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DataError", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDefaultValuesNeeded(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DefaultValuesNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDefaultValuesNeeded(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DefaultValuesNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addEditingControlShowing(DataGridViewEditingControlShowingEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("EditingControlShowing", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeEditingControlShowing(DataGridViewEditingControlShowingEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("EditingControlShowing", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addNewRowNeeded(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("NewRowNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeNewRowNeeded(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("NewRowNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowContextMenuStripChanged(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowContextMenuStripChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowContextMenuStripChanged(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowContextMenuStripChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowContextMenuStripNeeded(DataGridViewRowContextMenuStripNeededEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowContextMenuStripNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowContextMenuStripNeeded(DataGridViewRowContextMenuStripNeededEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowContextMenuStripNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowDefaultCellStyleChanged(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowDefaultCellStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowDefaultCellStyleChanged(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowDefaultCellStyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowDirtyStateNeeded(QuestionEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowDirtyStateNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowDirtyStateNeeded(QuestionEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowDirtyStateNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowDividerDoubleClick(DataGridViewRowDividerDoubleClickEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowDividerDoubleClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowDividerDoubleClick(DataGridViewRowDividerDoubleClickEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowDividerDoubleClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowDividerHeightChanged(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowDividerHeightChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowDividerHeightChanged(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowDividerHeightChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowEnter(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowEnter", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowEnter(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowEnter", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowErrorTextChanged(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowErrorTextChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowErrorTextChanged(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowErrorTextChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowErrorTextNeeded(DataGridViewRowErrorTextNeededEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowErrorTextNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowErrorTextNeeded(DataGridViewRowErrorTextNeededEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowErrorTextNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowHeaderMouseClick(DataGridViewCellMouseEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowHeaderMouseClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowHeaderMouseClick(DataGridViewCellMouseEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowHeaderMouseClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowHeaderMouseDoubleClick(DataGridViewCellMouseEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowHeaderMouseDoubleClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowHeaderMouseDoubleClick(DataGridViewCellMouseEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowHeaderMouseDoubleClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowHeaderCellChanged(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowHeaderCellChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowHeaderCellChanged(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowHeaderCellChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowHeightChanged(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowHeightChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowHeightChanged(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowHeightChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowHeightInfoNeeded(DataGridViewRowHeightInfoNeededEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowHeightInfoNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowHeightInfoNeeded(DataGridViewRowHeightInfoNeededEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowHeightInfoNeeded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowHeightInfoPushed(DataGridViewRowHeightInfoPushedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowHeightInfoPushed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowHeightInfoPushed(DataGridViewRowHeightInfoPushedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowHeightInfoPushed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowLeave(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowLeave", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowLeave(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowLeave", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowMinimumHeightChanged(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowMinimumHeightChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowMinimumHeightChanged(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowMinimumHeightChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowPostPaint(DataGridViewRowPostPaintEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowPostPaint", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowPostPaint(DataGridViewRowPostPaintEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowPostPaint", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowPrePaint(DataGridViewRowPrePaintEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowPrePaint", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowPrePaint(DataGridViewRowPrePaintEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowPrePaint", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowsAdded(DataGridViewRowsAddedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowsAdded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowsAdded(DataGridViewRowsAddedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowsAdded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowsRemoved(DataGridViewRowsRemovedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowsRemoved", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowsRemoved(DataGridViewRowsRemovedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowsRemoved", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowStateChanged(DataGridViewRowStateChangedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowStateChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowStateChanged(DataGridViewRowStateChangedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowStateChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowUnshared(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowUnshared", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowUnshared(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowUnshared", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowValidated(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowValidated", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowValidated(DataGridViewCellEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowValidated", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRowValidating(DataGridViewCellCancelEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RowValidating", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRowValidating(DataGridViewCellCancelEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RowValidating", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addScroll(ScrollEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Scroll", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeScroll(ScrollEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Scroll", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addSelectionChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("SelectionChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeSelectionChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("SelectionChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addSortCompare(DataGridViewSortCompareEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("SortCompare", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeSortCompare(DataGridViewSortCompareEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("SortCompare", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addSorted(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Sorted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeSorted(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Sorted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("StyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeStyleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("StyleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addUserAddedRow(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("UserAddedRow", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeUserAddedRow(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("UserAddedRow", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addUserDeletedRow(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("UserDeletedRow", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeUserDeletedRow(DataGridViewRowEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("UserDeletedRow", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addUserDeletingRow(DataGridViewRowCancelEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("UserDeletingRow", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeUserDeletingRow(DataGridViewRowCancelEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("UserDeletingRow", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addAutoSizeChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("AutoSizeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeAutoSizeChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("AutoSizeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addBindingContextChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("BindingContextChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeBindingContextChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("BindingContextChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCausesValidationChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CausesValidationChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCausesValidationChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CausesValidationChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addClientSizeChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ClientSizeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeClientSizeChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ClientSizeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addContextMenuChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ContextMenuChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeContextMenuChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ContextMenuChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addContextMenuStripChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ContextMenuStripChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeContextMenuStripChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ContextMenuStripChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addCursorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("CursorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeCursorChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("CursorChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDockChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DockChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDockChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DockChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addEnabledChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("EnabledChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeEnabledChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("EnabledChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addLocationChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("LocationChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeLocationChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("LocationChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addMarginChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("MarginChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeMarginChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("MarginChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRegionChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RegionChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRegionChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RegionChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addRightToLeftChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("RightToLeftChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeRightToLeftChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("RightToLeftChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addSizeChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("SizeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeSizeChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("SizeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addTabIndexChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("TabIndexChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeTabIndexChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("TabIndexChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addTabStopChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("TabStopChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeTabStopChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("TabStopChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addVisibleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("VisibleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeVisibleChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("VisibleChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addClick(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Click", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeClick(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Click", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addControlAdded(ControlEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ControlAdded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeControlAdded(ControlEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ControlAdded", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addControlRemoved(ControlEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ControlRemoved", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeControlRemoved(ControlEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ControlRemoved", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDragDrop(DragEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DragDrop", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDragDrop(DragEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DragDrop", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDragEnter(DragEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DragEnter", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDragEnter(DragEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DragEnter", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDragOver(DragEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DragOver", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDragOver(DragEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DragOver", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDragLeave(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DragLeave", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDragLeave(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DragLeave", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addGiveFeedback(GiveFeedbackEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("GiveFeedback", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeGiveFeedback(GiveFeedbackEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("GiveFeedback", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addHandleCreated(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("HandleCreated", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeHandleCreated(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("HandleCreated", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addHandleDestroyed(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("HandleDestroyed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeHandleDestroyed(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("HandleDestroyed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addHelpRequested(HelpEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("HelpRequested", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeHelpRequested(HelpEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("HelpRequested", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addInvalidated(InvalidateEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Invalidated", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeInvalidated(InvalidateEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Invalidated", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addPaint(PaintEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Paint", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removePaint(PaintEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Paint", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addQueryContinueDrag(QueryContinueDragEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("QueryContinueDrag", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeQueryContinueDrag(QueryContinueDragEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("QueryContinueDrag", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addQueryAccessibilityHelp(QueryAccessibilityHelpEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("QueryAccessibilityHelp", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeQueryAccessibilityHelp(QueryAccessibilityHelpEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("QueryAccessibilityHelp", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDoubleClick(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DoubleClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDoubleClick(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DoubleClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addEnter(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Enter", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeEnter(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Enter", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addGotFocus(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("GotFocus", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeGotFocus(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("GotFocus", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addKeyDown(KeyEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("KeyDown", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeKeyDown(KeyEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("KeyDown", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addKeyPress(KeyPressEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("KeyPress", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeKeyPress(KeyPressEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("KeyPress", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addKeyUp(KeyEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("KeyUp", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeKeyUp(KeyEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("KeyUp", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addLayout(LayoutEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Layout", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeLayout(LayoutEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Layout", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addLeave(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Leave", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeLeave(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Leave", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addLostFocus(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("LostFocus", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeLostFocus(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("LostFocus", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addMouseClick(MouseEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("MouseClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeMouseClick(MouseEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("MouseClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addMouseDoubleClick(MouseEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("MouseDoubleClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeMouseDoubleClick(MouseEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("MouseDoubleClick", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addMouseCaptureChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("MouseCaptureChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeMouseCaptureChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("MouseCaptureChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addMouseDown(MouseEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("MouseDown", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeMouseDown(MouseEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("MouseDown", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addMouseEnter(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("MouseEnter", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeMouseEnter(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("MouseEnter", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addMouseLeave(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("MouseLeave", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeMouseLeave(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("MouseLeave", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDpiChangedBeforeParent(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DpiChangedBeforeParent", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDpiChangedBeforeParent(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DpiChangedBeforeParent", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDpiChangedAfterParent(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DpiChangedAfterParent", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDpiChangedAfterParent(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DpiChangedAfterParent", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addMouseHover(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("MouseHover", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeMouseHover(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("MouseHover", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addMouseMove(MouseEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("MouseMove", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeMouseMove(MouseEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("MouseMove", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addMouseUp(MouseEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("MouseUp", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeMouseUp(MouseEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("MouseUp", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addMouseWheel(MouseEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("MouseWheel", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeMouseWheel(MouseEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("MouseWheel", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addMove(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Move", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeMove(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Move", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addPreviewKeyDown(PreviewKeyDownEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("PreviewKeyDown", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removePreviewKeyDown(PreviewKeyDownEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("PreviewKeyDown", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addResize(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Resize", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeResize(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Resize", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addChangeUICues(UICuesEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ChangeUICues", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeChangeUICues(UICuesEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ChangeUICues", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addSystemColorsChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("SystemColorsChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeSystemColorsChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("SystemColorsChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addValidating(CancelEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Validating", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeValidating(CancelEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Validating", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addValidated(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Validated", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeValidated(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Validated", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addParentChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ParentChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeParentChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ParentChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addImeModeChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ImeModeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeImeModeChanged(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ImeModeChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


}