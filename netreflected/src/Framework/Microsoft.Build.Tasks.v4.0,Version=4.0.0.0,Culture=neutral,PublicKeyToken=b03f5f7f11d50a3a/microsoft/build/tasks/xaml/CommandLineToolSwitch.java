/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.build.tasks.xaml;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.build.tasks.xaml.CommandLineToolSwitchType;


/**
 * The base .NET class managing Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch, Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class CommandLineToolSwitch extends NetObject  {
    public static final String assemblyFullName = "Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "Microsoft.Build.Tasks.v4.0";
    public static final String className = "Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CommandLineToolSwitch(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static CommandLineToolSwitch castFrom(IJCOBridgeReflected from) throws Throwable {
        return new CommandLineToolSwitch(from.getJCOInstance());
    }

    // Constructors section
    
    
    public CommandLineToolSwitch() throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CommandLineToolSwitch(CommandLineToolSwitchType toolType) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)toolType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    

    
    // Properties section
    
    
    public java.lang.String getName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Name");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setName(java.lang.String Name) throws Throwable {
        try {
            classInstance.Set("Name", (Object)Name);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIncludeInCommandLine() throws Throwable {
        try {
            return (boolean)classInstance.Get("IncludeInCommandLine");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIncludeInCommandLine(boolean IncludeInCommandLine) throws Throwable {
        try {
            classInstance.Set("IncludeInCommandLine", IncludeInCommandLine);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getValue() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Value");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setValue(java.lang.String Value) throws Throwable {
        try {
            classInstance.Set("Value", (Object)Value);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsValid() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsValid");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIsValid(boolean IsValid) throws Throwable {
        try {
            classInstance.Set("IsValid", IsValid);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSwitchValue() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("SwitchValue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSwitchValue(java.lang.String SwitchValue) throws Throwable {
        try {
            classInstance.Set("SwitchValue", (Object)SwitchValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getReverseSwitchValue() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ReverseSwitchValue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReverseSwitchValue(java.lang.String ReverseSwitchValue) throws Throwable {
        try {
            classInstance.Set("ReverseSwitchValue", (Object)ReverseSwitchValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDisplayName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("DisplayName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDisplayName(java.lang.String DisplayName) throws Throwable {
        try {
            classInstance.Set("DisplayName", (Object)DisplayName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDescription() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Description");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDescription(java.lang.String Description) throws Throwable {
        try {
            classInstance.Set("Description", (Object)Description);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CommandLineToolSwitchType getType() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Type");
            return new CommandLineToolSwitchType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setType(CommandLineToolSwitchType Type) throws Throwable {
        try {
            classInstance.Set("Type", (Object)Type.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getReversible() throws Throwable {
        try {
            return (boolean)classInstance.Get("Reversible");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setReversible(boolean Reversible) throws Throwable {
        try {
            classInstance.Set("Reversible", Reversible);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowMultipleValues() throws Throwable {
        try {
            return (boolean)classInstance.Get("AllowMultipleValues");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowMultipleValues(boolean AllowMultipleValues) throws Throwable {
        try {
            classInstance.Set("AllowMultipleValues", AllowMultipleValues);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getFalseSuffix() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("FalseSuffix");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFalseSuffix(java.lang.String FalseSuffix) throws Throwable {
        try {
            classInstance.Set("FalseSuffix", (Object)FalseSuffix);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTrueSuffix() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("TrueSuffix");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTrueSuffix(java.lang.String TrueSuffix) throws Throwable {
        try {
            classInstance.Set("TrueSuffix", (Object)TrueSuffix);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSeparator() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Separator");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSeparator(java.lang.String Separator) throws Throwable {
        try {
            classInstance.Set("Separator", (Object)Separator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getFallbackArgumentParameter() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("FallbackArgumentParameter");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setFallbackArgumentParameter(java.lang.String FallbackArgumentParameter) throws Throwable {
        try {
            classInstance.Set("FallbackArgumentParameter", (Object)FallbackArgumentParameter);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getArgumentRequired() throws Throwable {
        try {
            return (boolean)classInstance.Get("ArgumentRequired");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setArgumentRequired(boolean ArgumentRequired) throws Throwable {
        try {
            classInstance.Set("ArgumentRequired", ArgumentRequired);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRequired() throws Throwable {
        try {
            return (boolean)classInstance.Get("Required");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRequired(boolean Required) throws Throwable {
        try {
            classInstance.Set("Required", Required);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getBooleanValue() throws Throwable {
        try {
            return (boolean)classInstance.Get("BooleanValue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBooleanValue(boolean BooleanValue) throws Throwable {
        try {
            classInstance.Set("BooleanValue", BooleanValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getNumber() throws Throwable {
        try {
            return (int)classInstance.Get("Number");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setNumber(int Number) throws Throwable {
        try {
            classInstance.Set("Number", Number);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String[] getStringList() throws Throwable {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("StringList");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
			for(int indexStringList = 0; indexStringList < resultingArrayList.size(); indexStringList++ ) {
				resultingArray[indexStringList] = (java.lang.String)resultingArrayList.get(indexStringList);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStringList(java.lang.String[] StringList) throws Throwable {
        try {
            classInstance.Set("StringList", (Object)StringList);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}