/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.numerics;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.Single;
import system.numerics.Matrix3x2;
import system.numerics.Vector2;


/**
 * The base .NET class managing System.Numerics.Matrix3x2, System.Numerics.Vectors, Version=4.1.6.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class Matrix3x2 extends NetObject  {
    public static final String assemblyFullName = "System.Numerics.Vectors, Version=4.1.6.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Numerics.Vectors";
    public static final String className = "System.Numerics.Matrix3x2";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Matrix3x2(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static Matrix3x2 castFrom(IJCOBridgeReflected from) throws Throwable {
        return new Matrix3x2(from.getJCOInstance());
    }

    // Constructors section
    
    
    public Matrix3x2(Single m11, Single m12, Single m21, Single m22, Single m31, Single m32) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)m11.getJCOInstance(), (Object)m12.getJCOInstance(), (Object)m21.getJCOInstance(), (Object)m22.getJCOInstance(), (Object)m31.getJCOInstance(), (Object)m32.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public static Matrix3x2 CreateTranslation(Vector2 position) throws Throwable {
        try {
            JCObject objCreateTranslation = (JCObject)classType.Invoke("CreateTranslation", (Object)position.getJCOInstance());
            return new Matrix3x2(objCreateTranslation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Matrix3x2 CreateTranslation(Single xPosition, Single yPosition) throws Throwable {
        try {
            JCObject objCreateTranslation = (JCObject)classType.Invoke("CreateTranslation", (Object)xPosition.getJCOInstance(), (Object)yPosition.getJCOInstance());
            return new Matrix3x2(objCreateTranslation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Matrix3x2 CreateScale(Single xScale, Single yScale) throws Throwable {
        try {
            JCObject objCreateScale = (JCObject)classType.Invoke("CreateScale", (Object)xScale.getJCOInstance(), (Object)yScale.getJCOInstance());
            return new Matrix3x2(objCreateScale);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Matrix3x2 CreateScale(Single xScale, Single yScale, Vector2 centerPoint) throws Throwable {
        try {
            JCObject objCreateScale = (JCObject)classType.Invoke("CreateScale", (Object)xScale.getJCOInstance(), (Object)yScale.getJCOInstance(), (Object)centerPoint.getJCOInstance());
            return new Matrix3x2(objCreateScale);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Matrix3x2 CreateScale(Vector2 scales) throws Throwable {
        try {
            JCObject objCreateScale = (JCObject)classType.Invoke("CreateScale", (Object)scales.getJCOInstance());
            return new Matrix3x2(objCreateScale);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Matrix3x2 CreateScale(Vector2 scales, Vector2 centerPoint) throws Throwable {
        try {
            JCObject objCreateScale = (JCObject)classType.Invoke("CreateScale", (Object)scales.getJCOInstance(), (Object)centerPoint.getJCOInstance());
            return new Matrix3x2(objCreateScale);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Matrix3x2 CreateScale(Single scale) throws Throwable {
        try {
            JCObject objCreateScale = (JCObject)classType.Invoke("CreateScale", (Object)scale.getJCOInstance());
            return new Matrix3x2(objCreateScale);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Matrix3x2 CreateScale(Single scale, Vector2 centerPoint) throws Throwable {
        try {
            JCObject objCreateScale = (JCObject)classType.Invoke("CreateScale", (Object)scale.getJCOInstance(), (Object)centerPoint.getJCOInstance());
            return new Matrix3x2(objCreateScale);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Matrix3x2 CreateSkew(Single radiansX, Single radiansY) throws Throwable {
        try {
            JCObject objCreateSkew = (JCObject)classType.Invoke("CreateSkew", (Object)radiansX.getJCOInstance(), (Object)radiansY.getJCOInstance());
            return new Matrix3x2(objCreateSkew);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Matrix3x2 CreateSkew(Single radiansX, Single radiansY, Vector2 centerPoint) throws Throwable {
        try {
            JCObject objCreateSkew = (JCObject)classType.Invoke("CreateSkew", (Object)radiansX.getJCOInstance(), (Object)radiansY.getJCOInstance(), (Object)centerPoint.getJCOInstance());
            return new Matrix3x2(objCreateSkew);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Matrix3x2 CreateRotation(Single radians) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.ArithmeticException {
        try {
            JCObject objCreateRotation = (JCObject)classType.Invoke("CreateRotation", (Object)radians.getJCOInstance());
            return new Matrix3x2(objCreateRotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Matrix3x2 CreateRotation(Single radians, Vector2 centerPoint) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.ArithmeticException {
        try {
            JCObject objCreateRotation = (JCObject)classType.Invoke("CreateRotation", (Object)radians.getJCOInstance(), (Object)centerPoint.getJCOInstance());
            return new Matrix3x2(objCreateRotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Single GetDeterminant() throws Throwable {
        try {
            JCObject objGetDeterminant = (JCObject)classInstance.Invoke("GetDeterminant");
            return new Single(objGetDeterminant);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Matrix3x2 Lerp(Matrix3x2 matrix1, Matrix3x2 matrix2, Single amount) throws Throwable {
        try {
            JCObject objLerp = (JCObject)classType.Invoke("Lerp", (Object)matrix1.getJCOInstance(), (Object)matrix2.getJCOInstance(), (Object)amount.getJCOInstance());
            return new Matrix3x2(objLerp);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Matrix3x2 Negate(Matrix3x2 value) throws Throwable {
        try {
            JCObject objNegate = (JCObject)classType.Invoke("Negate", (Object)value.getJCOInstance());
            return new Matrix3x2(objNegate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Matrix3x2 Add(Matrix3x2 value1, Matrix3x2 value2) throws Throwable {
        try {
            JCObject objAdd = (JCObject)classType.Invoke("Add", (Object)value1.getJCOInstance(), (Object)value2.getJCOInstance());
            return new Matrix3x2(objAdd);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Matrix3x2 Subtract(Matrix3x2 value1, Matrix3x2 value2) throws Throwable {
        try {
            JCObject objSubtract = (JCObject)classType.Invoke("Subtract", (Object)value1.getJCOInstance(), (Object)value2.getJCOInstance());
            return new Matrix3x2(objSubtract);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Matrix3x2 Multiply(Matrix3x2 value1, Matrix3x2 value2) throws Throwable {
        try {
            JCObject objMultiply = (JCObject)classType.Invoke("Multiply", (Object)value1.getJCOInstance(), (Object)value2.getJCOInstance());
            return new Matrix3x2(objMultiply);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Matrix3x2 Multiply(Matrix3x2 value1, Single value2) throws Throwable {
        try {
            JCObject objMultiply = (JCObject)classType.Invoke("Multiply", (Object)value1.getJCOInstance(), (Object)value2.getJCOInstance());
            return new Matrix3x2(objMultiply);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Equals(Matrix3x2 other) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("Equals", (Object)other.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public boolean getIsIdentity() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsIdentity");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Vector2 getTranslation() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Translation");
            return new Vector2(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTranslation(Vector2 Translation) throws Throwable {
        try {
            classInstance.Set("Translation", (Object)Translation.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Matrix3x2 getIdentity() throws Throwable {
        try {
            JCObject val = (JCObject)classType.Get("Identity");
            return new Matrix3x2(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}