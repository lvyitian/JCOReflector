/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.net;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.Uri;
import system.collections.specialized.NameValueCollection;
import system.threading.tasks.Task;
import system.io.Stream;
import system.text.Encoding;
import system.net.WebHeaderCollection;
import system.net.cache.RequestCachePolicy;
import system.net.DownloadStringCompletedEventHandler;
import system.net.DownloadDataCompletedEventHandler;
import system.componentmodel.AsyncCompletedEventHandler;
import system.net.UploadStringCompletedEventHandler;
import system.net.UploadDataCompletedEventHandler;
import system.net.UploadFileCompletedEventHandler;
import system.net.UploadValuesCompletedEventHandler;
import system.net.OpenReadCompletedEventHandler;
import system.net.OpenWriteCompletedEventHandler;
import system.net.DownloadProgressChangedEventHandler;
import system.net.UploadProgressChangedEventHandler;
import system.net.WriteStreamClosedEventHandler;
import system.EventHandler;


/**
 * The base .NET class managing System.Net.WebClient, System.Net.WebClient, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51. Extends {@link NetObject}.
 */
public class WebClient extends NetObject  {
    public static final String assemblyFullName = "System.Net.WebClient, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51";
	public static final String assemblyShortName = "System.Net.WebClient";
    public static final String className = "System.Net.WebClient";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebClient(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static WebClient castFrom(IJCOBridgeReflected from) throws Throwable {
        return new WebClient(from.getJCOInstance());
    }

    // Constructors section
    
    
    public WebClient() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public java.lang.String DownloadString(Uri address) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.FormatException, system.net.WebException {
        try {
            return (java.lang.String)classInstance.Invoke("DownloadString", (Object)address.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void OpenReadAsync(Uri address) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.FormatException {
        try {
            classInstance.Invoke("OpenReadAsync", (Object)address.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void OpenReadAsync(Uri address, NetObject userToken) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.FormatException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("OpenReadAsync", (Object)address.getJCOInstance(), (Object)userToken.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void OpenWriteAsync(Uri address) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.FormatException {
        try {
            classInstance.Invoke("OpenWriteAsync", (Object)address.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void OpenWriteAsync(Uri address, java.lang.String method) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.FormatException {
        try {
            classInstance.Invoke("OpenWriteAsync", (Object)address.getJCOInstance(), (Object)method);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void OpenWriteAsync(Uri address, java.lang.String method, NetObject userToken) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.FormatException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("OpenWriteAsync", (Object)address.getJCOInstance(), (Object)method, (Object)userToken.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DownloadStringAsync(Uri address) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.FormatException {
        try {
            classInstance.Invoke("DownloadStringAsync", (Object)address.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DownloadStringAsync(Uri address, NetObject userToken) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.FormatException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("DownloadStringAsync", (Object)address.getJCOInstance(), (Object)userToken.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DownloadDataAsync(Uri address) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.FormatException {
        try {
            classInstance.Invoke("DownloadDataAsync", (Object)address.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DownloadDataAsync(Uri address, NetObject userToken) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.FormatException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("DownloadDataAsync", (Object)address.getJCOInstance(), (Object)userToken.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DownloadFileAsync(Uri address, java.lang.String fileName) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.runtime.serialization.SerializationException, system.ObjectDisposedException, system.io.IOException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.FormatException {
        try {
            classInstance.Invoke("DownloadFileAsync", (Object)address.getJCOInstance(), (Object)fileName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DownloadFileAsync(Uri address, java.lang.String fileName, NetObject userToken) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.runtime.serialization.SerializationException, system.io.IOException, system.UriFormatException, system.FormatException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("DownloadFileAsync", (Object)address.getJCOInstance(), (Object)fileName, (Object)userToken.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UploadStringAsync(Uri address, java.lang.String data) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.FormatException {
        try {
            classInstance.Invoke("UploadStringAsync", (Object)address.getJCOInstance(), (Object)data);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UploadStringAsync(Uri address, java.lang.String method, java.lang.String data) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.FormatException {
        try {
            classInstance.Invoke("UploadStringAsync", (Object)address.getJCOInstance(), (Object)method, (Object)data);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UploadStringAsync(Uri address, java.lang.String method, java.lang.String data, NetObject userToken) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.FormatException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("UploadStringAsync", (Object)address.getJCOInstance(), (Object)method, (Object)data, (Object)userToken.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UploadDataAsync(Uri address, byte[] data) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.FormatException {
        try {
            classInstance.Invoke("UploadDataAsync", (Object)address.getJCOInstance(), data);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UploadDataAsync(Uri address, java.lang.String method, byte[] data) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.FormatException {
        try {
            classInstance.Invoke("UploadDataAsync", (Object)address.getJCOInstance(), (Object)method, data);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UploadDataAsync(Uri address, java.lang.String method, byte[] data, NetObject userToken) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.FormatException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("UploadDataAsync", (Object)address.getJCOInstance(), (Object)method, data, (Object)userToken.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UploadFileAsync(Uri address, java.lang.String fileName) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.net.WebException, system.runtime.serialization.SerializationException, system.ObjectDisposedException, system.io.IOException, system.InvalidTimeZoneException, system.OverflowException, system.FormatException {
        try {
            classInstance.Invoke("UploadFileAsync", (Object)address.getJCOInstance(), (Object)fileName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UploadFileAsync(Uri address, java.lang.String method, java.lang.String fileName) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.net.WebException, system.runtime.serialization.SerializationException, system.ObjectDisposedException, system.io.IOException, system.InvalidTimeZoneException, system.OverflowException, system.FormatException {
        try {
            classInstance.Invoke("UploadFileAsync", (Object)address.getJCOInstance(), (Object)method, (Object)fileName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UploadFileAsync(Uri address, java.lang.String method, java.lang.String fileName, NetObject userToken) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.FormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.net.WebException, system.runtime.serialization.SerializationException, system.io.IOException, system.InvalidTimeZoneException, system.OverflowException, system.security.SecurityException {
        try {
            classInstance.Invoke("UploadFileAsync", (Object)address.getJCOInstance(), (Object)method, (Object)fileName, (Object)userToken.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UploadValuesAsync(Uri address, NameValueCollection data) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.net.WebException, system.FormatException {
        try {
            classInstance.Invoke("UploadValuesAsync", (Object)address.getJCOInstance(), (Object)data.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UploadValuesAsync(Uri address, java.lang.String method, NameValueCollection data) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.net.WebException, system.FormatException {
        try {
            classInstance.Invoke("UploadValuesAsync", (Object)address.getJCOInstance(), (Object)method, (Object)data.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UploadValuesAsync(Uri address, java.lang.String method, NameValueCollection data, NetObject userToken) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.FormatException, system.OutOfMemoryException, system.net.WebException {
        try {
            classInstance.Invoke("UploadValuesAsync", (Object)address.getJCOInstance(), (Object)method, (Object)data.getJCOInstance(), (Object)userToken.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void CancelAsync() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException {
        try {
            classInstance.Invoke("CancelAsync");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task DownloadFileTaskAsync(java.lang.String address, java.lang.String fileName) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.UriFormatException, system.OutOfMemoryException, system.threading.tasks.TaskSchedulerException, system.MulticastNotSupportedException, system.runtime.serialization.SerializationException, system.ObjectDisposedException, system.io.IOException {
        try {
            JCObject objDownloadFileTaskAsync = (JCObject)classInstance.Invoke("DownloadFileTaskAsync", (Object)address, (Object)fileName);
            return new Task(objDownloadFileTaskAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task DownloadFileTaskAsync(Uri address, java.lang.String fileName) throws Throwable, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.NotSupportedException, system.runtime.serialization.SerializationException, system.io.IOException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.FormatException {
        try {
            JCObject objDownloadFileTaskAsync = (JCObject)classInstance.Invoke("DownloadFileTaskAsync", (Object)address.getJCOInstance(), (Object)fileName);
            return new Task(objDownloadFileTaskAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] DownloadData(java.lang.String address) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.UriFormatException, system.OutOfMemoryException, system.net.WebException {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("DownloadData", (Object)address);
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexDownloadData = 0; indexDownloadData < resultingArrayList.size(); indexDownloadData++ ) {
				resultingArray[indexDownloadData] = (byte)resultingArrayList.get(indexDownloadData);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] DownloadData(Uri address) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.FormatException, system.net.WebException {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("DownloadData", (Object)address.getJCOInstance());
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexDownloadData = 0; indexDownloadData < resultingArrayList.size(); indexDownloadData++ ) {
				resultingArray[indexDownloadData] = (byte)resultingArrayList.get(indexDownloadData);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DownloadFile(java.lang.String address, java.lang.String fileName) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.UriFormatException, system.OutOfMemoryException, system.runtime.serialization.SerializationException, system.ObjectDisposedException, system.io.IOException, system.net.WebException {
        try {
            classInstance.Invoke("DownloadFile", (Object)address, (Object)fileName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DownloadFile(Uri address, java.lang.String fileName) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.runtime.serialization.SerializationException, system.io.IOException, system.UriFormatException, system.FormatException, system.OutOfMemoryException, system.net.WebException {
        try {
            classInstance.Invoke("DownloadFile", (Object)address.getJCOInstance(), (Object)fileName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Stream OpenRead(java.lang.String address) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.UriFormatException, system.OutOfMemoryException, system.net.WebException {
        try {
            JCObject objOpenRead = (JCObject)classInstance.Invoke("OpenRead", (Object)address);
            return new Stream(objOpenRead);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Stream OpenRead(Uri address) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.FormatException, system.OutOfMemoryException, system.net.WebException {
        try {
            JCObject objOpenRead = (JCObject)classInstance.Invoke("OpenRead", (Object)address.getJCOInstance());
            return new Stream(objOpenRead);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Stream OpenWrite(java.lang.String address) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.UriFormatException, system.OutOfMemoryException, system.net.WebException {
        try {
            JCObject objOpenWrite = (JCObject)classInstance.Invoke("OpenWrite", (Object)address);
            return new Stream(objOpenWrite);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Stream OpenWrite(Uri address) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.FormatException, system.net.WebException {
        try {
            JCObject objOpenWrite = (JCObject)classInstance.Invoke("OpenWrite", (Object)address.getJCOInstance());
            return new Stream(objOpenWrite);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Stream OpenWrite(java.lang.String address, java.lang.String method) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.UriFormatException, system.OutOfMemoryException, system.net.WebException {
        try {
            JCObject objOpenWrite = (JCObject)classInstance.Invoke("OpenWrite", (Object)address, (Object)method);
            return new Stream(objOpenWrite);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Stream OpenWrite(Uri address, java.lang.String method) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.FormatException, system.OutOfMemoryException, system.net.WebException {
        try {
            JCObject objOpenWrite = (JCObject)classInstance.Invoke("OpenWrite", (Object)address.getJCOInstance(), (Object)method);
            return new Stream(objOpenWrite);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] UploadData(java.lang.String address, byte[] data) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.UriFormatException, system.OutOfMemoryException, system.net.WebException {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("UploadData", (Object)address, data);
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexUploadData = 0; indexUploadData < resultingArrayList.size(); indexUploadData++ ) {
				resultingArray[indexUploadData] = (byte)resultingArrayList.get(indexUploadData);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] UploadData(Uri address, byte[] data) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.net.WebException {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("UploadData", (Object)address.getJCOInstance(), data);
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexUploadData = 0; indexUploadData < resultingArrayList.size(); indexUploadData++ ) {
				resultingArray[indexUploadData] = (byte)resultingArrayList.get(indexUploadData);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] UploadData(java.lang.String address, java.lang.String method, byte[] data) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.UriFormatException, system.OutOfMemoryException, system.net.WebException {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("UploadData", (Object)address, (Object)method, data);
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexUploadData = 0; indexUploadData < resultingArrayList.size(); indexUploadData++ ) {
				resultingArray[indexUploadData] = (byte)resultingArrayList.get(indexUploadData);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] UploadData(Uri address, java.lang.String method, byte[] data) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.FormatException, system.OutOfMemoryException, system.net.WebException {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("UploadData", (Object)address.getJCOInstance(), (Object)method, data);
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexUploadData = 0; indexUploadData < resultingArrayList.size(); indexUploadData++ ) {
				resultingArray[indexUploadData] = (byte)resultingArrayList.get(indexUploadData);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] UploadFile(java.lang.String address, java.lang.String fileName) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.UriFormatException, system.OutOfMemoryException, system.net.WebException, system.runtime.serialization.SerializationException, system.io.IOException, system.OverflowException {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("UploadFile", (Object)address, (Object)fileName);
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexUploadFile = 0; indexUploadFile < resultingArrayList.size(); indexUploadFile++ ) {
				resultingArray[indexUploadFile] = (byte)resultingArrayList.get(indexUploadFile);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] UploadFile(Uri address, java.lang.String fileName) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.net.WebException, system.runtime.serialization.SerializationException, system.ObjectDisposedException, system.io.IOException, system.InvalidTimeZoneException, system.OverflowException, system.FormatException {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("UploadFile", (Object)address.getJCOInstance(), (Object)fileName);
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexUploadFile = 0; indexUploadFile < resultingArrayList.size(); indexUploadFile++ ) {
				resultingArray[indexUploadFile] = (byte)resultingArrayList.get(indexUploadFile);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] UploadFile(java.lang.String address, java.lang.String method, java.lang.String fileName) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.UriFormatException, system.OutOfMemoryException, system.net.WebException, system.runtime.serialization.SerializationException, system.ObjectDisposedException, system.io.IOException, system.InvalidTimeZoneException, system.OverflowException {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("UploadFile", (Object)address, (Object)method, (Object)fileName);
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexUploadFile = 0; indexUploadFile < resultingArrayList.size(); indexUploadFile++ ) {
				resultingArray[indexUploadFile] = (byte)resultingArrayList.get(indexUploadFile);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] UploadFile(Uri address, java.lang.String method, java.lang.String fileName) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.FormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.net.WebException, system.runtime.serialization.SerializationException, system.io.IOException, system.InvalidTimeZoneException, system.OverflowException, system.security.SecurityException {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("UploadFile", (Object)address.getJCOInstance(), (Object)method, (Object)fileName);
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexUploadFile = 0; indexUploadFile < resultingArrayList.size(); indexUploadFile++ ) {
				resultingArray[indexUploadFile] = (byte)resultingArrayList.get(indexUploadFile);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] UploadValues(java.lang.String address, NameValueCollection data) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.UriFormatException, system.OutOfMemoryException, system.net.WebException {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("UploadValues", (Object)address, (Object)data.getJCOInstance());
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexUploadValues = 0; indexUploadValues < resultingArrayList.size(); indexUploadValues++ ) {
				resultingArray[indexUploadValues] = (byte)resultingArrayList.get(indexUploadValues);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] UploadValues(Uri address, NameValueCollection data) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.net.WebException, system.FormatException {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("UploadValues", (Object)address.getJCOInstance(), (Object)data.getJCOInstance());
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexUploadValues = 0; indexUploadValues < resultingArrayList.size(); indexUploadValues++ ) {
				resultingArray[indexUploadValues] = (byte)resultingArrayList.get(indexUploadValues);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] UploadValues(java.lang.String address, java.lang.String method, NameValueCollection data) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.UriFormatException, system.OutOfMemoryException, system.net.WebException {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("UploadValues", (Object)address, (Object)method, (Object)data.getJCOInstance());
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexUploadValues = 0; indexUploadValues < resultingArrayList.size(); indexUploadValues++ ) {
				resultingArray[indexUploadValues] = (byte)resultingArrayList.get(indexUploadValues);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] UploadValues(Uri address, java.lang.String method, NameValueCollection data) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.FormatException, system.OutOfMemoryException, system.net.WebException {
        try {
            ArrayList<Object> resultingArrayList = new ArrayList<Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("UploadValues", (Object)address.getJCOInstance(), (Object)method, (Object)data.getJCOInstance());
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexUploadValues = 0; indexUploadValues < resultingArrayList.size(); indexUploadValues++ ) {
				resultingArray[indexUploadValues] = (byte)resultingArrayList.get(indexUploadValues);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String UploadString(java.lang.String address, java.lang.String data) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.UriFormatException, system.OutOfMemoryException, system.net.WebException {
        try {
            return (java.lang.String)classInstance.Invoke("UploadString", (Object)address, (Object)data);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String UploadString(Uri address, java.lang.String data) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.net.WebException {
        try {
            return (java.lang.String)classInstance.Invoke("UploadString", (Object)address.getJCOInstance(), (Object)data);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String UploadString(java.lang.String address, java.lang.String method, java.lang.String data) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.UriFormatException, system.OutOfMemoryException, system.net.WebException {
        try {
            return (java.lang.String)classInstance.Invoke("UploadString", (Object)address, (Object)method, (Object)data);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String UploadString(Uri address, java.lang.String method, java.lang.String data) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.UriFormatException, system.FormatException, system.OutOfMemoryException, system.net.WebException {
        try {
            return (java.lang.String)classInstance.Invoke("UploadString", (Object)address.getJCOInstance(), (Object)method, (Object)data);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String DownloadString(java.lang.String address) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.FormatException, system.UriFormatException, system.OutOfMemoryException, system.net.WebException {
        try {
            return (java.lang.String)classInstance.Invoke("DownloadString", (Object)address);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Dispose() throws Throwable, system.IndexOutOfRangeException, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException {
        try {
            classInstance.Invoke("Dispose");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.NotSupportedException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            JCObject objGetLifetimeService = (JCObject)classInstance.Invoke("GetLifetimeService");
            return new NetObject(objGetLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject InitializeLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.NotSupportedException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            JCObject objInitializeLifetimeService = (JCObject)classInstance.Invoke("InitializeLifetimeService");
            return new NetObject(objInitializeLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public Encoding getEncoding() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Encoding");
            return new Encoding(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEncoding(Encoding Encoding) throws Throwable {
        try {
            classInstance.Set("Encoding", (Object)Encoding.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getBaseAddress() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("BaseAddress");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBaseAddress(java.lang.String BaseAddress) throws Throwable {
        try {
            classInstance.Set("BaseAddress", (Object)BaseAddress);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseDefaultCredentials() throws Throwable {
        try {
            return (boolean)classInstance.Get("UseDefaultCredentials");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseDefaultCredentials(boolean UseDefaultCredentials) throws Throwable {
        try {
            classInstance.Set("UseDefaultCredentials", UseDefaultCredentials);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebHeaderCollection getHeaders() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Headers");
            return new WebHeaderCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHeaders(WebHeaderCollection Headers) throws Throwable {
        try {
            classInstance.Set("Headers", (Object)Headers.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NameValueCollection getQueryString() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("QueryString");
            return new NameValueCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setQueryString(NameValueCollection QueryString) throws Throwable {
        try {
            classInstance.Set("QueryString", (Object)QueryString.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WebHeaderCollection getResponseHeaders() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ResponseHeaders");
            return new WebHeaderCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RequestCachePolicy getCachePolicy() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CachePolicy");
            return new RequestCachePolicy(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCachePolicy(RequestCachePolicy CachePolicy) throws Throwable {
        try {
            classInstance.Set("CachePolicy", (Object)CachePolicy.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsBusy() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsBusy");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowReadStreamBuffering() throws Throwable {
        try {
            return (boolean)classInstance.Get("AllowReadStreamBuffering");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowReadStreamBuffering(boolean AllowReadStreamBuffering) throws Throwable {
        try {
            classInstance.Set("AllowReadStreamBuffering", AllowReadStreamBuffering);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowWriteStreamBuffering() throws Throwable {
        try {
            return (boolean)classInstance.Get("AllowWriteStreamBuffering");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowWriteStreamBuffering(boolean AllowWriteStreamBuffering) throws Throwable {
        try {
            classInstance.Set("AllowWriteStreamBuffering", AllowWriteStreamBuffering);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
    public void addDownloadStringCompleted(DownloadStringCompletedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DownloadStringCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDownloadStringCompleted(DownloadStringCompletedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DownloadStringCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDownloadDataCompleted(DownloadDataCompletedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DownloadDataCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDownloadDataCompleted(DownloadDataCompletedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DownloadDataCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDownloadFileCompleted(AsyncCompletedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DownloadFileCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDownloadFileCompleted(AsyncCompletedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DownloadFileCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addUploadStringCompleted(UploadStringCompletedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("UploadStringCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeUploadStringCompleted(UploadStringCompletedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("UploadStringCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addUploadDataCompleted(UploadDataCompletedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("UploadDataCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeUploadDataCompleted(UploadDataCompletedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("UploadDataCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addUploadFileCompleted(UploadFileCompletedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("UploadFileCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeUploadFileCompleted(UploadFileCompletedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("UploadFileCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addUploadValuesCompleted(UploadValuesCompletedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("UploadValuesCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeUploadValuesCompleted(UploadValuesCompletedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("UploadValuesCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addOpenReadCompleted(OpenReadCompletedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("OpenReadCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeOpenReadCompleted(OpenReadCompletedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("OpenReadCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addOpenWriteCompleted(OpenWriteCompletedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("OpenWriteCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeOpenWriteCompleted(OpenWriteCompletedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("OpenWriteCompleted", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDownloadProgressChanged(DownloadProgressChangedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("DownloadProgressChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDownloadProgressChanged(DownloadProgressChangedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("DownloadProgressChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addUploadProgressChanged(UploadProgressChangedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("UploadProgressChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeUploadProgressChanged(UploadProgressChangedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("UploadProgressChanged", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addWriteStreamClosed(WriteStreamClosedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("WriteStreamClosed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeWriteStreamClosed(WriteStreamClosedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("WriteStreamClosed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


}