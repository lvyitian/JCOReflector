/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.text;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.text.StringBuilder;
import system.SByte;
import system.Single;
import system.Decimal;
import system.UInt16;
import system.UInt32;
import system.UInt64;


/**
 * The base .NET class managing System.Text.StringBuilder, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class StringBuilder extends NetObject  {
    public static final String assemblyFullName = "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "mscorlib";
    public static final String className = "System.Text.StringBuilder";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static StringBuilder castFrom(IJCOBridgeReflected from) throws Throwable {
        return new StringBuilder(from.getJCOInstance());
    }

    // Constructors section
    
    
    public StringBuilder() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.FormatException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder(int capacity) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentOutOfRangeException, system.FormatException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject(capacity);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder(java.lang.String value) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.ArgumentOutOfRangeException, system.FormatException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)value);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder(java.lang.String value, int capacity) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)value, capacity);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder(java.lang.String value, int startIndex, int length, int capacity) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject((Object)value, startIndex, length, capacity);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder(int capacity, int maxCapacity) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.OutOfMemoryException, system.FormatException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject(capacity, maxCapacity);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public int EnsureCapacity(int capacity) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException {
        try {
            return (int)classInstance.Invoke("EnsureCapacity", capacity);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String ToString(int startIndex, int length) throws Throwable, system.ArgumentOutOfRangeException {
        try {
            return (java.lang.String)classInstance.Invoke("ToString", startIndex, length);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Clear() throws Throwable, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException, system.ArgumentNullException {
        try {
            JCObject objClear = (JCObject)classInstance.Invoke("Clear");
            return new StringBuilder(objClear);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Append(char value, int repeatCount) throws Throwable, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException {
        try {
            JCObject objAppend = (JCObject)classInstance.Invoke("Append", value, repeatCount);
            return new StringBuilder(objAppend);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Append(char[] value, int startIndex, int charCount) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.OutOfMemoryException {
        try {
            JCObject objAppend = (JCObject)classInstance.Invoke("Append", value, startIndex, charCount);
            return new StringBuilder(objAppend);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Append(java.lang.String value) throws Throwable, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException {
        try {
            JCObject objAppend = (JCObject)classInstance.Invoke("Append", (Object)value);
            return new StringBuilder(objAppend);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Append(java.lang.String value, int startIndex, int count) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.OutOfMemoryException {
        try {
            JCObject objAppend = (JCObject)classInstance.Invoke("Append", (Object)value, startIndex, count);
            return new StringBuilder(objAppend);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.OutOfMemoryException, system.FormatException {
        try {
            classInstance.Invoke("CopyTo", sourceIndex, destination, destinationIndex, count);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Insert(int index, java.lang.String value, int count) throws Throwable, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException {
        try {
            JCObject objInsert = (JCObject)classInstance.Invoke("Insert", index, (Object)value, count);
            return new StringBuilder(objInsert);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Remove(int startIndex, int length) throws Throwable, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException, system.ArgumentNullException {
        try {
            JCObject objRemove = (JCObject)classInstance.Invoke("Remove", startIndex, length);
            return new StringBuilder(objRemove);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Append(SByte value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objAppend = (JCObject)classInstance.Invoke("Append", (Object)value.getJCOInstance());
            return new StringBuilder(objAppend);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Append(byte value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objAppend = (JCObject)classInstance.Invoke("Append", value);
            return new StringBuilder(objAppend);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Append(char value) throws Throwable, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException {
        try {
            JCObject objAppend = (JCObject)classInstance.Invoke("Append", value);
            return new StringBuilder(objAppend);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Append(short value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objAppend = (JCObject)classInstance.Invoke("Append", value);
            return new StringBuilder(objAppend);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Append(int value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objAppend = (JCObject)classInstance.Invoke("Append", value);
            return new StringBuilder(objAppend);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Append(long value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objAppend = (JCObject)classInstance.Invoke("Append", value);
            return new StringBuilder(objAppend);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Append(Single value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objAppend = (JCObject)classInstance.Invoke("Append", (Object)value.getJCOInstance());
            return new StringBuilder(objAppend);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Append(double value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objAppend = (JCObject)classInstance.Invoke("Append", value);
            return new StringBuilder(objAppend);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Append(Decimal value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objAppend = (JCObject)classInstance.Invoke("Append", (Object)value.getJCOInstance());
            return new StringBuilder(objAppend);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Append(UInt16 value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objAppend = (JCObject)classInstance.Invoke("Append", (Object)value.getJCOInstance());
            return new StringBuilder(objAppend);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Append(UInt32 value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objAppend = (JCObject)classInstance.Invoke("Append", (Object)value.getJCOInstance());
            return new StringBuilder(objAppend);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Append(UInt64 value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objAppend = (JCObject)classInstance.Invoke("Append", (Object)value.getJCOInstance());
            return new StringBuilder(objAppend);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Append(NetObject value) throws Throwable, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException {
        try {
            JCObject objAppend = (JCObject)classInstance.Invoke("Append", (Object)value.getJCOInstance());
            return new StringBuilder(objAppend);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Append(char[] value) throws Throwable, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException {
        try {
            JCObject objAppend = (JCObject)classInstance.Invoke("Append", value);
            return new StringBuilder(objAppend);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Insert(int index, java.lang.String value) throws Throwable, system.ArgumentOutOfRangeException {
        try {
            JCObject objInsert = (JCObject)classInstance.Invoke("Insert", index, (Object)value);
            return new StringBuilder(objInsert);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Insert(int index, SByte value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objInsert = (JCObject)classInstance.Invoke("Insert", index, (Object)value.getJCOInstance());
            return new StringBuilder(objInsert);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Insert(int index, byte value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objInsert = (JCObject)classInstance.Invoke("Insert", index, value);
            return new StringBuilder(objInsert);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Insert(int index, short value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objInsert = (JCObject)classInstance.Invoke("Insert", index, value);
            return new StringBuilder(objInsert);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Insert(int index, char value) throws Throwable, system.ArgumentOutOfRangeException {
        try {
            JCObject objInsert = (JCObject)classInstance.Invoke("Insert", index, value);
            return new StringBuilder(objInsert);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Insert(int index, char[] value) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException {
        try {
            JCObject objInsert = (JCObject)classInstance.Invoke("Insert", index, value);
            return new StringBuilder(objInsert);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Insert(int index, char[] value, int startIndex, int charCount) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException {
        try {
            JCObject objInsert = (JCObject)classInstance.Invoke("Insert", index, value, startIndex, charCount);
            return new StringBuilder(objInsert);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Insert(int index, int value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objInsert = (JCObject)classInstance.Invoke("Insert", index, value);
            return new StringBuilder(objInsert);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Insert(int index, long value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objInsert = (JCObject)classInstance.Invoke("Insert", index, value);
            return new StringBuilder(objInsert);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Insert(int index, Single value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objInsert = (JCObject)classInstance.Invoke("Insert", index, (Object)value.getJCOInstance());
            return new StringBuilder(objInsert);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Insert(int index, double value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objInsert = (JCObject)classInstance.Invoke("Insert", index, value);
            return new StringBuilder(objInsert);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Insert(int index, Decimal value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objInsert = (JCObject)classInstance.Invoke("Insert", index, (Object)value.getJCOInstance());
            return new StringBuilder(objInsert);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Insert(int index, UInt16 value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objInsert = (JCObject)classInstance.Invoke("Insert", index, (Object)value.getJCOInstance());
            return new StringBuilder(objInsert);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Insert(int index, UInt32 value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objInsert = (JCObject)classInstance.Invoke("Insert", index, (Object)value.getJCOInstance());
            return new StringBuilder(objInsert);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Insert(int index, UInt64 value) throws Throwable, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        try {
            JCObject objInsert = (JCObject)classInstance.Invoke("Insert", index, (Object)value.getJCOInstance());
            return new StringBuilder(objInsert);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Insert(int index, NetObject value) throws Throwable, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException {
        try {
            JCObject objInsert = (JCObject)classInstance.Invoke("Insert", index, (Object)value.getJCOInstance());
            return new StringBuilder(objInsert);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder AppendFormat(java.lang.String format, NetObject arg0) throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException {
        try {
            JCObject objAppendFormat = (JCObject)classInstance.Invoke("AppendFormat", (Object)format, (Object)arg0.getJCOInstance());
            return new StringBuilder(objAppendFormat);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder AppendFormat(java.lang.String format, NetObject arg0, NetObject arg1) throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException {
        try {
            JCObject objAppendFormat = (JCObject)classInstance.Invoke("AppendFormat", (Object)format, (Object)arg0.getJCOInstance(), (Object)arg1.getJCOInstance());
            return new StringBuilder(objAppendFormat);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder AppendFormat(java.lang.String format, NetObject arg0, NetObject arg1, NetObject arg2) throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException {
        try {
            JCObject objAppendFormat = (JCObject)classInstance.Invoke("AppendFormat", (Object)format, (Object)arg0.getJCOInstance(), (Object)arg1.getJCOInstance(), (Object)arg2.getJCOInstance());
            return new StringBuilder(objAppendFormat);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Replace(java.lang.String oldValue, java.lang.String newValue) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException {
        try {
            JCObject objReplace = (JCObject)classInstance.Invoke("Replace", (Object)oldValue, (Object)newValue);
            return new StringBuilder(objReplace);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Equals(StringBuilder sb) throws Throwable {
        try {
            return (boolean)classInstance.Invoke("Equals", (Object)sb.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Replace(java.lang.String oldValue, java.lang.String newValue, int startIndex, int count) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException {
        try {
            JCObject objReplace = (JCObject)classInstance.Invoke("Replace", (Object)oldValue, (Object)newValue, startIndex, count);
            return new StringBuilder(objReplace);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Replace(char oldChar, char newChar) throws Throwable, system.ArgumentOutOfRangeException {
        try {
            JCObject objReplace = (JCObject)classInstance.Invoke("Replace", oldChar, newChar);
            return new StringBuilder(objReplace);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Replace(char oldChar, char newChar, int startIndex, int count) throws Throwable, system.ArgumentOutOfRangeException {
        try {
            JCObject objReplace = (JCObject)classInstance.Invoke("Replace", oldChar, newChar, startIndex, count);
            return new StringBuilder(objReplace);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder AppendLine() throws Throwable, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException {
        try {
            JCObject objAppendLine = (JCObject)classInstance.Invoke("AppendLine");
            return new StringBuilder(objAppendLine);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Append(boolean value) throws Throwable, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException {
        try {
            JCObject objAppend = (JCObject)classInstance.Invoke("Append", value);
            return new StringBuilder(objAppend);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder Insert(int index, boolean value) throws Throwable, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException {
        try {
            JCObject objInsert = (JCObject)classInstance.Invoke("Insert", index, value);
            return new StringBuilder(objInsert);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder AppendLine(java.lang.String value) throws Throwable, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException {
        try {
            JCObject objAppendLine = (JCObject)classInstance.Invoke("AppendLine", (Object)value);
            return new StringBuilder(objAppendLine);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder AppendFormat(java.lang.String format, NetObject... args) throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException {
        try {
            JCObject objAppendFormat = (JCObject)classInstance.Invoke("AppendFormat", (Object)format, (Object[])toObjectFromArray(args));
            return new StringBuilder(objAppendFormat);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public int getCapacity() throws Throwable {
        try {
            return (int)classInstance.Get("Capacity");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCapacity(int Capacity) throws Throwable {
        try {
            classInstance.Set("Capacity", Capacity);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMaxCapacity() throws Throwable {
        try {
            return (int)classInstance.Get("MaxCapacity");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getLength() throws Throwable {
        try {
            return (int)classInstance.Get("Length");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLength(int Length) throws Throwable {
        try {
            classInstance.Set("Length", Length);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}