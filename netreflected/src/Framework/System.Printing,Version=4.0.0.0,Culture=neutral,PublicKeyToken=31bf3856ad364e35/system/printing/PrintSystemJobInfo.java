/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.printing;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.printing.PrintSystemJobInfo;
import system.printing.PrintQueue;
import system.printing.PrintServer;
import system.printing.PrintJobStatus;
import system.DateTime;
import system.printing.PrintJobPriority;
import system.io.Stream;
import system.printing.PrintSystemObject;
import system.printing.indexedproperties.PrintPropertyDictionary;


/**
 * The base .NET class managing System.Printing.PrintSystemJobInfo, System.Printing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35. Extends {@link NetObject}.
 */
public class PrintSystemJobInfo extends NetObject  {
    public static final String assemblyFullName = "System.Printing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
	public static final String assemblyShortName = "System.Printing";
    public static final String className = "System.Printing.PrintSystemJobInfo";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintSystemJobInfo(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static PrintSystemJobInfo castFrom(IJCOBridgeReflected from) throws Throwable {
        return new PrintSystemJobInfo(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public static PrintSystemJobInfo Get(PrintQueue printQueue, int jobIdentifier) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.NotSupportedException, system.InvalidOperationException, system.MemberAccessException, system.reflection.TargetException, system.reflection.TargetParameterCountException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.componentmodel.InvalidEnumArgumentException, system.componentmodel.Win32Exception, system.globalization.CultureNotFoundException {
        try {
            JCObject objGet = (JCObject)classType.Invoke("Get", (Object)printQueue.getJCOInstance(), jobIdentifier);
            return new PrintSystemJobInfo(objGet);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Pause() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.MissingMethodException, system.reflection.TargetInvocationException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("Pause");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Resume() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.MissingMethodException, system.reflection.TargetInvocationException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("Resume");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Cancel() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.MissingMethodException, system.reflection.TargetInvocationException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("Cancel");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Restart() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.MissingMethodException, system.reflection.TargetInvocationException, system.OutOfMemoryException {
        try {
            classInstance.Invoke("Restart");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Commit() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException {
        try {
            classInstance.Invoke("Commit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Refresh() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.componentmodel.InvalidEnumArgumentException, system.InvalidOperationException, system.componentmodel.Win32Exception, system.security.SecurityException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.globalization.CultureNotFoundException {
        try {
            classInstance.Invoke("Refresh");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Dispose() throws Throwable, system.ArgumentNullException {
        try {
            classInstance.Invoke("Dispose");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public PrintServer getHostingPrintServer() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("HostingPrintServer");
            return new PrintServer(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHostingPrintServer(PrintServer HostingPrintServer) throws Throwable {
        try {
            classInstance.Set("HostingPrintServer", (Object)HostingPrintServer.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintQueue getHostingPrintQueue() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("HostingPrintQueue");
            return new PrintQueue(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHostingPrintQueue(PrintQueue HostingPrintQueue) throws Throwable {
        try {
            classInstance.Set("HostingPrintQueue", (Object)HostingPrintQueue.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getJobName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("JobName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setJobName(java.lang.String JobName) throws Throwable {
        try {
            classInstance.Set("JobName", (Object)JobName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsRetained() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsRetained");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsUserInterventionRequired() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsUserInterventionRequired");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsBlocked() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsBlocked");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsDeleted() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsDeleted");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsPaperOut() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsPaperOut");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsOffline() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsOffline");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsPrinting() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsPrinting");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsInError() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsInError");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsSpooling() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsSpooling");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsRestarted() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsRestarted");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsPrinted() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsPrinted");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsPaused() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsPaused");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsDeleting() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsDeleting");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsCompleted() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsCompleted");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintJobStatus getJobStatus() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("JobStatus");
            return new PrintJobStatus(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setJobStatus(PrintJobStatus JobStatus) throws Throwable {
        try {
            classInstance.Set("JobStatus", (Object)JobStatus.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getTimeSinceStartedPrinting() throws Throwable {
        try {
            return (int)classInstance.Get("TimeSinceStartedPrinting");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DateTime getTimeJobSubmitted() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("TimeJobSubmitted");
            return new DateTime(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTimeJobSubmitted(DateTime TimeJobSubmitted) throws Throwable {
        try {
            classInstance.Set("TimeJobSubmitted", (Object)TimeJobSubmitted.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getJobSize() throws Throwable {
        try {
            return (int)classInstance.Get("JobSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setJobSize(int JobSize) throws Throwable {
        try {
            classInstance.Set("JobSize", JobSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getNumberOfPagesPrinted() throws Throwable {
        try {
            return (int)classInstance.Get("NumberOfPagesPrinted");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setNumberOfPagesPrinted(int NumberOfPagesPrinted) throws Throwable {
        try {
            classInstance.Set("NumberOfPagesPrinted", NumberOfPagesPrinted);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getNumberOfPages() throws Throwable {
        try {
            return (int)classInstance.Get("NumberOfPages");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setNumberOfPages(int NumberOfPages) throws Throwable {
        try {
            classInstance.Set("NumberOfPages", NumberOfPages);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getUntilTimeOfDay() throws Throwable {
        try {
            return (int)classInstance.Get("UntilTimeOfDay");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUntilTimeOfDay(int UntilTimeOfDay) throws Throwable {
        try {
            classInstance.Set("UntilTimeOfDay", UntilTimeOfDay);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getStartTimeOfDay() throws Throwable {
        try {
            return (int)classInstance.Get("StartTimeOfDay");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStartTimeOfDay(int StartTimeOfDay) throws Throwable {
        try {
            classInstance.Set("StartTimeOfDay", StartTimeOfDay);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getPositionInPrintQueue() throws Throwable {
        try {
            return (int)classInstance.Get("PositionInPrintQueue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPositionInPrintQueue(int PositionInPrintQueue) throws Throwable {
        try {
            classInstance.Set("PositionInPrintQueue", PositionInPrintQueue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintJobPriority getPriority() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Priority");
            return new PrintJobPriority(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPriority(PrintJobPriority Priority) throws Throwable {
        try {
            classInstance.Set("Priority", (Object)Priority.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSubmitter() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Submitter");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSubmitter(java.lang.String Submitter) throws Throwable {
        try {
            classInstance.Set("Submitter", (Object)Submitter);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getJobIdentifier() throws Throwable {
        try {
            return (int)classInstance.Get("JobIdentifier");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setJobIdentifier(int JobIdentifier) throws Throwable {
        try {
            classInstance.Set("JobIdentifier", JobIdentifier);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Stream getJobStream() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("JobStream");
            return new Stream(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintSystemObject getParent() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Parent");
            return new PrintSystemObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("Name");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setName(java.lang.String Name) throws Throwable {
        try {
            classInstance.Set("Name", (Object)Name);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrintPropertyDictionary getPropertiesCollection() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PropertiesCollection");
            return new PrintPropertyDictionary(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPropertiesCollection(PrintPropertyDictionary PropertiesCollection) throws Throwable {
        try {
            classInstance.Set("PropertiesCollection", (Object)PropertiesCollection.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}