/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.diagnostics;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.diagnostics.Process;
import system.security.SecureString;
import system.diagnostics.ProcessStartInfo;
import system.runtime.remoting.ObjRef;
import system.DateTime;
import microsoft.win32.safehandles.SafeProcessHandle;
import system.diagnostics.ProcessModule;
import system.diagnostics.ProcessModuleCollection;
import system.diagnostics.ProcessPriorityClass;
import system.TimeSpan;
import system.diagnostics.ProcessThreadCollection;
import system.io.StreamWriter;
import system.io.StreamReader;
import system.diagnostics.DataReceivedEventHandler;
import system.EventHandler;


/**
 * The base .NET class managing System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089. Extends {@link NetObject}.
 */
public class Process extends NetObject  {
    public static final String assemblyFullName = "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
	public static final String assemblyShortName = "System";
    public static final String className = "System.Diagnostics.Process";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Process(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static Process castFrom(IJCOBridgeReflected from) throws Throwable {
        return new Process(from.getJCOInstance());
    }

    // Constructors section
    
    
    public Process() throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            classInstance = (JCObject) classType.NewObject();
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    
    public static Process Start(java.lang.String fileName, java.lang.String userName, SecureString password, java.lang.String domain) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.RankException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.security.cryptography.CryptographicException, system.collections.generic.KeyNotFoundException {
        try {
            JCObject objStart = (JCObject)classType.Invoke("Start", (Object)fileName, (Object)userName, (Object)password.getJCOInstance(), (Object)domain);
            return new Process(objStart);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Process Start(java.lang.String fileName, java.lang.String arguments, java.lang.String userName, SecureString password, java.lang.String domain) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.RankException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.security.cryptography.CryptographicException, system.collections.generic.KeyNotFoundException {
        try {
            JCObject objStart = (JCObject)classType.Invoke("Start", (Object)fileName, (Object)arguments, (Object)userName, (Object)password.getJCOInstance(), (Object)domain);
            return new Process(objStart);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Process Start(java.lang.String fileName) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.RankException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.security.cryptography.CryptographicException, system.collections.generic.KeyNotFoundException {
        try {
            JCObject objStart = (JCObject)classType.Invoke("Start", (Object)fileName);
            return new Process(objStart);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Process Start(java.lang.String fileName, java.lang.String arguments) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.RankException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.security.cryptography.CryptographicException, system.collections.generic.KeyNotFoundException {
        try {
            JCObject objStart = (JCObject)classType.Invoke("Start", (Object)fileName, (Object)arguments);
            return new Process(objStart);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Process Start(ProcessStartInfo startInfo) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.OutOfMemoryException, system.NullReferenceException, system.componentmodel.Win32Exception, system.IndexOutOfRangeException, system.RankException, system.NotSupportedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.security.cryptography.CryptographicException, system.collections.generic.KeyNotFoundException, system.FormatException {
        try {
            JCObject objStart = (JCObject)classType.Invoke("Start", (Object)startInfo.getJCOInstance());
            return new Process(objStart);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CloseMainWindow() throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.PlatformNotSupportedException, system.NotSupportedException, system.NullReferenceException, system.collections.generic.KeyNotFoundException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.AccessViolationException {
        try {
            return (boolean)classInstance.Invoke("CloseMainWindow");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Close() throws Throwable, system.ArgumentException, system.ArgumentNullException {
        try {
            classInstance.Invoke("Close");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void EnterDebugMode() throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArgumentException, system.FormatException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception {
        try {
            classType.Invoke("EnterDebugMode");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void LeaveDebugMode() throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArgumentException, system.FormatException, system.IndexOutOfRangeException, system.componentmodel.Win32Exception {
        try {
            classType.Invoke("LeaveDebugMode");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Process GetProcessById(int processId, java.lang.String machineName) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.NullReferenceException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.componentmodel.Win32Exception, system.io.IOException, system.AccessViolationException {
        try {
            JCObject objGetProcessById = (JCObject)classType.Invoke("GetProcessById", processId, (Object)machineName);
            return new Process(objGetProcessById);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Process GetProcessById(int processId) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.NullReferenceException, system.NotSupportedException, system.PlatformNotSupportedException, system.componentmodel.Win32Exception, system.AccessViolationException {
        try {
            JCObject objGetProcessById = (JCObject)classType.Invoke("GetProcessById", processId);
            return new Process(objGetProcessById);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Process[] GetProcesses() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.NullReferenceException, system.NotSupportedException, system.collections.generic.KeyNotFoundException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.componentmodel.Win32Exception, system.io.IOException, system.AccessViolationException {
        try {
            ArrayList<Process> resultingArrayList = new ArrayList<Process>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetProcesses");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new Process(resultingObject));
            }
            Process[] resultingArray = new Process[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Refresh() throws Throwable {
        try {
            classInstance.Invoke("Refresh");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Start() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.OutOfMemoryException, system.NullReferenceException, system.componentmodel.Win32Exception, system.IndexOutOfRangeException, system.RankException, system.FormatException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.security.cryptography.CryptographicException, system.collections.generic.KeyNotFoundException {
        try {
            return (boolean)classInstance.Invoke("Start");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Kill() throws Throwable, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.IndexOutOfRangeException, system.resources.MissingManifestResourceException, system.FormatException, system.PlatformNotSupportedException, system.NotSupportedException, system.NullReferenceException, system.collections.generic.KeyNotFoundException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.AccessViolationException {
        try {
            classInstance.Invoke("Kill");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean WaitForExit(int milliseconds) throws Throwable, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.ArgumentNullException, system.TypeLoadException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.IndexOutOfRangeException, system.FormatException, system.PlatformNotSupportedException, system.NullReferenceException, system.collections.generic.KeyNotFoundException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.AccessViolationException {
        try {
            return (boolean)classInstance.Invoke("WaitForExit", milliseconds);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void WaitForExit() throws Throwable, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.IndexOutOfRangeException, system.resources.MissingManifestResourceException, system.FormatException, system.PlatformNotSupportedException, system.NotSupportedException, system.NullReferenceException, system.collections.generic.KeyNotFoundException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.AccessViolationException {
        try {
            classInstance.Invoke("WaitForExit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean WaitForInputIdle(int milliseconds) throws Throwable, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.NotImplementedException, system.IndexOutOfRangeException, system.resources.MissingManifestResourceException, system.FormatException, system.PlatformNotSupportedException, system.NotSupportedException, system.NullReferenceException, system.collections.generic.KeyNotFoundException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.AccessViolationException {
        try {
            return (boolean)classInstance.Invoke("WaitForInputIdle", milliseconds);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean WaitForInputIdle() throws Throwable, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.threading.AbandonedMutexException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.FormatException, system.PlatformNotSupportedException, system.NotSupportedException, system.NullReferenceException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.AccessViolationException {
        try {
            return (boolean)classInstance.Invoke("WaitForInputIdle");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BeginOutputReadLine() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.threading.ThreadAbortException, system.threading.tasks.TaskSchedulerException, system.threading.tasks.TaskCanceledException, system.AggregateException, system.threading.SemaphoreFullException, system.IndexOutOfRangeException {
        try {
            classInstance.Invoke("BeginOutputReadLine");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BeginErrorReadLine() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.threading.ThreadAbortException, system.threading.tasks.TaskSchedulerException, system.threading.tasks.TaskCanceledException, system.AggregateException, system.threading.SemaphoreFullException, system.IndexOutOfRangeException {
        try {
            classInstance.Invoke("BeginErrorReadLine");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void CancelOutputRead() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("CancelOutputRead");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void CancelErrorRead() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException {
        try {
            classInstance.Invoke("CancelErrorRead");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Process[] GetProcessesByName(java.lang.String processName) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.NullReferenceException, system.NotSupportedException, system.collections.generic.KeyNotFoundException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.componentmodel.Win32Exception, system.AccessViolationException, system.threading.AbandonedMutexException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            ArrayList<Process> resultingArrayList = new ArrayList<Process>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetProcessesByName", (Object)processName);
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new Process(resultingObject));
            }
            Process[] resultingArray = new Process[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Process[] GetProcessesByName(java.lang.String processName, java.lang.String machineName) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotImplementedException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.NullReferenceException, system.NotSupportedException, system.collections.generic.KeyNotFoundException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.componentmodel.Win32Exception, system.io.IOException, system.AccessViolationException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            ArrayList<Process> resultingArrayList = new ArrayList<Process>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetProcessesByName", (Object)processName, (Object)machineName);
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new Process(resultingObject));
            }
            Process[] resultingArray = new Process[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Process[] GetProcesses(java.lang.String machineName) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotImplementedException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.NullReferenceException, system.collections.generic.KeyNotFoundException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.SecurityException, system.componentmodel.Win32Exception, system.UnauthorizedAccessException, system.io.IOException, system.threading.AbandonedMutexException, system.AccessViolationException {
        try {
            ArrayList<Process> resultingArrayList = new ArrayList<Process>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetProcesses", (Object)machineName);
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new Process(resultingObject));
            }
            Process[] resultingArray = new Process[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Process GetCurrentProcess() throws Throwable {
        try {
            JCObject objGetCurrentProcess = (JCObject)classType.Invoke("GetCurrentProcess");
            return new Process(objGetCurrentProcess);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Dispose() throws Throwable, system.ArgumentException, system.ArgumentNullException {
        try {
            classInstance.Invoke("Dispose");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.runtime.remoting.RemotingException, system.ObjectDisposedException, system.InvalidOperationException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            JCObject objGetLifetimeService = (JCObject)classInstance.Invoke("GetLifetimeService");
            return new NetObject(objGetLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject InitializeLifetimeService() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.FormatException, system.runtime.remoting.RemotingException, system.ObjectDisposedException, system.InvalidOperationException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException {
        try {
            JCObject objInitializeLifetimeService = (JCObject)classInstance.Invoke("InitializeLifetimeService");
            return new NetObject(objInitializeLifetimeService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ObjRef CreateObjRef(NetType requestedType) throws Throwable, system.runtime.remoting.RemotingException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        try {
            JCObject objCreateObjRef = (JCObject)classInstance.Invoke("CreateObjRef", (Object)requestedType.getJCOInstance());
            return new ObjRef(objCreateObjRef);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public int getBasePriority() throws Throwable {
        try {
            return (int)classInstance.Get("BasePriority");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getExitCode() throws Throwable {
        try {
            return (int)classInstance.Get("ExitCode");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getHasExited() throws Throwable {
        try {
            return (boolean)classInstance.Get("HasExited");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DateTime getExitTime() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ExitTime");
            return new DateTime(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SafeProcessHandle getSafeHandle() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("SafeHandle");
            return new SafeProcessHandle(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getHandleCount() throws Throwable {
        try {
            return (int)classInstance.Get("HandleCount");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getId() throws Throwable {
        try {
            return (int)classInstance.Get("Id");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getMachineName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("MachineName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getMainWindowTitle() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("MainWindowTitle");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ProcessModule getMainModule() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("MainModule");
            return new ProcessModule(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ProcessModuleCollection getModules() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Modules");
            return new ProcessModuleCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getNonpagedSystemMemorySize() throws Throwable {
        try {
            return (int)classInstance.Get("NonpagedSystemMemorySize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getNonpagedSystemMemorySize64() throws Throwable {
        try {
            return (long)classInstance.Get("NonpagedSystemMemorySize64");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getPagedMemorySize() throws Throwable {
        try {
            return (int)classInstance.Get("PagedMemorySize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getPagedMemorySize64() throws Throwable {
        try {
            return (long)classInstance.Get("PagedMemorySize64");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getPagedSystemMemorySize() throws Throwable {
        try {
            return (int)classInstance.Get("PagedSystemMemorySize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getPagedSystemMemorySize64() throws Throwable {
        try {
            return (long)classInstance.Get("PagedSystemMemorySize64");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getPeakPagedMemorySize() throws Throwable {
        try {
            return (int)classInstance.Get("PeakPagedMemorySize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getPeakPagedMemorySize64() throws Throwable {
        try {
            return (long)classInstance.Get("PeakPagedMemorySize64");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getPeakWorkingSet() throws Throwable {
        try {
            return (int)classInstance.Get("PeakWorkingSet");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getPeakWorkingSet64() throws Throwable {
        try {
            return (long)classInstance.Get("PeakWorkingSet64");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getPeakVirtualMemorySize() throws Throwable {
        try {
            return (int)classInstance.Get("PeakVirtualMemorySize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getPeakVirtualMemorySize64() throws Throwable {
        try {
            return (long)classInstance.Get("PeakVirtualMemorySize64");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getPriorityBoostEnabled() throws Throwable {
        try {
            return (boolean)classInstance.Get("PriorityBoostEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPriorityBoostEnabled(boolean PriorityBoostEnabled) throws Throwable {
        try {
            classInstance.Set("PriorityBoostEnabled", PriorityBoostEnabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ProcessPriorityClass getPriorityClass() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PriorityClass");
            return new ProcessPriorityClass(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setPriorityClass(ProcessPriorityClass PriorityClass) throws Throwable {
        try {
            classInstance.Set("PriorityClass", (Object)PriorityClass.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getPrivateMemorySize() throws Throwable {
        try {
            return (int)classInstance.Get("PrivateMemorySize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getPrivateMemorySize64() throws Throwable {
        try {
            return (long)classInstance.Get("PrivateMemorySize64");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getPrivilegedProcessorTime() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PrivilegedProcessorTime");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getProcessName() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("ProcessName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getResponding() throws Throwable {
        try {
            return (boolean)classInstance.Get("Responding");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getSessionId() throws Throwable {
        try {
            return (int)classInstance.Get("SessionId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ProcessStartInfo getStartInfo() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("StartInfo");
            return new ProcessStartInfo(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStartInfo(ProcessStartInfo StartInfo) throws Throwable {
        try {
            classInstance.Set("StartInfo", (Object)StartInfo.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DateTime getStartTime() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("StartTime");
            return new DateTime(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ProcessThreadCollection getThreads() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Threads");
            return new ProcessThreadCollection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getTotalProcessorTime() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("TotalProcessorTime");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getUserProcessorTime() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("UserProcessorTime");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getVirtualMemorySize() throws Throwable {
        try {
            return (int)classInstance.Get("VirtualMemorySize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getVirtualMemorySize64() throws Throwable {
        try {
            return (long)classInstance.Get("VirtualMemorySize64");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getEnableRaisingEvents() throws Throwable {
        try {
            return (boolean)classInstance.Get("EnableRaisingEvents");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEnableRaisingEvents(boolean EnableRaisingEvents) throws Throwable {
        try {
            classInstance.Set("EnableRaisingEvents", EnableRaisingEvents);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StreamWriter getStandardInput() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("StandardInput");
            return new StreamWriter(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StreamReader getStandardOutput() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("StandardOutput");
            return new StreamReader(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StreamReader getStandardError() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("StandardError");
            return new StreamReader(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getWorkingSet() throws Throwable {
        try {
            return (int)classInstance.Get("WorkingSet");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getWorkingSet64() throws Throwable {
        try {
            return (long)classInstance.Get("WorkingSet64");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
    public void addOutputDataReceived(DataReceivedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("OutputDataReceived", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeOutputDataReceived(DataReceivedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("OutputDataReceived", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addErrorDataReceived(DataReceivedEventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("ErrorDataReceived", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeErrorDataReceived(DataReceivedEventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("ErrorDataReceived", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addExited(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Exited", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeExited(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Exited", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void addDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.RegisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void removeDisposed(EventHandler handler) throws Throwable {
        try {
            classInstance.UnregisterEventListener("Disposed", handler);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


}