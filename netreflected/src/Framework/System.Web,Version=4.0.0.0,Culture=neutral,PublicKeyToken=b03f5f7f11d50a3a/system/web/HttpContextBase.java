/*
 *  MIT License
 *
 *  Copyright (c) 2020 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector version 1.0.0.0
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package system.web;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.globalization.CultureInfo;
import system.web.sessionstate.SessionStateBehavior;
import system.web.HttpApplicationStateBase;
import system.web.HttpApplication;
import system.web.configuration.AsyncPreloadModeFlags;
import system.web.caching.Cache;
import system.web.RequestNotification;
import system.web.instrumentation.PageInstrumentationService;
import system.web.profile.ProfileBase;
import system.web.HttpRequestBase;
import system.web.HttpResponseBase;
import system.web.HttpServerUtilityBase;
import system.web.HttpSessionStateBase;
import system.DateTime;
import system.web.TraceContext;


/**
 * The base .NET class managing System.Web.HttpContextBase, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Extends {@link NetObject}.
 */
public class HttpContextBase extends NetObject  {
    public static final String assemblyFullName = "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
	public static final String assemblyShortName = "System.Web";
    public static final String className = "System.Web.HttpContextBase";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            return bridge.GetType(className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        } catch (JCException e) {
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HttpContextBase(Object instance) throws Throwable {
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOBridgeInstance.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    public static HttpContextBase castFrom(IJCOBridgeReflected from) throws Throwable {
        return new HttpContextBase(from.getJCOInstance());
    }

    // Constructors section
    
    
    
    // Methods section
    
    
    public void AddError(NetException errorInfo) throws Throwable, system.NotImplementedException {
        try {
            classInstance.Invoke("AddError", (Object)errorInfo.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ClearError() throws Throwable, system.NotImplementedException {
        try {
            classInstance.Invoke("ClearError");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetGlobalResourceObject(java.lang.String classKey, java.lang.String resourceKey) throws Throwable, system.NotImplementedException {
        try {
            JCObject objGetGlobalResourceObject = (JCObject)classInstance.Invoke("GetGlobalResourceObject", (Object)classKey, (Object)resourceKey);
            return new NetObject(objGetGlobalResourceObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetGlobalResourceObject(java.lang.String classKey, java.lang.String resourceKey, CultureInfo culture) throws Throwable, system.NotImplementedException {
        try {
            JCObject objGetGlobalResourceObject = (JCObject)classInstance.Invoke("GetGlobalResourceObject", (Object)classKey, (Object)resourceKey, (Object)culture.getJCOInstance());
            return new NetObject(objGetGlobalResourceObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetLocalResourceObject(java.lang.String virtualPath, java.lang.String resourceKey) throws Throwable, system.NotImplementedException {
        try {
            JCObject objGetLocalResourceObject = (JCObject)classInstance.Invoke("GetLocalResourceObject", (Object)virtualPath, (Object)resourceKey);
            return new NetObject(objGetLocalResourceObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetLocalResourceObject(java.lang.String virtualPath, java.lang.String resourceKey, CultureInfo culture) throws Throwable, system.NotImplementedException {
        try {
            JCObject objGetLocalResourceObject = (JCObject)classInstance.Invoke("GetLocalResourceObject", (Object)virtualPath, (Object)resourceKey, (Object)culture.getJCOInstance());
            return new NetObject(objGetLocalResourceObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetSection(java.lang.String sectionName) throws Throwable, system.NotImplementedException {
        try {
            JCObject objGetSection = (JCObject)classInstance.Invoke("GetSection", (Object)sectionName);
            return new NetObject(objGetSection);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RewritePath(java.lang.String path) throws Throwable, system.NotImplementedException {
        try {
            classInstance.Invoke("RewritePath", (Object)path);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RewritePath(java.lang.String path, boolean rebaseClientPath) throws Throwable, system.NotImplementedException {
        try {
            classInstance.Invoke("RewritePath", (Object)path, rebaseClientPath);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RewritePath(java.lang.String filePath, java.lang.String pathInfo, java.lang.String queryString) throws Throwable, system.NotImplementedException {
        try {
            classInstance.Invoke("RewritePath", (Object)filePath, (Object)pathInfo, (Object)queryString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RewritePath(java.lang.String filePath, java.lang.String pathInfo, java.lang.String queryString, boolean setClientFilePath) throws Throwable, system.NotImplementedException {
        try {
            classInstance.Invoke("RewritePath", (Object)filePath, (Object)pathInfo, (Object)queryString, setClientFilePath);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetSessionStateBehavior(SessionStateBehavior sessionStateBehavior) throws Throwable, system.NotImplementedException {
        try {
            classInstance.Invoke("SetSessionStateBehavior", (Object)sessionStateBehavior.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetService(NetType serviceType) throws Throwable, system.NotImplementedException {
        try {
            JCObject objGetService = (JCObject)classInstance.Invoke("GetService", (Object)serviceType.getJCOInstance());
            return new NetObject(objGetService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    
    public NetException[] getAllErrors() throws Throwable {
        try {
            ArrayList<NetException> resultingArrayList = new ArrayList<NetException>();
            JCObject resultingObjects = (JCObject)classInstance.Get("AllErrors");
            for (Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new NetException(resultingObject));
            }
            NetException[] resultingArray = new NetException[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowAsyncDuringSyncStages() throws Throwable {
        try {
            return (boolean)classInstance.Get("AllowAsyncDuringSyncStages");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowAsyncDuringSyncStages(boolean AllowAsyncDuringSyncStages) throws Throwable {
        try {
            classInstance.Set("AllowAsyncDuringSyncStages", AllowAsyncDuringSyncStages);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HttpApplicationStateBase getApplication() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Application");
            return new HttpApplicationStateBase(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HttpApplication getApplicationInstance() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("ApplicationInstance");
            return new HttpApplication(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setApplicationInstance(HttpApplication ApplicationInstance) throws Throwable {
        try {
            classInstance.Set("ApplicationInstance", (Object)ApplicationInstance.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AsyncPreloadModeFlags getAsyncPreloadMode() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("AsyncPreloadMode");
            return new AsyncPreloadModeFlags(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAsyncPreloadMode(AsyncPreloadModeFlags AsyncPreloadMode) throws Throwable {
        try {
            classInstance.Set("AsyncPreloadMode", (Object)AsyncPreloadMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Cache getCache() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Cache");
            return new Cache(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RequestNotification getCurrentNotification() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("CurrentNotification");
            return new RequestNotification(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetException getError() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Error");
            return new NetException(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsCustomErrorEnabled() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsCustomErrorEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsDebuggingEnabled() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsDebuggingEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsPostNotification() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsPostNotification");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsWebSocketRequest() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsWebSocketRequest");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsWebSocketRequestUpgrading() throws Throwable {
        try {
            return (boolean)classInstance.Get("IsWebSocketRequestUpgrading");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PageInstrumentationService getPageInstrumentation() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("PageInstrumentation");
            return new PageInstrumentationService(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ProfileBase getProfile() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Profile");
            return new ProfileBase(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HttpRequestBase getRequest() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Request");
            return new HttpRequestBase(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HttpResponseBase getResponse() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Response");
            return new HttpResponseBase(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HttpServerUtilityBase getServer() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Server");
            return new HttpServerUtilityBase(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HttpSessionStateBase getSession() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Session");
            return new HttpSessionStateBase(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSkipAuthorization() throws Throwable {
        try {
            return (boolean)classInstance.Get("SkipAuthorization");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSkipAuthorization(boolean SkipAuthorization) throws Throwable {
        try {
            classInstance.Set("SkipAuthorization", SkipAuthorization);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DateTime getTimestamp() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Timestamp");
            return new DateTime(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getThreadAbortOnTimeout() throws Throwable {
        try {
            return (boolean)classInstance.Get("ThreadAbortOnTimeout");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setThreadAbortOnTimeout(boolean ThreadAbortOnTimeout) throws Throwable {
        try {
            classInstance.Set("ThreadAbortOnTimeout", ThreadAbortOnTimeout);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TraceContext getTrace() throws Throwable {
        try {
            JCObject val = (JCObject)classInstance.Get("Trace");
            return new TraceContext(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getWebSocketNegotiatedProtocol() throws Throwable {
        try {
            return (java.lang.String)classInstance.Get("WebSocketNegotiatedProtocol");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



	// Instance Events section
    
    
}